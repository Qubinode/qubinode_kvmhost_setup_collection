---
- name: Verify KVM Host Setup
  hosts: all
  become: true
  gather_facts: true

  tasks:
    - name: "=== RHEL Version Detection Verification ==="
      block:
        - name: Verify RHEL version facts are set
          ansible.builtin.assert:
            that:
              - kvmhost_os_family is defined
              - kvmhost_os_major_version is defined
              - kvmhost_os_is_rhel_compatible is defined
            fail_msg: "RHEL version detection facts not properly set"
            success_msg: "RHEL version detection completed successfully"

        - name: Verify version-specific variables are set
          ansible.builtin.assert:
            that:
              - kvmhost_packages_current is defined
              - kvmhost_services_current is defined
              - kvmhost_package_manager is defined
            fail_msg: "Version-specific variables not properly configured"
            success_msg: "Version-specific variables configured correctly"

        - name: Display detected OS information
          ansible.builtin.debug:
            msg: |
              Detected OS Information:
              - Family: {{ kvmhost_os_family }}
              - Version: {{ kvmhost_os_major_version }}
              - RHEL Compatible: {{ kvmhost_os_is_rhel_compatible }}
              - Package Manager: {{ kvmhost_package_manager }}

    - name: "=== Package Installation Verification ==="
      block:
        - name: Collect package facts
          ansible.builtin.package_facts:
            manager: auto

        - name: Verify version-specific packages are installed
          ansible.builtin.assert:
            that: item in ansible_facts.packages
            fail_msg: "Required package {{ item }} is not installed"
            success_msg: "Package {{ item }} is installed"
          loop: "{{ kvmhost_packages_current }}"
          when: kvmhost_packages_current is defined

        - name: Verify EPEL repository is enabled (ADR-0001 compliance)
          ansible.builtin.shell: dnf repolist enabled | grep -i epel
          register: epel_check
          changed_when: false
          failed_when: epel_check.rc != 0

        - name: Assert EPEL repository compliance
          ansible.builtin.assert:
            that: epel_check.rc == 0
            fail_msg: "EPEL repository not properly configured per ADR-0001"
            success_msg: "EPEL repository correctly configured per ADR-0001"

    - name: "=== Service Verification ==="
      block:
        - name: Verify libvirt service status
          ansible.builtin.service_facts:

        - name: Assert version-specific services are running
          ansible.builtin.assert:
            that:
              - ansible_facts.services['libvirtd.service'].state == 'running'
              - ansible_facts.services['libvirtd.service'].status == 'enabled'
            fail_msg: "Libvirt service is not running and enabled"
            success_msg: "Libvirt service is running and enabled"

    - name: "=== KVM Host Validation Verification ==="
      block:
        - name: Verify KVM device availability
          ansible.builtin.stat:
            path: /dev/kvm
          register: kvm_device_check

        - name: Assert KVM device exists
          ansible.builtin.assert:
            that: kvm_device_check.stat.exists
            fail_msg: "KVM device /dev/kvm not found"
            success_msg: "KVM device /dev/kvm is available"
          when: ansible_virtualization_role != "guest"

        - name: Verify libvirt connectivity
          ansible.builtin.command: virsh list --all
          register: virsh_test
          changed_when: false

        - name: Assert libvirt connectivity
          ansible.builtin.assert:
            that: virsh_test.rc == 0
            fail_msg: "Cannot connect to libvirt daemon"
            success_msg: "libvirt connectivity verified"

    - name: "=== Directory Structure Verification ==="
      block:
        - name: Verify libvirt directories
          ansible.builtin.stat:
            path: "{{ item }}"
          register: dir_check
          loop:
            - "/var/lib/libvirt/images"
            - "/etc/libvirt"

        - name: Assert directories exist
          ansible.builtin.assert:
            that:
              - item.stat.exists
              - item.stat.isdir
            fail_msg: "Directory {{ item.item }} does not exist or is not a directory"
            success_msg: "Directory {{ item.item }} exists and is a directory"
          loop: "{{ dir_check.results }}"

    - name: "=== Network Configuration Verification ==="
      block:
        - name: Get libvirt network info
          ansible.builtin.command: virsh net-list --all
          register: net_info
          changed_when: false

        - name: Assert default network exists
          ansible.builtin.assert:
            that: '"default" in net_info.stdout'
            fail_msg: "Default libvirt network is not configured"
            success_msg: "Default libvirt network is configured"

    - name: "=== Storage Pool Verification ==="
      block:
        - name: Get libvirt pool info
          ansible.builtin.command: virsh pool-list --all
          register: pool_info
          changed_when: false

        - name: Assert default storage pool exists
          ansible.builtin.assert:
            that: '"default" in pool_info.stdout'
            fail_msg: "Default storage pool is not configured"
            success_msg: "Default storage pool is configured"

    - name: "=== User Configuration Verification ==="
      block:
        - name: Verify user in libvirt group
          ansible.builtin.command: groups {{ admin_user }}
          register: user_groups
          changed_when: false

        - name: Assert user is in libvirt group
          ansible.builtin.assert:
            that: '"libvirt" in user_groups.stdout'
            fail_msg: "User {{ admin_user }} is not in libvirt group"
            success_msg: "User {{ admin_user }} is in libvirt group"

    - name: "=== Shell Configuration Verification ==="
      block:
        - name: Verify shell configuration files
          ansible.builtin.stat:
            path: "/home/{{ admin_user }}/{{ item }}"
          register: shell_files
          loop:
            - .bashrc
            - .vimrc
          when: configure_shell | default(false)

        - name: Assert shell configuration files exist
          ansible.builtin.assert:
            that: item.stat.exists
            fail_msg: "Shell configuration file {{ item.item }} does not exist"
            success_msg: "Shell configuration file {{ item.item }} exists"
          loop: "{{ shell_files.results }}"
          when: 
            - configure_shell | default(false)
            - shell_files.results is defined

    - name: "=== Idempotency Verification ==="
      block:
        - name: Verify configuration files have correct permissions
          ansible.builtin.stat:
            path: /var/lib/libvirt/images
          register: storage_perms

        - name: Assert storage directory permissions
          ansible.builtin.assert:
            that: 
              - storage_perms.stat.mode == "0711"
              - storage_perms.stat.pw_name == "root"
            fail_msg: "Storage directory permissions incorrect"
            success_msg: "Storage directory permissions correct"

    - name: "=== Verification Summary ==="
      ansible.builtin.debug:
        msg: |
          ✅ KVM Host Setup Verification Completed Successfully!
          
          Verified Components:
          ✓ RHEL version detection and conditional logic
          ✓ Version-specific package installation
          ✓ EPEL repository configuration (ADR-0001)
          ✓ Service configuration and status
          ✓ KVM host hardware validation
          ✓ libvirt connectivity and configuration
          ✓ Network and storage configuration
          ✓ User and permission configuration
          ✓ Shell configuration (if enabled)
          ✓ Idempotency compliance
          
          Platform: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Architecture: {{ ansible_architecture }}
          Detected OS Family: {{ kvmhost_os_family | default('Unknown') }}
          Package Manager: {{ kvmhost_package_manager | default('Unknown') }}
          
          All validation tests passed! ✅
