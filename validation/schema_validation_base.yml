
# =============================================================================
# SCHEMA VALIDATION FOR KVMHOST_BASE ROLE
# =============================================================================
# Validates kvmhost_base role variables against JSON schema

- name: Load kvmhost_base schema
  ansible.builtin.set_fact:
    kvmhost_base_schema: "{{ lookup('file', validation_schemas_dir + '/kvmhost_base_schema.json') | from_json }}"
  vars:
    validation_schemas_dir: "{{ playbook_dir }}/validation/schemas"

- name: Extract kvmhost_base variables for validation
  ansible.builtin.set_fact:
    kvmhost_base_vars:
      cicd_test: "{{ cicd_test | default(false) }}"
      testing_mode: "{{ testing_mode | default(false) }}"
      supported_os_families: "{{ supported_os_families | default([]) }}"
      supported_major_versions: "{{ supported_major_versions | default([]) }}"
      base_packages_common: "{{ base_packages_common | default([]) }}"
      base_packages_rhel_family: "{{ base_packages_rhel_family | default([]) }}"
      enable_epel: "{{ enable_epel | default(true) }}"
      epel_installation_method: "{{ epel_installation_method | default('dnf_module') }}"
      base_services_enabled: "{{ base_services_enabled | default([]) }}"

- name: Validate kvmhost_base required properties
  ansible.builtin.set_fact:
    validation_errors: "{{ validation_errors + [error_msg] }}"
  vars:
    error_msg: "kvmhost_base validation error: Required property '{{ item }}' is missing or empty"
  when: 
    - kvmhost_base_schema.required is defined
    - item in kvmhost_base_schema.required
    - kvmhost_base_vars[item] is not defined or (kvmhost_base_vars[item] | type_debug == 'list' and kvmhost_base_vars[item] | length == 0)
  loop: "{{ kvmhost_base_schema.required }}"

- name: Validate epel_installation_method (ADR-0001 compliance)
  ansible.builtin.set_fact:
    validation_errors: "{{ validation_errors + [adr_error_msg] }}"
  vars:
    adr_error_msg: "ADR-0001 violation: epel_installation_method must be 'dnf_module', found '{{ kvmhost_base_vars.epel_installation_method }}'"
  when: 
    - kvmhost_base_vars.epel_installation_method is defined
    - kvmhost_base_vars.epel_installation_method != 'dnf_module'

- name: Validate OS family support
  ansible.builtin.set_fact:
    validation_errors: "{{ validation_errors + [os_error_msg] }}"
  vars:
    os_error_msg: "kvmhost_base validation error: Unsupported OS family '{{ item }}' in supported_os_families"
    valid_os_families: ["RedHat", "CentOS", "Rocky", "AlmaLinux", "Fedora"]
  when: 
    - kvmhost_base_vars.supported_os_families is defined
    - item not in valid_os_families
  loop: "{{ kvmhost_base_vars.supported_os_families }}"

- name: Validate major version format
  ansible.builtin.set_fact:
    validation_errors: "{{ validation_errors + [version_error_msg] }}"
  vars:
    version_error_msg: "kvmhost_base validation error: Invalid major version format '{{ item }}', must be numeric"
  when: 
    - kvmhost_base_vars.supported_major_versions is defined
    - not (item | string | regex_search('^[0-9]+$'))
  loop: "{{ kvmhost_base_vars.supported_major_versions }}"

- name: Add kvmhost_base validation success
  ansible.builtin.set_fact:
    validation_warnings: "{{ validation_warnings + ['kvmhost_base schema validation passed'] }}"
  when: validation_errors | length == 0
