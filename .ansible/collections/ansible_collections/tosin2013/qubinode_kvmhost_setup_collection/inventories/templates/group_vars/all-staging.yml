---
# Staging Environment Configuration Template  
# Copy to inventories/<env>/group_vars/all.yml and customize

# =============================================================================
# ENVIRONMENT IDENTIFICATION
# =============================================================================
environment_name: "staging"
environment_type: "stage"
deployment_stage: "staging"

# =============================================================================
# STAGING CONFIGURATION (Production-like with some testing features)
# =============================================================================
# Limited testing features for staging
cicd_test: false
testing_mode: false
molecule_test: false

# Moderate logging for staging
kvmhost_base_debug_enabled: false
kvmhost_networking_debug_enabled: false
enable_network_debugging: false
network_debug_level: "info"

# =============================================================================
# KVMHOST BASE CONFIGURATION (Staging)
# =============================================================================
kvmhost_base_epel_enabled: true
kvmhost_base_testing_mode: false

# Original required packages from kvmhost_setup role (same as production)
required_rpm_packages:
  - virt-install
  - libvirt-daemon-config-network
  - libvirt-daemon-kvm
  - libguestfs-tools
  - libvirt-client
  - qemu-kvm
  - nfs-utils
  - libvirt-daemon
  - libvirt-client
  - virt-top
  - tuned
  - openssh-server
  - wget
  - bc
  - git
  - net-tools
  - bind-utils
  - dnf-utils
  - firewalld
  - bash-completion
  - kexec-tools
  - sos
  - psacct
  - vim
  - device-mapper-event-libs
  - device-mapper-libs
  - httpd-tools
  - tmux
  - python3-dns
  - python3-pip
  - python3-lxml
  - cargo
  - lm_sensors
  - python3-netaddr
  - cockpit-machines
  - bc
  - nmap
  - ncurses-devel
  - podman
  - container-selinux
  - k9s

# Python packages from original spec
kvmhost_pip_packages:
  - httpie      # Command line HTTP client
  - tldr        # Simplified man pages
  - kube-shell  # Kubernetes shell
  - openshift   # OpenShift CLI

# Staging memory requirements (between dev and prod)
kvmhost_base_validation_memory_minimum: 2048  # 2GB minimum for staging

# =============================================================================
# NETWORKING CONFIGURATION (Staging)
# =============================================================================
kvmhost_networking_bridge_name: "stagbr0"  # Staging-specific bridge name
kvmhost_networking_auto_detect_interface: true
kvmhost_networking_backup_existing_config: true  # Backup in staging
kvmhost_networking_validation_enabled: true
kvmhost_networking_validation_timeout: 45  # Between dev and prod

# Staging network settings
kvmhost_networking_bridge_config:
  method: "auto"
  dhcp_timeout: 25
  ipv4_method: "auto"
  ipv6_method: "auto"

# Staging connectivity verification
kvmhost_networking_ping_test_hosts:
  - "8.8.8.8"
  - "1.1.1.1"

# =============================================================================
# LIBVIRT CONFIGURATION (Staging)
# =============================================================================
# Based on original kvmhost_setup defaults
lib_virt_setup: true  # Original variable name
kvmhost_libvirt_enabled: true
kvmhost_libvirt_autostart: true

# Original storage configuration
kvm_host_libvirt_dir: "/var/lib/libvirt/images"
libvirt_images_dir: "/var/lib/libvirt/images"
libvirt_pool_name: "default"
create_libvirt_storage: true

libvirt_host_storage_pools:
  - name: default
    state: active
    autostart: true
    path: "{{ kvm_host_libvirt_dir }}"

# Original network configuration with staging modifications
kvmhost_bridge_device: "vmbr0"
qubinode_bridge_name: "stagbr0"  # Staging-specific
kvm_host_domain: "staging.example.com"

libvirt_networks:
  - name: "vmnetbr0"
    create: true
    mode: bridge
    bridge_name: "{{ kvmhost_bridge_device }}"

# Libvirt services from original spec
libvirt_services:
  - libvirtd
  - tuned

# =============================================================================
# COCKPIT CONFIGURATION (Staging)
# =============================================================================
enable_cockpit: true  # Original variable name
kvmhost_cockpit_enabled: true
kvmhost_cockpit_ssl_enabled: true  # SSL enabled in staging

# =============================================================================
# USER CONFIGURATION (Staging)
# =============================================================================
configure_shell: true  # Original variable name
kvmhost_user_config_enabled: true

# Original user management
enable_libvirt_admin_user: true
kvm_host_group: "libvirt"
admin_user: ""

shell_users:
  - "{{ admin_user }}"

# Starship configuration from original spec
starship_config: "{{ role_path }}/templates/starship.toml.j2"

# =============================================================================
# SECURITY SETTINGS (Staging - Mostly strict)
# =============================================================================
kvmhost_security_hardening_enabled: true
kvmhost_firewall_strict_mode: true
kvmhost_selinux_mode: "enforcing"

# =============================================================================
# PERFORMANCE SETTINGS (Staging)
# =============================================================================
kvmhost_performance_optimization: true
kvmhost_resource_limits_enabled: true

# Staging VM defaults (moderate resources)
kvmhost_vm_defaults:
  vcpus: 2
  memory: 4096  # 4GB default for staging VMs
  disk_size: 50  # 50GB default

# =============================================================================
# BACKUP AND RECOVERY (Staging)
# =============================================================================
kvmhost_backup_enabled: true
kvmhost_snapshot_enabled: true

# =============================================================================
# MONITORING AND ALERTING (Staging)
# =============================================================================
kvmhost_monitoring_enabled: true
kvmhost_monitoring_level: "info"
kvmhost_alerting_enabled: true  # Enable alerts in staging

# =============================================================================
# DNS CONFIGURATION (Original spec with staging domain)
# =============================================================================
primary_dns_server: "{{ dns_forwarder | default('1.1.1.1') }}"
kvm_host_dns_server: "{{ primary_dns_server | default('1.1.1.1') }}"
search_domains:
  - "{{ domain | default(kvm_host_domain) }}"

# =============================================================================
# COMPATIBILITY AND MIGRATION
# =============================================================================
# Support legacy variables in staging
support_legacy_variables: true

# =============================================================================
# STAGING-SPECIFIC OVERRIDES
# =============================================================================
# Moderate validation in staging
force_bridge_creation: false
skip_production_validations: false
allow_experimental_features: false

# Staging logging
log_level: "info"
log_to_file: true
log_file_path: "/var/log/kvmhost-staging.log"

# No shortcuts in staging (production-like)
quick_setup: false
dev_shortcuts: false

# VIM configuration from original spec
download_vim_url: "https://bafybeidtsvqcatb5wpowh7u7pskho3qi6crxgpl7dbc62hwdflhnq3ru5i.ipfs.w3s.link/vim.zip"

# Synth shell from original spec
synth_shell_dir: "/etc"
