#!/bin/bash
# Qubinode Bridge Validation Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
# Host: {{ inventory_hostname }}

set -euo pipefail

# Configuration
BRIDGE_NAME="{{ qubinode_bridge_name | default('qubibr0') }}"
BRIDGE_INTERFACE="{{ primary_interface }}"
DNS_SERVERS="{{ qubinode_dns_servers | default(['1.1.1.1', '8.8.8.8']) | join(' ') }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if running as root
check_permissions() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root"
        exit 1
    fi
}

# Check bridge exists
check_bridge_exists() {
    log "Checking if bridge ${BRIDGE_NAME} exists..."
    
    if nmcli connection show "$BRIDGE_NAME" >/dev/null 2>&1; then
        success "Bridge connection ${BRIDGE_NAME} exists"
        return 0
    else
        error "Bridge connection ${BRIDGE_NAME} does not exist"
        return 1
    fi
}

# Check bridge interface status
check_bridge_interface() {
    log "Checking bridge interface status..."
    
    if ip link show "$BRIDGE_NAME" >/dev/null 2>&1; then
        local status=$(ip link show "$BRIDGE_NAME" | grep -o "state [A-Z]*" | cut -d' ' -f2)
        if [[ "$status" == "UP" ]]; then
            success "Bridge interface ${BRIDGE_NAME} is UP"
            return 0
        else
            warning "Bridge interface ${BRIDGE_NAME} is ${status}"
            return 1
        fi
    else
        error "Bridge interface ${BRIDGE_NAME} does not exist"
        return 1
    fi
}

# Check bridge slave
check_bridge_slave() {
    log "Checking bridge slave configuration..."
    
    local slave_name="${BRIDGE_NAME}-slave-${BRIDGE_INTERFACE}"
    if nmcli connection show "$slave_name" >/dev/null 2>&1; then
        success "Bridge slave ${slave_name} exists"
        
        # Check if slave is active
        if nmcli connection show --active | grep -q "$slave_name"; then
            success "Bridge slave ${slave_name} is active"
            return 0
        else
            warning "Bridge slave ${slave_name} exists but is not active"
            return 1
        fi
    else
        error "Bridge slave ${slave_name} does not exist"
        return 1
    fi
}

# Check IP configuration
check_ip_configuration() {
    log "Checking IP configuration..."
    
    local bridge_ip=$(ip addr show "$BRIDGE_NAME" 2>/dev/null | grep "inet " | awk '{print $2}' | head -1)
    if [[ -n "$bridge_ip" ]]; then
        success "Bridge has IP address: ${bridge_ip}"
        
        # Extract IP without CIDR
        local ip_only=$(echo "$bridge_ip" | cut -d'/' -f1)
        echo "  Bridge IP: $ip_only"
        return 0
    else
        error "Bridge ${BRIDGE_NAME} has no IP address"
        return 1
    fi
}

# Check connectivity
check_connectivity() {
    log "Checking network connectivity..."
    
    # Test local connectivity (gateway)
    local gateway=$(ip route | grep "default" | grep "$BRIDGE_NAME" | awk '{print $3}' | head -1)
    if [[ -n "$gateway" ]]; then
        success "Default gateway found: ${gateway}"
        
        if ping -c 3 -W 5 "$gateway" >/dev/null 2>&1; then
            success "Gateway ${gateway} is reachable"
        else
            warning "Gateway ${gateway} is not reachable"
        fi
    else
        warning "No default gateway found for bridge"
    fi
    
    # Test DNS connectivity
    for dns in $DNS_SERVERS; do
        if ping -c 2 -W 3 "$dns" >/dev/null 2>&1; then
            success "DNS server ${dns} is reachable"
        else
            warning "DNS server ${dns} is not reachable"
        fi
    done
    
    # Test internet connectivity
    if ping -c 2 -W 5 "8.8.8.8" >/dev/null 2>&1; then
        success "Internet connectivity verified"
        return 0
    else
        warning "Internet connectivity test failed"
        return 1
    fi
}

# Check libvirt network
check_libvirt_network() {
    log "Checking libvirt bridge network..."
    
    if command -v virsh >/dev/null 2>&1; then
        if virsh net-list --all | grep -q "$BRIDGE_NAME"; then
            local state=$(virsh net-list --all | grep "$BRIDGE_NAME" | awk '{print $2}')
            if [[ "$state" == "active" ]]; then
                success "Libvirt network ${BRIDGE_NAME} is active"
                return 0
            else
                warning "Libvirt network ${BRIDGE_NAME} exists but is not active"
                return 1
            fi
        else
            warning "Libvirt network ${BRIDGE_NAME} not found"
            return 1
        fi
    else
        warning "virsh command not available - skipping libvirt checks"
        return 0
    fi
}

# Display detailed information
show_detailed_info() {
    log "Detailed bridge information:"
    
    echo ""
    echo "=== NetworkManager Connection Details ==="
    nmcli connection show "$BRIDGE_NAME" 2>/dev/null || echo "Connection details not available"
    
    echo ""
    echo "=== Bridge Interface Details ==="
    ip addr show "$BRIDGE_NAME" 2>/dev/null || echo "Interface details not available"
    
    echo ""
    echo "=== Bridge Port Information ==="
    if command -v brctl >/dev/null 2>&1; then
        brctl show "$BRIDGE_NAME" 2>/dev/null || echo "Bridge control details not available"
    else
        bridge link show | grep "$BRIDGE_NAME" 2>/dev/null || echo "Bridge link details not available"
    fi
    
    echo ""
    echo "=== Routing Information ==="
    ip route | grep "$BRIDGE_NAME" || echo "No routes found for bridge"
}

# Main validation function
run_validation() {
    local exit_code=0
    
    echo "=========================================="
    echo "Qubinode Bridge Validation Report"
    echo "=========================================="
    echo "Bridge: $BRIDGE_NAME"
    echo "Interface: $BRIDGE_INTERFACE"
    echo "Timestamp: $(date)"
    echo "=========================================="
    echo ""
    
    # Run all checks
    check_bridge_exists || exit_code=1
    check_bridge_interface || exit_code=1
    check_bridge_slave || exit_code=1
    check_ip_configuration || exit_code=1
    check_connectivity || exit_code=1
    check_libvirt_network || exit_code=1
    
    echo ""
    echo "=========================================="
    if [[ $exit_code -eq 0 ]]; then
        success "All bridge validation checks passed!"
        echo ""
        echo "Bridge ${BRIDGE_NAME} is properly configured and operational."
        echo "The bridge is ready for KVM virtualization workloads."
    else
        warning "Some bridge validation checks failed!"
        echo ""
        echo "Please review the warnings and errors above."
        echo "Run with --verbose for detailed information."
    fi
    echo "=========================================="
    
    return $exit_code
}

# Script usage
usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Validate Qubinode bridge configuration and connectivity"
    echo ""
    echo "Options:"
    echo "  -h, --help        Show this help message"
    echo "  -v, --verbose     Show detailed bridge information"
    echo "  -q, --quiet       Suppress non-error output"
    echo "  --fix             Attempt to fix common issues (requires manual confirmation)"
    echo ""
    echo "Examples:"
    echo "  $0                Run standard validation"
    echo "  $0 --verbose      Run validation with detailed output"
    echo "  $0 --quiet        Run validation with minimal output"
}

# Parse command line arguments
VERBOSE=false
QUIET=false
FIX=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -q|--quiet)
            QUIET=true
            shift
            ;;
        --fix)
            FIX=true
            shift
            ;;
        *)
            error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Main execution
main() {
    check_permissions
    
    if [[ "$QUIET" == "false" ]]; then
        run_validation
        local validation_result=$?
        
        if [[ "$VERBOSE" == "true" ]]; then
            echo ""
            show_detailed_info
        fi
        
        exit $validation_result
    else
        # Quiet mode - only show errors
        if ! run_validation >/dev/null 2>&1; then
            error "Bridge validation failed"
            exit 1
        fi
    fi
}

# Run main function
main "$@"
