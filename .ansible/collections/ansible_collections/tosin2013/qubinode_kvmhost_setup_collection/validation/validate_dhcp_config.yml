
# =============================================================================
# DHCP CONFIG VALIDATION HELPER
# =============================================================================
# Validates DHCP configuration within network items

- name: Validate DHCP start IP format
  ansible.builtin.set_fact:
    validation_errors: "{{ validation_errors + [dhcp_start_error_msg] }}"
  vars:
    dhcp_start_error_msg: "kvmhost_networking validation error: Network '{{ network_item.name }}' DHCP start IP '{{ network_item.dhcp.start }}' is not a valid IPv4 address"
  when: 
    - network_item.dhcp.start is defined
    - not (network_item.dhcp.start | ansible.utils.ipv4)

- name: Validate DHCP end IP format
  ansible.builtin.set_fact:
    validation_errors: "{{ validation_errors + [dhcp_end_error_msg] }}"
  vars:
    dhcp_end_error_msg: "kvmhost_networking validation error: Network '{{ network_item.name }}' DHCP end IP '{{ network_item.dhcp.end }}' is not a valid IPv4 address"
  when: 
    - network_item.dhcp.end is defined
    - not (network_item.dhcp.end | ansible.utils.ipv4)

- name: Validate DHCP IP range consistency
  ansible.builtin.set_fact:
    validation_errors: "{{ validation_errors + [dhcp_range_error_msg] }}"
  vars:
    dhcp_range_error_msg: "kvmhost_networking validation error: Network '{{ network_item.name }}' DHCP range: start IP must be lower than end IP"
  when: 
    - network_item.dhcp.start is defined
    - network_item.dhcp.end is defined
    - network_item.dhcp.start | ansible.utils.ipv4
    - network_item.dhcp.end | ansible.utils.ipv4
    - network_item.dhcp.start | ansible.utils.ipaddr('int') >= network_item.dhcp.end | ansible.utils.ipaddr('int')
