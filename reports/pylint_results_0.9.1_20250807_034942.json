{
  "tool_name": "pylint",
  "status": "failed",
  "execution_time": 15.784393072128296,
  "findings": [
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (110/100)",
      "message": "line-too-long: Line too long (110/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2300,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many lines in module (2903/1000)",
      "message": "too-many-lines: Too many lines in module (2903/1000)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0302",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "too-many-lines",
        "pylint_message_id": "C0302"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import errno\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import errno\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 64,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import functools\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import functools\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 65,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import os\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import os\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 66,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import re\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import re\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 67,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import shlex\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import shlex\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 68,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import socket\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import socket\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 69,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import subprocess\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import subprocess\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 70,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import time\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import time\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 71,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import traceback\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import traceback\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 72,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import logging\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import logging\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 73,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 76,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.network_lsr import ethtool\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.network_lsr import ethtool\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 77,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.network_lsr.myerror import MyError\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.network_lsr.myerror import MyError\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 78,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.network_lsr.argument_validator import ArgUtil, ArgValidator_ListConnections, ValidationError\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.network_lsr.argument_validator import ArgUtil, ArgValidator_ListConnections, ValidationError\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 80,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.network_lsr.utils import Util\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.network_lsr.utils import Util\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 86,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.network_lsr import nm_provider\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.network_lsr import nm_provider\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 87,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 101,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too few public methods (0/2)",
      "message": "too-few-public-methods: Too few public methods (0/2)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 101,
      "column_number": 0,
      "rule_id": "R0903",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-few-public-methods",
        "pylint_message_id": "R0903"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 109,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 123,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 127,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 128,
      "column_number": 15,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 146,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 153,
      "column_number": 21,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 215,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 238,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Raising too general exception: Exception",
      "message": "broad-exception-raised: Raising too general exception: Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 235,
      "column_number": 24,
      "rule_id": "W0719",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-raised",
        "pylint_message_id": "W0719"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 247,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 264,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 270,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 276,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 285,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 288,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 292,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 296,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"KeyValid\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"KeyValid\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 296,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 304,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"ValueEscape\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"ValueEscape\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 304,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider merging these comparisons with 'in' by using 'c in ('\\\\', \"'\")'. Use a set instead if elements are hashable.",
      "message": "consider-using-in: Consider merging these comparisons with 'in' by using 'c in ('\\\\', \"'\")'. Use a set instead if elements are hashable.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 320,
      "column_number": 21,
      "rule_id": "R1714",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-in",
        "pylint_message_id": "R1714"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider merging these comparisons with 'in' by using 'c in ('\"', '\\\\', '$', '`')'. Use a set instead if elements are hashable.",
      "message": "consider-using-in: Consider merging these comparisons with 'in' by using 'c in ('\"', '\\\\', '$', '`')'. Use a set instead if elements are hashable.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 331,
      "column_number": 19,
      "rule_id": "R1714",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-in",
        "pylint_message_id": "R1714"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 366,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (38/15)",
      "message": "too-many-locals: Too many local variables (38/15)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 366,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 419,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 421,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 433,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 444,
      "column_number": 38,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 460,
      "column_number": 43,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 465,
      "column_number": 31,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 477,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 483,
      "column_number": 31,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 491,
      "column_number": 39,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 496,
      "column_number": 31,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 523,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using enumerate instead of iterating with range and len",
      "message": "consider-using-enumerate: Consider using enumerate instead of iterating with range and len",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 545,
      "column_number": 12,
      "rule_id": "C0200",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-enumerate",
        "pylint_message_id": "C0200"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'idx'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'idx'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 552,
      "column_number": 16,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 598,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (74/12)",
      "message": "too-many-branches: Too many branches (74/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 366,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (178/50)",
      "message": "too-many-statements: Too many statements (178/50)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 366,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 648,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 666,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 673,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 684,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'file_type'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'file_type'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 686,
      "column_number": 12,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 696,
      "column_number": 38,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 706,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'file_type'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'file_type'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 708,
      "column_number": 12,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'file_type'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'file_type'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 718,
      "column_number": 12,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 723,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 721,
      "column_number": 21,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 729,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'file_type'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'file_type'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 730,
      "column_number": 12,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 740,
      "column_number": 21,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 744,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 764,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 762,
      "column_number": 17,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 778,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 781,
      "column_number": 16,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many return statements (7/6)",
      "message": "too-many-return-statements: Too many return statements (7/6)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 744,
      "column_number": 4,
      "rule_id": "R0911",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-return-statements",
        "pylint_message_id": "R0911"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable '_unused_'",
      "message": "unused-variable: Unused variable '_unused_'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 774,
      "column_number": 16,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable '_ignored_'",
      "message": "unused-variable: Unused variable '_ignored_'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 774,
      "column_number": 31,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 794,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 800,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 805,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 812,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 814,
      "column_number": 12,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"GObject\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"GObject\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 815,
      "column_number": 12,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 824,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 835,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (6/5)",
      "message": "too-many-arguments: Too many arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 835,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 835,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many return statements (7/6)",
      "message": "too-many-return-statements: Too many return statements (7/6)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 858,
      "column_number": 8,
      "rule_id": "R0911",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-return-statements",
        "pylint_message_id": "R0911"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 884,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (6/5)",
      "message": "too-many-arguments: Too many arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 884,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 884,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 887,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 893,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 899,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 906,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 907,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 916,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (50/15)",
      "message": "too-many-locals: Too many local variables (50/15)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 916,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 917,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except AttributeError as exc' and 'raise MyError(\"Macvlan mode '%s' is not recognized\" % mode) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except AttributeError as exc' and 'raise MyError(\"Macvlan mode '%s' is not recognized\" % mode) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1010,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1010,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1049,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise MyError('created connection failed to normalize: %s' % e) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise MyError('created connection failed to normalize: %s' % e) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1451,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1451,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (107/12)",
      "message": "too-many-branches: Too many branches (107/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 916,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (264/50)",
      "message": "too-many-statements: Too many statements (264/50)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 916,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1454,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1459,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1471,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1471,
      "column_number": 61,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1474,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1479,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1486,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1498,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1498,
      "column_number": 64,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1501,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1536,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1545,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1559,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1559,
      "column_number": 70,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1575,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1583,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1588,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1594,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Simplify chained comparison between the operands",
      "message": "chained-comparison: Simplify chained comparison between the operands",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1611,
      "column_number": 20,
      "rule_id": "R1716",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "chained-comparison",
        "pylint_message_id": "R1716"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "Possibly using variable 'dev_state' before assignment",
      "message": "possibly-used-before-assignment: Possibly using variable 'dev_state' before assignment",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1612,
      "column_number": 24,
      "rule_id": "E0606",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "possibly-used-before-assignment",
        "pylint_message_id": "E0606"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1678,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1697,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1699,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1710,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'RunEnvironment' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'RunEnvironment' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1710,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1715,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1718,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (9/5)",
      "message": "too-many-arguments: Too many arguments (9/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1718,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (9/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (9/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1718,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1731,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1737,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1751,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1758,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable 'cc'",
      "message": "unused-variable: Unused variable 'cc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1791,
      "column_number": 12,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1796,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (9/5)",
      "message": "too-many-arguments: Too many arguments (9/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1811,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (9/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (9/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1811,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1823,
      "column_number": 33,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1830,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1840,
      "column_number": 21,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1845,
      "column_number": 31,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'idx'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'idx'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1846,
      "column_number": 27,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1849,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1875,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1879,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1887,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1898,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1902,
      "column_number": 8,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1913,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'Cmd' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'Cmd' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1913,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many instance attributes (12/7)",
      "message": "too-many-instance-attributes: Too many instance attributes (12/7)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1913,
      "column_number": 0,
      "rule_id": "R0902",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-instance-attributes",
        "pylint_message_id": "R0902"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (8/5)",
      "message": "too-many-arguments: Too many arguments (8/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1914,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (8/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (8/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1914,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1938,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1942,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1946,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise MyError('configuration error: %s' % e) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise MyError('configuration error: %s' % e) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1952,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1952,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1957,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1966,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1972,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1976,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1983,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1994,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1997,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2000,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2003,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2012,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2017,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (6/5)",
      "message": "too-many-arguments: Too many arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2017,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2017,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2030,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-return: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2031,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2035,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2037,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2043,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2049,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2056,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2090,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2093,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2106,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2112,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2122,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (14/12)",
      "message": "too-many-branches: Too many branches (14/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2112,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2151,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2169,
      "column_number": 32,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2176,
      "column_number": 36,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2152,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2193,
      "column_number": 32,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2217,
      "column_number": 17,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unnecessary pass statement",
      "message": "unnecessary-pass: Unnecessary pass statement",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2222,
      "column_number": 8,
      "rule_id": "W0107",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unnecessary-pass",
        "pylint_message_id": "W0107"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2224,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2227,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2230,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2233,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many public methods (28/20)",
      "message": "too-many-public-methods: Too many public methods (28/20)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1913,
      "column_number": 0,
      "rule_id": "R0904",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-public-methods",
        "pylint_message_id": "R0904"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2252,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"Cmd_nm\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"Cmd_nm\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2252,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import outside toplevel (ansible.module_utils.network_lsr.nm.provider)",
      "message": "import-outside-toplevel: Import outside toplevel (ansible.module_utils.network_lsr.nm.provider)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2259,
      "column_number": 8,
      "rule_id": "C0415",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "import-outside-toplevel",
        "pylint_message_id": "C0415"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2266,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise MyError('failure loading libnm library: %s' % e) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise MyError('failure loading libnm library: %s' % e) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2271,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2271,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2290,
      "column_number": 32,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2300,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2366,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using a dictionary comprehension",
      "message": "consider-using-dict-comprehension: Consider using a dictionary comprehension",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2382,
      "column_number": 24,
      "rule_id": "R1717",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-dict-comprehension",
        "pylint_message_id": "R1717"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2396,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2417,
      "column_number": 31,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2456,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2463,
      "column_number": 40,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2466,
      "column_number": 21,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2473,
      "column_number": 40,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2477,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2538,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2544,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2556,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2563,
      "column_number": 12,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2582,
      "column_number": 36,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2591,
      "column_number": 36,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2602,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2617,
      "column_number": 39,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2638,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"Cmd_initscripts\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"Cmd_initscripts\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2638,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2651,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2655,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2661,
      "column_number": 32,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2692,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2721,
      "column_number": 35,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2727,
      "column_number": 27,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2729,
      "column_number": 33,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2735,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (13/12)",
      "message": "too-many-branches: Too many branches (13/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2695,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2766,
      "column_number": 31,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2771,
      "column_number": 27,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2779,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2800,
      "column_number": 36,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2807,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2818,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2824,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2838,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2844,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2854,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2858,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (13/12)",
      "message": "too-many-branches: Too many branches (13/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2782,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2871,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2890,
      "column_number": 11,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2893,
      "column_number": 12,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import traceback\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import traceback\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 45,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule, missing_required_lib\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule, missing_required_lib\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 47,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 59,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"changed\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"changed\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 63,
      "column_number": 22,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 67,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 78,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 88,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"desired_state\": dict(type='dict', required=True)}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"desired_state\": dict(type='dict', required=True)}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 89,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'dict', \"required\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'dict', \"required\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 90,
      "column_number": 22,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 107,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
      "message": "useless-option-value: Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 149,
      "column_number": 0,
      "rule_id": "R0022",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-option-value",
        "pylint_message_id": "R0022"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (129/100)",
      "message": "line-too-long: Line too long (129/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1534,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1555,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (104/100)",
      "message": "line-too-long: Line too long (104/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1569,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many lines in module (2791/1000)",
      "message": "too-many-lines: Too many lines in module (2791/1000)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0302",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "too-many-lines",
        "pylint_message_id": "C0302"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "FIXME: Maybe this restriction can be removed. Need to make sure that",
      "message": "fixme: FIXME: Maybe this restriction can be removed. Need to make sure that",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2014,
      "column_number": 9,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "FIXME: Maybe just accept all values, even if they are not",
      "message": "fixme: FIXME: Maybe just accept all values, even if they are not",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2024,
      "column_number": 9,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "FIXME: Seems to be a duplicate check since \"wait\" will be removed from",
      "message": "fixme: FIXME: Seems to be a duplicate check since \"wait\" will be removed from",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2041,
      "column_number": 9,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 6,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 20,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 22,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 39,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 42,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 45,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 50,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 56,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 59,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 63,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 77,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 80,
      "column_number": 8,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 85,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too few public methods (1/2)",
      "message": "too-few-public-methods: Too few public methods (1/2)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 77,
      "column_number": 0,
      "rule_id": "R0903",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-few-public-methods",
        "pylint_message_id": "R0903"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 89,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 98,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 170,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (9/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (9/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 171,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-raise: Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 188,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-raise: Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 195,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 203,
      "column_number": 40,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 208,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 214,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 221,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 225,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 234,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 244,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 250,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 273,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 271,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 278,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-raise: Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 283,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 286,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 291,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 306,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (7/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (7/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 307,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 338,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 342,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 346,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 351,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 356,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 357,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Redefining built-in 'range'",
      "message": "redefined-builtin: Redefining built-in 'range'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 370,
      "column_number": 8,
      "rule_id": "W0622",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "redefined-builtin",
        "pylint_message_id": "W0622"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 376,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 381,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 391,
      "column_number": 40,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 401,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 409,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (13/12)",
      "message": "too-many-branches: Too many branches (13/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 369,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 417,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 427,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider merging these isinstance calls to isinstance(value, (Util.STRING_TYPE, int))",
      "message": "consider-merging-isinstance: Consider merging these isinstance calls to isinstance(value, (Util.STRING_TYPE, int))",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 425,
      "column_number": 15,
      "rule_id": "R1701",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-merging-isinstance",
        "pylint_message_id": "R1701"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 429,
      "column_number": 36,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 449,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (6/5)",
      "message": "too-many-arguments: Too many arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 450,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 450,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using a dictionary comprehension",
      "message": "consider-using-dict-comprehension: Consider using a dictionary comprehension",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 459,
      "column_number": 21,
      "rule_id": "R1717",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-dict-comprehension",
        "pylint_message_id": "R1717"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except AttributeError as exc' and 'raise ValidationError(name, 'invalid content is not a dictionary') from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except AttributeError as exc' and 'raise ValidationError(name, 'invalid content is not a dictionary') from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 479,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'value'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'value'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 480,
      "column_number": 21,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except KeyError as exc' and 'raise ValidationError(name, \"invalid key '%s'\" % setting) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except KeyError as exc' and 'raise ValidationError(name, \"invalid key '%s'\" % setting) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 484,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 484,
      "column_number": 44,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 489,
      "column_number": 44,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate of a client class",
      "message": "protected-access: Access to a protected member _validate of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 492,
      "column_number": 34,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise ValidationError(e.name, e.error_message) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise ValidationError(e.name, e.error_message) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 494,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 500,
      "column_number": 44,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 508,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 516,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 520,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate of a client class",
      "message": "protected-access: Access to a protected member _validate of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 550,
      "column_number": 21,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise ValidationError(e.name, e.error_message) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise ValidationError(e.name, e.error_message) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 552,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 557,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (6/5)",
      "message": "too-many-arguments: Too many arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 558,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 558,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValidationError(name, \"value '%s' is not a valid IP%s address\" % (value, Util.addr_family_to_v(self.family))) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise ValidationError(name, \"value '%s' is not a valid IP%s address\" % (value, Util.addr_family_to_v(self.family))) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 570,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 572,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 580,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (6/5)",
      "message": "too-many-arguments: Too many arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 581,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 581,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 599,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except MyError as exc' and 'raise ValidationError(name, \"value '%s' is not a valid MAC address%s\" % (value, enum_ex)) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except MyError as exc' and 'raise ValidationError(name, \"value '%s' is not a valid MAC address%s\" % (value, enum_ex)) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 600,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 601,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 606,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 608,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 613,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValidationError(name, \"value '%s' is not a valid IP%s address with prefix length\" % (value, Util.addr_family_to_v(self.family))) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise ValidationError(name, \"value '%s' is not a valid IP%s address with prefix length\" % (value, Util.addr_family_to_v(self.family))) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 637,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 639,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 656,
      "column_number": 40,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 660,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 704,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 710,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 720,
      "column_number": 40,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 727,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 735,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 844,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 852,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 862,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (22/12)",
      "message": "too-many-branches: Too many branches (22/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 781,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 874,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictIP\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictIP\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 874,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1047,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictEthernet\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictEthernet\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1047,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1064,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using a dictionary comprehension",
      "message": "consider-using-dict-comprehension: Consider using a dictionary comprehension",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1065,
      "column_number": 15,
      "rule_id": "R1717",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-dict-comprehension",
        "pylint_message_id": "R1717"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1076,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1092,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictEthtool\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictEthtool\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1092,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1105,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictEthtoolFeatures\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictEthtoolFeatures\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1105,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1305,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictEthtoolCoalesce\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictEthtoolCoalesce\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1305,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1383,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictEthtoolRing\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictEthtoolRing\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1383,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1405,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictBond\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictBond\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1405,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"AD_OPTIONS\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"AD_OPTIONS\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1504,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"ARP_OPTIONS\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"ARP_OPTIONS\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1510,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"ARP_ONLY_MODE\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"ARP_ONLY_MODE\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1511,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1518,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1534,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (17/12)",
      "message": "too-many-branches: Too many branches (17/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1503,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1592,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1623,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictInfiniband\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictInfiniband\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1623,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1639,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1643,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictVlan\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictVlan\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1643,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1652,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1656,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictMacvlan\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictMacvlan\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1656,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1676,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1701,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1706,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_Dict802_1X\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_Dict802_1X\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1706,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1751,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictWireless\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictWireless\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1751,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1779,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1793,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider merging these comparisons with 'in' by using 'result in (['|'], ['&'])'. Use a set instead if elements are hashable.",
      "message": "consider-using-in: Consider merging these comparisons with 'in' by using 'result in (['|'], ['&'])'. Use a set instead if elements are hashable.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1805,
      "column_number": 11,
      "rule_id": "R1714",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-in",
        "pylint_message_id": "R1714"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1808,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1815,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictMatch\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictMatch\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1815,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1832,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictConnection\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictConnection\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1832,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Attribute name \"VALID_FIELDS\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Attribute name \"VALID_FIELDS\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1948,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1962,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused argument 'value'",
      "message": "unused-argument: Unused argument 'value'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1950,
      "column_number": 35,
      "rule_id": "W0613",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-argument",
        "pylint_message_id": "W0613"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2031,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2046,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused argument 'value'",
      "message": "unused-argument: Unused argument 'value'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1994,
      "column_number": 36,
      "rule_id": "W0613",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-argument",
        "pylint_message_id": "W0613"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2081,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused argument 'value'",
      "message": "unused-argument: Unused argument 'value'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2055,
      "column_number": 38,
      "rule_id": "W0613",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-argument",
        "pylint_message_id": "W0613"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2136,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2142,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2196,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2208,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2239,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2253,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2267,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2319,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2330,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2341,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'name'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'name'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2354,
      "column_number": 12,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (65/12)",
      "message": "too-many-branches: Too many branches (65/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2087,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (120/50)",
      "message": "too-many-statements: Too many statements (120/50)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2087,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2364,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_ListConnections\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_ListConnections\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2364,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2383,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2389,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2404,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2418,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2426,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2438,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2442,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except MyError as exc' and 'raise ValidationError.from_connection(idx, \"profile references a parent '%s' which has 'interface_name' missing\" % connection['parent']) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except MyError as exc' and 'raise ValidationError.from_connection(idx, \"profile references a parent '%s' which has 'interface_name' missing\" % connection['parent']) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2480,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2482,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except MyError as exc' and 'raise ValidationError.from_connection(idx, \"profile references a controller '%s' which has 'interface_name' missing\" % connection['controller']) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except MyError as exc' and 'raise ValidationError.from_connection(idx, \"profile references a controller '%s' which has 'interface_name' missing\" % connection['controller']) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2492,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2494,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-raise: Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2588,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2620,
      "column_number": 16,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (50/12)",
      "message": "too-many-branches: Too many branches (50/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2442,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (78/50)",
      "message": "too-many-statements: Too many statements (78/50)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2442,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2708,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'IPRouteUtils' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'IPRouteUtils' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2708,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2766,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2771,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2783,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too few public methods (1/2)",
      "message": "too-few-public-methods: Too few public methods (1/2)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2708,
      "column_number": 0,
      "rule_id": "R0903",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-few-public-methods",
        "pylint_message_id": "R0903"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py",
      "line_number": 42,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py",
      "line_number": 48,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py",
      "line_number": 57,
      "column_number": 48,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable 'unused'",
      "message": "unused-variable: Unused variable 'unused'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py",
      "line_number": 57,
      "column_number": 8,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/myerror.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/myerror.py",
      "line_number": 6,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/myerror.py",
      "line_number": 9,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 22,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 98,
      "column_number": 11,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 78,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 93,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 103,
      "column_number": 12,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 114,
      "column_number": 12,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Statement seems to have no effect",
      "message": "pointless-statement: Statement seems to have no effect",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 33,
      "column_number": 8,
      "rule_id": "W0104",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "pointless-statement",
        "pylint_message_id": "W0104"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Statement seems to have no effect",
      "message": "pointless-statement: Statement seems to have no effect",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 34,
      "column_number": 8,
      "rule_id": "W0104",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "pointless-statement",
        "pylint_message_id": "W0104"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Statement seems to have no effect",
      "message": "pointless-statement: Statement seems to have no effect",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 35,
      "column_number": 8,
      "rule_id": "W0104",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "pointless-statement",
        "pylint_message_id": "W0104"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 47,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class '_NmMainLoop' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class '_NmMainLoop' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 51,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 58,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 74,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 78,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 95,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 100,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 105,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 19,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 49,
      "column_number": 11,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 52,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 62,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 69,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 102,
      "column_number": 11,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 105,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 115,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/error.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/error.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/error.py",
      "line_number": 8,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 18,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 60,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 64,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 68,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using deprecated method warn()",
      "message": "deprecated-method: Using deprecated method warn()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 83,
      "column_number": 8,
      "rule_id": "W4902",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "deprecated-method",
        "pylint_message_id": "W4902"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using deprecated method warn()",
      "message": "deprecated-method: Using deprecated method warn()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 89,
      "column_number": 8,
      "rule_id": "W4902",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "deprecated-method",
        "pylint_message_id": "W4902"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm_provider.py",
      "line_number": 6,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "FIXME: encoding issues regarding python unicode string",
      "message": "fixme: FIXME: encoding issues regarding python unicode string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 225,
      "column_number": 9,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 6,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 16,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 24,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 35,
      "column_number": 38,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 58,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 62,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 62,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import outside toplevel (gi)",
      "message": "import-outside-toplevel: Import outside toplevel (gi)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 68,
      "column_number": 12,
      "rule_id": "C0415",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "import-outside-toplevel",
        "pylint_message_id": "C0415"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import outside toplevel (gi.repository.NM, gi.repository.GLib, gi.repository.Gio, gi.repository.GObject)",
      "message": "import-outside-toplevel: Import outside toplevel (gi.repository.NM, gi.repository.GLib, gi.repository.Gio, gi.repository.GObject)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 71,
      "column_number": 12,
      "rule_id": "C0415",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "import-outside-toplevel",
        "pylint_message_id": "C0415"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 81,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"GLib\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"GLib\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 81,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 86,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"Gio\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"Gio\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 86,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 91,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"GObject\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"GObject\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 91,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 96,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"Timestamp\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"Timestamp\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 96,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 100,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"GMainLoop\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"GMainLoop\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 100,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 108,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"GMainLoop_run\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"GMainLoop_run\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 108,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"GLib\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"GLib\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 113,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 129,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"GMainLoop_iterate\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"GMainLoop_iterate\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 129,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 133,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"GMainLoop_iterate_all\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"GMainLoop_iterate_all\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 133,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 165,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 172,
      "column_number": 12,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 177,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 194,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 204,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"GLib\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"GLib\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 205,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 215,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 229,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 240,
      "column_number": 34,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 249,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise MyError(\"not a valid MAC address: '%s'\" % mac_str) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise MyError(\"not a valid MAC address: '%s'\" % mac_str) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 254,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 254,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 256,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 260,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 265,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 269,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 272,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 276,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 288,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 291,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 303,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 309,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider merging these comparisons with 'in' by using 'family not in (socket.AF_INET, socket.AF_INET6)'. Use a set instead if elements are hashable.",
      "message": "consider-using-in: Consider merging these comparisons with 'in' by using 'family not in (socket.AF_INET, socket.AF_INET6)'. Use a set instead if elements are hashable.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 310,
      "column_number": 11,
      "rule_id": "R1714",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-in",
        "pylint_message_id": "R1714"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 311,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 314,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 321,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 324,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 326,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 332,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Either all return statements in a function should return an expression, or none of them should.",
      "message": "inconsistent-return-statements: Either all return statements in a function should return an expression, or none of them should.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 332,
      "column_number": 4,
      "rule_id": "R1710",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "inconsistent-return-statements",
        "pylint_message_id": "R1710"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 344,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Either all return statements in a function should return an expression, or none of them should.",
      "message": "inconsistent-return-statements: Either all return statements in a function should return an expression, or none of them should.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 344,
      "column_number": 4,
      "rule_id": "R1710",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "inconsistent-return-statements",
        "pylint_message_id": "R1710"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 353,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Simplify chained comparison between the operands",
      "message": "chained-comparison: Simplify chained comparison between the operands",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 355,
      "column_number": 15,
      "rule_id": "R1716",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "chained-comparison",
        "pylint_message_id": "R1716"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 358,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 367,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise MyError(\"invalid address '%s'\" % address) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise MyError(\"invalid address '%s'\" % address) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 372,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 372,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many public methods (30/20)",
      "message": "too-many-public-methods: Too many public methods (30/20)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 16,
      "column_number": 0,
      "rule_id": "R0904",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-public-methods",
        "pylint_message_id": "R0904"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import yaml\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import yaml\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 43,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "Unable to import 'argument_validator'",
      "message": "import-error: Unable to import 'argument_validator'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 56,
      "column_number": 8,
      "rule_id": "E0401",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "import-error",
        "pylint_message_id": "E0401"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 62,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (25/12)",
      "message": "too-many-branches: Too many branches (25/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 62,
      "column_number": 0,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (52/50)",
      "message": "too-many-statements: Too many statements (52/50)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 62,
      "column_number": 0,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 144,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Redefining name 'sorted_data' from outer scope (line 166)",
      "message": "redefined-outer-name: Redefining name 'sorted_data' from outer scope (line 166)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 149,
      "column_number": 8,
      "rule_id": "W0621",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "redefined-outer-name",
        "pylint_message_id": "W0621"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 157,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
      "message": "useless-option-value: Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 635,
      "column_number": 0,
      "rule_id": "R0022",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-option-value",
        "pylint_message_id": "R0022"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
      "message": "useless-option-value: Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1514,
      "column_number": 0,
      "rule_id": "R0022",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-option-value",
        "pylint_message_id": "R0022"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (115/100)",
      "message": "line-too-long: Line too long (115/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 390,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (118/100)",
      "message": "line-too-long: Line too long (118/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 407,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (131/100)",
      "message": "line-too-long: Line too long (131/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 493,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 504,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (110/100)",
      "message": "line-too-long: Line too long (110/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 505,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 506,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 507,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (122/100)",
      "message": "line-too-long: Line too long (122/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 510,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (132/100)",
      "message": "line-too-long: Line too long (132/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 521,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 550,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 591,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (121/100)",
      "message": "line-too-long: Line too long (121/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 691,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 741,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (145/100)",
      "message": "line-too-long: Line too long (145/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 751,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (139/100)",
      "message": "line-too-long: Line too long (139/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 759,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 824,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 828,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (128/100)",
      "message": "line-too-long: Line too long (128/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 836,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (120/100)",
      "message": "line-too-long: Line too long (120/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 843,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (122/100)",
      "message": "line-too-long: Line too long (122/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 851,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 863,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 864,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (108/100)",
      "message": "line-too-long: Line too long (108/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 865,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 866,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (130/100)",
      "message": "line-too-long: Line too long (130/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 867,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (117/100)",
      "message": "line-too-long: Line too long (117/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 886,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (124/100)",
      "message": "line-too-long: Line too long (124/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 887,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 889,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 913,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 922,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (121/100)",
      "message": "line-too-long: Line too long (121/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 923,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (141/100)",
      "message": "line-too-long: Line too long (141/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 968,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 979,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (132/100)",
      "message": "line-too-long: Line too long (132/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1001,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (128/100)",
      "message": "line-too-long: Line too long (128/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1009,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1017,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (150/100)",
      "message": "line-too-long: Line too long (150/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1037,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (145/100)",
      "message": "line-too-long: Line too long (145/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1055,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (129/100)",
      "message": "line-too-long: Line too long (129/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1056,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (143/100)",
      "message": "line-too-long: Line too long (143/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1057,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (150/100)",
      "message": "line-too-long: Line too long (150/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1058,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (107/100)",
      "message": "line-too-long: Line too long (107/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1082,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (114/100)",
      "message": "line-too-long: Line too long (114/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1083,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (107/100)",
      "message": "line-too-long: Line too long (107/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1087,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (107/100)",
      "message": "line-too-long: Line too long (107/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1091,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1133,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (107/100)",
      "message": "line-too-long: Line too long (107/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1139,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1151,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (126/100)",
      "message": "line-too-long: Line too long (126/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1154,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1163,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (123/100)",
      "message": "line-too-long: Line too long (123/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1196,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (150/100)",
      "message": "line-too-long: Line too long (150/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1219,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (141/100)",
      "message": "line-too-long: Line too long (141/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1223,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1256,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (109/100)",
      "message": "line-too-long: Line too long (109/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1310,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (134/100)",
      "message": "line-too-long: Line too long (134/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1311,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (126/100)",
      "message": "line-too-long: Line too long (126/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1322,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (114/100)",
      "message": "line-too-long: Line too long (114/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1355,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (145/100)",
      "message": "line-too-long: Line too long (145/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1384,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (129/100)",
      "message": "line-too-long: Line too long (129/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1385,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (143/100)",
      "message": "line-too-long: Line too long (143/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1386,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (150/100)",
      "message": "line-too-long: Line too long (150/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1387,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (114/100)",
      "message": "line-too-long: Line too long (114/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1415,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1416,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1425,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1446,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (140/100)",
      "message": "line-too-long: Line too long (140/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1534,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1568,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1569,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1583,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1593,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (115/100)",
      "message": "line-too-long: Line too long (115/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1617,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (108/100)",
      "message": "line-too-long: Line too long (108/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1640,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (123/100)",
      "message": "line-too-long: Line too long (123/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1693,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1718,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (110/100)",
      "message": "line-too-long: Line too long (110/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1719,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (126/100)",
      "message": "line-too-long: Line too long (126/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1767,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (119/100)",
      "message": "line-too-long: Line too long (119/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1774,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1791,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1792,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (115/100)",
      "message": "line-too-long: Line too long (115/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1815,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (110/100)",
      "message": "line-too-long: Line too long (110/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1850,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1862,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1865,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1899,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (111/100)",
      "message": "line-too-long: Line too long (111/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1905,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1915,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1916,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1917,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1939,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1943,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1958,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (111/100)",
      "message": "line-too-long: Line too long (111/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1999,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2017,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (117/100)",
      "message": "line-too-long: Line too long (117/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2032,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (120/100)",
      "message": "line-too-long: Line too long (120/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2033,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (134/100)",
      "message": "line-too-long: Line too long (134/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2034,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (104/100)",
      "message": "line-too-long: Line too long (104/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2037,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (126/100)",
      "message": "line-too-long: Line too long (126/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2038,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (119/100)",
      "message": "line-too-long: Line too long (119/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2039,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (104/100)",
      "message": "line-too-long: Line too long (104/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2044,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (126/100)",
      "message": "line-too-long: Line too long (126/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2045,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (119/100)",
      "message": "line-too-long: Line too long (119/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2046,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2049,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (149/100)",
      "message": "line-too-long: Line too long (149/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2249,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2347,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2391,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (107/100)",
      "message": "line-too-long: Line too long (107/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2473,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2513,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2545,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many lines in module (2560/1000)",
      "message": "too-many-lines: Too many lines in module (2560/1000)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0302",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "too-many-lines",
        "pylint_message_id": "C0302"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "XXX add support for LVM RAID raid0 level",
      "message": "fixme: XXX add support for LVM RAID raid0 level",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 437,
      "column_number": 5,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "XXX: blivet has to store cipher, key_size, luks_version for existing before we",
      "message": "fixme: XXX: blivet has to store cipher, key_size, luks_version for existing before we",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 533,
      "column_number": 9,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "XXX If we have no key we will always re-encrypt.",
      "message": "fixme: XXX If we have no key we will always re-encrypt.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 657,
      "column_number": 13,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "TODO: see if we can create this device w/ the specified name",
      "message": "fixme: TODO: see if we can create this device w/ the specified name",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 675,
      "column_number": 21,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "XXX fail if any disk isn't resolved?",
      "message": "fixme: XXX fail if any disk isn't resolved?",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1530,
      "column_number": 37,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "TODO: see if we can create this device w/ the specified name",
      "message": "fixme: TODO: see if we can create this device w/ the specified name",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1549,
      "column_number": 21,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "XXX: scheduling ActionRemoveMember is currently broken, we need to execute",
      "message": "fixme: XXX: scheduling ActionRemoveMember is currently broken, we need to execute",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1909,
      "column_number": 17,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "XXX workaround for https://github.com/storaged-project/blivet/pull/1040",
      "message": "fixme: XXX workaround for https://github.com/storaged-project/blivet/pull/1040",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1918,
      "column_number": 13,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 4,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import copy\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import copy\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 375,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import logging\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import logging\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 376,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import os\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import os\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 377,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import traceback\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import traceback\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 378,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import inspect\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import inspect\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 379,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Module import itself",
      "message": "import-self: Module import itself",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 403,
      "column_number": 8,
      "rule_id": "W0406",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "import-self",
        "pylint_message_id": "W0406"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Module import itself",
      "message": "import-self: Module import itself",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 405,
      "column_number": 8,
      "rule_id": "W0406",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "import-self",
        "pylint_message_id": "W0406"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Module import itself",
      "message": "import-self: Module import itself",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 406,
      "column_number": 8,
      "rule_id": "W0406",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "import-self",
        "pylint_message_id": "W0406"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 421,
      "column_number": 8,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'FakeDevices' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'FakeDevices' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 421,
      "column_number": 8,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too few public methods (1/2)",
      "message": "too-few-public-methods: Too few public methods (1/2)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 421,
      "column_number": 8,
      "rule_id": "R0903",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-few-public-methods",
        "pylint_message_id": "R0903"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 426,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "Unable to import 'ansible.module_utils.storage_lsr.argument_validator'",
      "message": "import-error: Unable to import 'ansible.module_utils.storage_lsr.argument_validator'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 427,
      "column_number": 0,
      "rule_id": "E0401",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "import-error",
        "pylint_message_id": "E0401"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.storage_lsr.argument_validator import validate_parameters\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.storage_lsr.argument_validator import validate_parameters\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 427,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "No name 'storage_lsr' in module 'ansible.module_utils'",
      "message": "no-name-in-module: No name 'storage_lsr' in module 'ansible.module_utils'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 427,
      "column_number": 0,
      "rule_id": "E0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "no-name-in-module",
        "pylint_message_id": "E0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Constant name \"use_partitions\" doesn't conform to UPPER_CASE naming style",
      "message": "invalid-name: Constant name \"use_partitions\" doesn't conform to UPPER_CASE naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 445,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Constant name \"disklabel_type\" doesn't conform to UPPER_CASE naming style",
      "message": "invalid-name: Constant name \"disklabel_type\" doesn't conform to UPPER_CASE naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 446,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Constant name \"safe_mode\" doesn't conform to UPPER_CASE naming style",
      "message": "invalid-name: Constant name \"safe_mode\" doesn't conform to UPPER_CASE naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 447,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 448,
      "column_number": 16,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 449,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 457,
      "column_number": 12,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 458,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 468,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 472,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'BlivetBase' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'BlivetBase' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 472,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 490,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _name of a client class",
      "message": "protected-access: Access to a protected member _name of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 490,
      "column_number": 36,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 493,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _name of a client class",
      "message": "protected-access: Access to a protected member _name of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 494,
      "column_number": 41,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 510,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 521,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _name of a client class",
      "message": "protected-access: Access to a protected member _name of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 522,
      "column_number": 41,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 544,
      "column_number": 8,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except RaidError as exc' and 'raise BlivetAnsibleError('%s is not a valid RAID level' % raid_level) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except RaidError as exc' and 'raise BlivetAnsibleError('%s is not a valid RAID level' % raid_level) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 547,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 547,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 550,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 563,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"cannot create RAID '%s': %s\" % (raid_name, str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"cannot create RAID '%s': %s\" % (raid_name, str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 594,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 594,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too few public methods (0/2)",
      "message": "too-few-public-methods: Too few public methods (0/2)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 472,
      "column_number": 0,
      "rule_id": "R0903",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-few-public-methods",
        "pylint_message_id": "R0903"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 599,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 603,
      "column_number": 8,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 611,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 612,
      "column_number": 19,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _packages of a client class",
      "message": "protected-access: Access to a protected member _packages of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 617,
      "column_number": 28,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _key_file of a client class",
      "message": "protected-access: Access to a protected member _key_file of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 658,
      "column_number": 12,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _key_file of a client class",
      "message": "protected-access: Access to a protected member _key_file of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 662,
      "column_number": 12,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (13/12)",
      "message": "too-many-branches: Too many branches (13/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 680,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 716,
      "column_number": 73,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 716,
      "column_number": 81,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 741,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise BlivetAnsibleError(\"invalid percentage '%s' size specified for volume '%s'\" % (self._volume['size'], self._volume['name'])) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except ValueError as exc' and 'raise BlivetAnsibleError(\"invalid percentage '%s' size specified for volume '%s'\" % (self._volume['size'], self._volume['name'])) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 751,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 751,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 753,
      "column_number": 21,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"invalid size specification for volume '%s': '%s'\" % (self._volume['name'], self._volume['size'])) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"invalid size specification for volume '%s': '%s'\" % (self._volume['name'], self._volume['size'])) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 759,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 759,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unnecessary pass statement",
      "message": "unnecessary-pass: Unnecessary pass statement",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 765,
      "column_number": 8,
      "rule_id": "W0107",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unnecessary-pass",
        "pylint_message_id": "W0107"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 824,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 828,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to unmount '%s' to allow offline resize: %s\" % (self._device.name, str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to unmount '%s' to allow offline resize: %s\" % (self._device.name, str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 836,
      "column_number": 20,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 836,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _resize_support of a client class",
      "message": "protected-access: Access to a protected member _resize_support of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 842,
      "column_number": 27,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _resize_support of a client class",
      "message": "protected-access: Access to a protected member _resize_support of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 850,
      "column_number": 27,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"volume '%s' cannot be resized from %s to %s: %s\" % (self._device.name, self._device.size, size, str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"volume '%s' cannot be resized from %s to %s: %s\" % (self._device.name, self._device.size, size, str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 863,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 863,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 867,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (21/12)",
      "message": "too-many-branches: Too many branches (21/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 786,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (51/50)",
      "message": "too-many-statements: Too many statements (51/50)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 786,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 887,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 913,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 923,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 935,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 945,
      "column_number": 14,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 961,
      "column_number": 8,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-raise: Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 962,
      "column_number": 8,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 963,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 968,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 971,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _disks of a client class",
      "message": "protected-access: Access to a protected member _disks of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 979,
      "column_number": 11,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _disks of a client class",
      "message": "protected-access: Access to a protected member _disks of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 979,
      "column_number": 59,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _disks of a client class",
      "message": "protected-access: Access to a protected member _disks of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 980,
      "column_number": 24,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 996,
      "column_number": 21,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1001,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"failed set up volume '%s'\" % self._volume['name']) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"failed set up volume '%s'\" % self._volume['name']) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1011,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1011,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"partition allocation failed for volume '%s'\" % self._volume['name']) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"partition allocation failed for volume '%s'\" % self._volume['name']) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1017,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1017,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1022,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1026,
      "column_number": 15,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1028,
      "column_number": 15,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1028,
      "column_number": 26,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise BlivetAnsibleError(\"invalid percentage '%s' size specified for thin volume '%s'\" % (self._volume['size'], self._volume['name'])) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except ValueError as exc' and 'raise BlivetAnsibleError(\"invalid percentage '%s' size specified for thin volume '%s'\" % (self._volume['size'], self._volume['name'])) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1037,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1037,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1042,
      "column_number": 19,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1045,
      "column_number": 19,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1054,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1055,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1070,
      "column_number": 24,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except BlivetAnsibleError as exc' and 'raise BlivetAnsibleError(\"specified 'vdo_pool_size' for volume '%s' exceeds available space in pool '%s' (%s)\" % (pool_size, parent_device.name, parent_device.free_space)) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except BlivetAnsibleError as exc' and 'raise BlivetAnsibleError(\"specified 'vdo_pool_size' for volume '%s' exceeds available space in pool '%s' (%s)\" % (pool_size, parent_device.name, parent_device.free_space)) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1080,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1080,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up VDO pool '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up VDO pool '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1091,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1091,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"vdo_lv\": True, \"parents\": [vdopool]}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"vdo_lv\": True, \"parents\": [vdopool]}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1095,
      "column_number": 15,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1099,
      "column_number": 24,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1102,
      "column_number": 18,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1112,
      "column_number": 49,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1115,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"seg_type\": self._volume['raid_level'], \"pvs\": pvs, \"stripe_size\": stripe_size, ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"seg_type\": self._volume['raid_level'], \"pvs\": pvs, \"stripe_size\": stripe_size, ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1124,
      "column_number": 19,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"seg_type\": self._volume['raid_level'], \"pvs\": pvs}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"seg_type\": self._volume['raid_level'], \"pvs\": pvs}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1126,
      "column_number": 15,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to detach cache from volume '%s': %s\" % (self._device.name, str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to detach cache from volume '%s': %s\" % (self._device.name, str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1133,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1133,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1139,
      "column_number": 62,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1144,
      "column_number": 17,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1149,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1154,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1167,
      "column_number": 45,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"cache_request\": cache_request}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"cache_request\": cache_request}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1190,
      "column_number": 15,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1195,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _thinpools of a client class",
      "message": "protected-access: Access to a protected member _thinpools of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1195,
      "column_number": 19,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1196,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _thinpools of a client class",
      "message": "protected-access: Access to a protected member _thinpools of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1198,
      "column_number": 23,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _thinpools of a client class",
      "message": "protected-access: Access to a protected member _thinpools of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1200,
      "column_number": 21,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1209,
      "column_number": 11,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1209,
      "column_number": 41,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1219,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1221,
      "column_number": 28,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1223,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1223,
      "column_number": 87,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"fmt\": self._get_format(), \"name\": self._volume['name'], \"parents\": [parent_device], ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"fmt\": self._get_format(), \"name\": self._volume['name'], \"parents\": [parent_device], ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1232,
      "column_number": 26,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"thin_volume\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"thin_volume\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1238,
      "column_number": 29,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up volume '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up volume '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1256,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1256,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (13/12)",
      "message": "too-many-branches: Too many branches (13/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1205,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1262,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1265,
      "column_number": 18,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1299,
      "column_number": 19,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1310,
      "column_number": 16,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1311,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to allocate partitions for mdraid '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to allocate partitions for mdraid '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1322,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1322,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1354,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1358,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1368,
      "column_number": 15,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1370,
      "column_number": 15,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1370,
      "column_number": 26,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1373,
      "column_number": 15,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1375,
      "column_number": 19,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1383,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1384,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1413,
      "column_number": 24,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1415,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1415,
      "column_number": 83,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up volume '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up volume '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1425,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1425,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _pool of a client class",
      "message": "protected-access: Access to a protected member _pool of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1444,
      "column_number": 22,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1446,
      "column_number": 33,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1452,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Method '_get_format' is abstract in class 'BlivetBase' but is not overridden in child class 'BlivetPool'",
      "message": "abstract-method: Method '_get_format' is abstract in class 'BlivetBase' but is not overridden in child class 'BlivetPool'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1452,
      "column_number": 0,
      "rule_id": "W0223",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "abstract-method",
        "pylint_message_id": "W0223"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1456,
      "column_number": 8,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1457,
      "column_number": 22,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1458,
      "column_number": 31,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1465,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1466,
      "column_number": 19,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _packages of a client class",
      "message": "protected-access: Access to a protected member _packages of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1468,
      "column_number": 28,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unnecessary pass statement",
      "message": "unnecessary-pass: Unnecessary pass statement",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1488,
      "column_number": 8,
      "rule_id": "W0107",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unnecessary-pass",
        "pylint_message_id": "W0107"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-raise: Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1522,
      "column_number": 8,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1523,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1527,
      "column_number": 16,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1534,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1601,
      "column_number": 69,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1601,
      "column_number": 77,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1615,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1617,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"failed to allocate partitions for pool '%s'\" % self._pool['name']) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"failed to allocate partitions for pool '%s'\" % self._pool['name']) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1640,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1640,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1646,
      "column_number": 18,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1653,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-return: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1687,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1692,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1693,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1706,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Method '_get_format' is abstract in class 'BlivetBase' but is not overridden in child class 'BlivetPartitionPool'",
      "message": "abstract-method: Method '_get_format' is abstract in class 'BlivetBase' but is not overridden in child class 'BlivetPartitionPool'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1706,
      "column_number": 0,
      "rule_id": "W0223",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "abstract-method",
        "pylint_message_id": "W0223"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1717,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1718,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1727,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-return: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1737,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1752,
      "column_number": 26,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (24/15)",
      "message": "too-many-locals: Too many local variables (24/15)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1758,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise BlivetAnsibleError(\"invalid percentage '%s' size specified in pool '%s'\" % (spec, pool_device.name)) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except ValueError as exc' and 'raise BlivetAnsibleError(\"invalid percentage '%s' size specified in pool '%s'\" % (spec, pool_device.name)) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1767,
      "column_number": 20,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1767,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"invalid size specification '%s' in pool '%s'\" % (spec, pool_device.name)) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"invalid size specification '%s' in pool '%s'\" % (spec, pool_device.name)) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1774,
      "column_number": 20,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1774,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1780,
      "column_number": 27,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1787,
      "column_number": 28,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1788,
      "column_number": 26,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"thin_pool\": True, \"size\": tlv_size, \"parents\": [pool_device]}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"thin_pool\": True, \"size\": tlv_size, \"parents\": [pool_device]}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1842,
      "column_number": 28,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"name\": thinlv['name']}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"name\": thinlv['name']}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1845,
      "column_number": 37,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up thin pool '%s': %s\" % (self._pool['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up thin pool '%s': %s\" % (self._pool['name'], str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1850,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1850,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (20/12)",
      "message": "too-many-branches: Too many branches (20/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1758,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (63/50)",
      "message": "too-many-statements: Too many statements (63/50)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1758,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1883,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to add disk '%s' to pool '%s': %s\" % (disk.name, self._pool['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to add disk '%s' to pool '%s': %s\" % (disk.name, self._pool['name'], str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1898,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1898,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1904,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to remove member '%s' from pool '%s': %s\" % (pv.name, self._pool['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to remove member '%s' from pool '%s': %s\" % (pv.name, self._pool['name'], str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1915,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1915,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (16/12)",
      "message": "too-many-branches: Too many branches (16/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1856,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up pool '%s': %s\" % (self._pool['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up pool '%s': %s\" % (self._pool['name'], str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1943,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1943,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1951,
      "column_number": 26,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1952,
      "column_number": 8,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Attribute '_thinpools' defined outside __init__",
      "message": "attribute-defined-outside-init: Attribute '_thinpools' defined outside __init__",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1948,
      "column_number": 8,
      "rule_id": "W0201",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "attribute-defined-outside-init",
        "pylint_message_id": "W0201"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Attribute '_thinpools' defined outside __init__",
      "message": "attribute-defined-outside-init: Attribute '_thinpools' defined outside __init__",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1951,
      "column_number": 8,
      "rule_id": "W0201",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "attribute-defined-outside-init",
        "pylint_message_id": "W0201"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Attribute '_thinpools' defined outside __init__",
      "message": "attribute-defined-outside-init: Attribute '_thinpools' defined outside __init__",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1954,
      "column_number": 12,
      "rule_id": "W0201",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "attribute-defined-outside-init",
        "pylint_message_id": "W0201"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1957,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _clevis of a client class",
      "message": "protected-access: Access to a protected member _clevis of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1972,
      "column_number": 50,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _clevis of a client class",
      "message": "protected-access: Access to a protected member _clevis of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1974,
      "column_number": 48,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _clevis of a client class",
      "message": "protected-access: Access to a protected member _clevis of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1976,
      "column_number": 55,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-return: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1986,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2002,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to add disk '%s' to pool '%s': %s\" % (disk.name, self._pool['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to add disk '%s' to pool '%s': %s\" % (disk.name, self._pool['name'], str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2016,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2016,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up pool '%s': %s\" % (self._pool['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up pool '%s': %s\" % (self._pool['name'], str(e))) from e'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2049,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2049,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2068,
      "column_number": 33,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _volume of a client class",
      "message": "protected-access: Access to a protected member _volume of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2077,
      "column_number": 24,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _volume of a client class",
      "message": "protected-access: Access to a protected member _volume of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2078,
      "column_number": 28,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _volume of a client class",
      "message": "protected-access: Access to a protected member _volume of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2079,
      "column_number": 26,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _blivet_volumes of a client class",
      "message": "protected-access: Access to a protected member _blivet_volumes of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2086,
      "column_number": 50,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _volume of a client class",
      "message": "protected-access: Access to a protected member _volume of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2087,
      "column_number": 28,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _volume of a client class",
      "message": "protected-access: Access to a protected member _volume of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2088,
      "column_number": 32,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _volume of a client class",
      "message": "protected-access: Access to a protected member _volume of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2089,
      "column_number": 30,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2092,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'FSTab' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'FSTab' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2092,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2095,
      "column_number": 24,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2098,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2101,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2102,
      "column_number": 24,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2104,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2108,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"device_id\": fields[0], \"device_path\": getattr(device, 'path', None), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"device_id\": fields[0], \"device_path\": getattr(device, 'path', None), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2118,
      "column_number": 37,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2136,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2137,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"path\": mount['mount_point'], \"state\": 'absent'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"path\": mount['mount_point'], \"state\": 'absent'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2159,
      "column_number": 22,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (14/12)",
      "message": "too-many-branches: Too many branches (14/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2125,
      "column_number": 0,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2197,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2198,
      "column_number": 11,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"backing_device\": action.device.path, \"name\": action.format.map_name, ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"backing_device\": action.device.path, \"name\": action.format.map_name, ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2203,
      "column_number": 20,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2211,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2212,
      "column_number": 15,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _get_volumes of a client class",
      "message": "protected-access: Access to a protected member _get_volumes of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2216,
      "column_number": 8,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _blivet_volumes of a client class",
      "message": "protected-access: Access to a protected member _blivet_volumes of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2217,
      "column_number": 23,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2249,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2276,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Redefining built-in 'input'",
      "message": "redefined-builtin: Redefining built-in 'input'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2276,
      "column_number": 32,
      "rule_id": "W0622",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "redefined-builtin",
        "pylint_message_id": "W0622"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2308,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Redefining built-in 'input'",
      "message": "redefined-builtin: Redefining built-in 'input'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2308,
      "column_number": 37,
      "rule_id": "W0622",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "redefined-builtin",
        "pylint_message_id": "W0622"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2321,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (20/15)",
      "message": "too-many-locals: Too many local variables (20/15)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2321,
      "column_number": 0,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"encryption\": dict(type='bool'), \"encryption_cipher\": dict(type='str'), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"encryption\": dict(type='bool'), \"encryption_cipher\": dict(type='str'), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2330,
      "column_number": 25,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2330,
      "column_number": 41,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2331,
      "column_number": 48,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"no_log\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"no_log\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2332,
      "column_number": 45,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2333,
      "column_number": 50,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2334,
      "column_number": 54,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"no_log\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"no_log\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2335,
      "column_number": 50,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2336,
      "column_number": 48,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2337,
      "column_number": 39,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2338,
      "column_number": 38,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2339,
      "column_number": 44,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2340,
      "column_number": 42,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2341,
      "column_number": 41,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2342,
      "column_number": 42,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2343,
      "column_number": 41,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2344,
      "column_number": 35,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2345,
      "column_number": 41,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2346,
      "column_number": 35,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"default\": 'present', \"choices\": ['present', 'absent'], ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"default\": 'present', \"choices\": ['present', 'absent'], ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2347,
      "column_number": 36,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2348,
      "column_number": 35,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"disks\": dict(type='list', elements='str', default=list()), \"raid_device_count\": dict(type='int'), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"disks\": dict(type='list', elements='str', default=list()), \"raid_device_count\": dict(type='int'), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2351,
      "column_number": 8,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2351,
      "column_number": 19,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2351,
      "column_number": 61,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2352,
      "column_number": 31,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2353,
      "column_number": 30,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2354,
      "column_number": 35,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2355,
      "column_number": 29,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"cached\": dict(type='bool'), \"cache_devices\": dict(type='list', elements='str', default=list()), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"cached\": dict(type='bool'), \"cache_devices\": dict(type='list', elements='str', default=list()), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2358,
      "column_number": 8,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2358,
      "column_number": 20,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2359,
      "column_number": 27,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2359,
      "column_number": 69,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2360,
      "column_number": 24,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2361,
      "column_number": 24,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2362,
      "column_number": 25,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2363,
      "column_number": 27,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2364,
      "column_number": 24,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2364,
      "column_number": 66,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2365,
      "column_number": 30,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2366,
      "column_number": 28,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2367,
      "column_number": 28,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool', \"default\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool', \"default\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2368,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2369,
      "column_number": 27,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"pools\": dict(type='list', elements='dict', options=dict(disks=dict(type='list', elements='str', default=list()), encryption=dict(type='bool'), encryption_cipher=dict(type='str'), encryption_key=dict(type='str', no_log=False), encryption_key_size=dict(type='int'), encryption_luks_version=dict(type='str'), encryption_password=dict(type='str', no_log=True), encryption_clevis_pin=dict(type='str'), encryption_tang_url=dict(type='str'), encryption_tang_thumbprint=dict(type='str'), grow_to_fill=dict(type='bool'), name=dict(type='str'), raid_level=dict(type='str'), raid_device_count=dict(type='int'), raid_spare_count=dict(type='int'), raid_metadata_version=dict(type='str'), raid_chunk_size=dict(type='str'), shared=dict(type='bool'), state=dict(type='str', default='present', choices=['present', 'absent']), type=dict(type='str'), volumes=dict(type='list', elements='dict', default=list(), options=pool_volume_opts))), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"pools\": dict(type='list', elements='dict', options=dict(disks=dict(type='list', elements='str', default=list()), encryption=dict(type='bool'), encryption_cipher=dict(type='str'), encryption_key=dict(type='str', no_log=False), encryption_key_size=dict(type='int'), encryption_luks_version=dict(type='str'), encryption_password=dict(type='str', no_log=True), encryption_clevis_pin=dict(type='str'), encryption_tang_url=dict(type='str'), encryption_tang_thumbprint=dict(type='str'), grow_to_fill=dict(type='bool'), name=dict(type='str'), raid_level=dict(type='str'), raid_device_count=dict(type='int'), raid_spare_count=dict(type='int'), raid_metadata_version=dict(type='str'), raid_chunk_size=dict(type='str'), shared=dict(type='bool'), state=dict(type='str', default='present', choices=['present', 'absent']), type=dict(type='str'), volumes=dict(type='list', elements='dict', default=list(), options=pool_volume_opts))), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2371,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'dict', \"options\": dict(disks=dict(type='list', elements='str', default=list()), encryption=dict(type='bool'), encryption_cipher=dict(type='str'), encryption_key=dict(type='str', no_log=False), encryption_key_size=dict(type='int'), encryption_luks_version=dict(type='str'), encryption_password=dict(type='str', no_log=True), encryption_clevis_pin=dict(type='str'), encryption_tang_url=dict(type='str'), encryption_tang_thumbprint=dict(type='str'), grow_to_fill=dict(type='bool'), name=dict(type='str'), raid_level=dict(type='str'), raid_device_count=dict(type='int'), raid_spare_count=dict(type='int'), raid_metadata_version=dict(type='str'), raid_chunk_size=dict(type='str'), shared=dict(type='bool'), state=dict(type='str', default='present', choices=['present', 'absent']), type=dict(type='str'), volumes=dict(type='list', elements='dict', default=list(), options=pool_volume_opts)), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'dict', \"options\": dict(disks=dict(type='list', elements='str', default=list()), encryption=dict(type='bool'), encryption_cipher=dict(type='str'), encryption_key=dict(type='str', no_log=False), encryption_key_size=dict(type='int'), encryption_luks_version=dict(type='str'), encryption_password=dict(type='str', no_log=True), encryption_clevis_pin=dict(type='str'), encryption_tang_url=dict(type='str'), encryption_tang_thumbprint=dict(type='str'), grow_to_fill=dict(type='bool'), name=dict(type='str'), raid_level=dict(type='str'), raid_device_count=dict(type='int'), raid_spare_count=dict(type='int'), raid_metadata_version=dict(type='str'), raid_chunk_size=dict(type='str'), shared=dict(type='bool'), state=dict(type='str', default='present', choices=['present', 'absent']), type=dict(type='str'), volumes=dict(type='list', elements='dict', default=list(), options=pool_volume_opts)), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2372,
      "column_number": 14,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"disks\": dict(type='list', elements='str', default=list()), \"encryption\": dict(type='bool'), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"disks\": dict(type='list', elements='str', default=list()), \"encryption\": dict(type='bool'), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2373,
      "column_number": 27,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2373,
      "column_number": 38,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2373,
      "column_number": 80,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2374,
      "column_number": 43,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2375,
      "column_number": 50,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"no_log\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"no_log\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2376,
      "column_number": 47,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2377,
      "column_number": 52,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2378,
      "column_number": 56,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"no_log\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"no_log\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2379,
      "column_number": 52,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2380,
      "column_number": 54,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2381,
      "column_number": 52,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2382,
      "column_number": 59,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2383,
      "column_number": 45,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2384,
      "column_number": 37,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2385,
      "column_number": 43,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2386,
      "column_number": 50,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2387,
      "column_number": 49,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2388,
      "column_number": 54,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2389,
      "column_number": 48,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2390,
      "column_number": 39,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"default\": 'present', \"choices\": ['present', 'absent'], ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"default\": 'present', \"choices\": ['present', 'absent'], ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2391,
      "column_number": 38,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2392,
      "column_number": 37,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'dict', \"default\": list(), \"options\": pool_volume_opts, ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'dict', \"default\": list(), \"options\": pool_volume_opts, ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2393,
      "column_number": 40,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2393,
      "column_number": 83,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'dict', \"options\": volume_opts}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'dict', \"options\": volume_opts}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2395,
      "column_number": 16,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool', \"required\": False, \"default\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool', \"required\": False, \"default\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2397,
      "column_number": 22,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": False, \"default\": None}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": False, \"default\": None}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2398,
      "column_number": 23,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool', \"required\": False, \"default\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool', \"required\": False, \"default\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2399,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'dict', \"required\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'dict', \"required\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2400,
      "column_number": 22,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'dict', \"required\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'dict', \"required\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2401,
      "column_number": 24,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool', \"required\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool', \"required\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2402,
      "column_number": 23,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'dict', \"required\": False, \"default\": {}}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'dict', \"required\": False, \"default\": {}}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2403,
      "column_number": 35,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool', \"required\": False, \"default\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool', \"required\": False, \"default\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2404,
      "column_number": 23,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"changed\": False, \"actions\": list(), \"leaves\": list(), \"mounts\": list(), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"changed\": False, \"actions\": list(), \"leaves\": list(), \"mounts\": list(), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2411,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2413,
      "column_number": 16,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2414,
      "column_number": 15,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2415,
      "column_number": 15,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2416,
      "column_number": 15,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2417,
      "column_number": 14,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2418,
      "column_number": 16,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2419,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2428,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using the global statement",
      "message": "global-statement: Using the global statement",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2443,
      "column_number": 4,
      "rule_id": "W0603",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-statement",
        "pylint_message_id": "W0603"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using the global statement",
      "message": "global-statement: Using the global statement",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2446,
      "column_number": 4,
      "rule_id": "W0603",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-statement",
        "pylint_message_id": "W0603"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using the global statement",
      "message": "global-statement: Using the global statement",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2449,
      "column_number": 4,
      "rule_id": "W0603",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-statement",
        "pylint_message_id": "W0603"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Global variable 'diskvolume_mkfs_option_map' undefined at the module level",
      "message": "global-variable-undefined: Global variable 'diskvolume_mkfs_option_map' undefined at the module level",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2452,
      "column_number": 4,
      "rule_id": "W0601",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-variable-undefined",
        "pylint_message_id": "W0601"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using the global statement",
      "message": "global-statement: Using the global statement",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2455,
      "column_number": 4,
      "rule_id": "W0603",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-statement",
        "pylint_message_id": "W0603"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using the global statement",
      "message": "global-statement: Using the global statement",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2459,
      "column_number": 4,
      "rule_id": "W0603",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-statement",
        "pylint_message_id": "W0603"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Global variable 'uses_kmod_kvdo' undefined at the module level",
      "message": "global-variable-undefined: Global variable 'uses_kmod_kvdo' undefined at the module level",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2463,
      "column_number": 4,
      "rule_id": "W0601",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-variable-undefined",
        "pylint_message_id": "W0601"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2469,
      "column_number": 14,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"action\": action.type_desc_str, \"fs_type\": action.format.type if action.is_format else None, ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"action\": action.type_desc_str, \"fs_type\": action.format.type if action.is_format else None, ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2492,
      "column_number": 15,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2498,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2501,
      "column_number": 62,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2503,
      "column_number": 33,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2513,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2536,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2537,
      "column_number": 33,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (19/12)",
      "message": "too-many-branches: Too many branches (19/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2321,
      "column_number": 0,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (89/50)",
      "message": "too-many-statements: Too many statements (89/50)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2321,
      "column_number": 0,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2555,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 88,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import os\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import os\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 39,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import shlex\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import shlex\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 40,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 42,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 56,
      "column_number": 18,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 78,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-return: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 79,
      "column_number": 4,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 87,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 89,
      "column_number": 11,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 91,
      "column_number": 14,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 109,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 110,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"info\": None}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"info\": None}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 112,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 123,
      "column_number": 11,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 129,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 64,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "Unable to import 'ansible.module_utils.storage_lsr.size'",
      "message": "import-error: Unable to import 'ansible.module_utils.storage_lsr.size'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 65,
      "column_number": 0,
      "rule_id": "E0401",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "import-error",
        "pylint_message_id": "E0401"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.storage_lsr.size import Size\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.storage_lsr.size import Size\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 65,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "No name 'storage_lsr' in module 'ansible.module_utils'",
      "message": "no-name-in-module: No name 'storage_lsr' in module 'ansible.module_utils'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 65,
      "column_number": 0,
      "rule_id": "E0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "no-name-in-module",
        "pylint_message_id": "E0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 68,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"size\": dict(type='str', required=True)}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"size\": dict(type='str', required=True)}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 70,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 71,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"changed\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"changed\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 75,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 97,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (132/100)",
      "message": "line-too-long: Line too long (132/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 102,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (109/100)",
      "message": "line-too-long: Line too long (109/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 147,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (153/100)",
      "message": "line-too-long: Line too long (153/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 154,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import os\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import os\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 83,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import re\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import re\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 84,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 86,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "Unable to import 'ansible.module_utils.storage_lsr.size'",
      "message": "import-error: Unable to import 'ansible.module_utils.storage_lsr.size'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 87,
      "column_number": 0,
      "rule_id": "E0401",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "import-error",
        "pylint_message_id": "E0401"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.storage_lsr.size import Size\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.storage_lsr.size import Size\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 87,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "No name 'storage_lsr' in module 'ansible.module_utils'",
      "message": "no-name-in-module: No name 'storage_lsr' in module 'ansible.module_utils'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 87,
      "column_number": 0,
      "rule_id": "E0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "no-name-in-module",
        "pylint_message_id": "E0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 94,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 99,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 102,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 102,
      "column_number": 92,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 127,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 135,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 137,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 140,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 146,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 148,
      "column_number": 12,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 150,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 157,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 161,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 170,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 177,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 185,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 189,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 193,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 197,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 201,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 205,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 209,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"max_return\": dict(type='int', required=False, default=10), \"min_size\": dict(type='str', required=False, default='0'), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"max_return\": dict(type='int', required=False, default=10), \"min_size\": dict(type='str', required=False, default='0'), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 219,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int', \"required\": False, \"default\": 10}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int', \"required\": False, \"default\": 10}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 220,
      "column_number": 19,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": False, \"default\": '0'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": False, \"default\": '0'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 221,
      "column_number": 17,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": False, \"default\": '0'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": False, \"default\": '0'}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 222,
      "column_number": 17,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": False, \"default\": None}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": False, \"default\": None}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 223,
      "column_number": 23,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool', \"required\": False, \"default\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool', \"required\": False, \"default\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 224,
      "column_number": 26,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"changed\": False, \"disks\": [], \"info\": []}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"changed\": False, \"disks\": [], \"info\": []}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 227,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 242,
      "column_number": 23,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider iterating with .items()",
      "message": "consider-using-dict-items: Consider iterating with .items()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 243,
      "column_number": 0,
      "rule_id": "C0206",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-dict-items",
        "pylint_message_id": "C0206"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider iterating the dictionary directly instead of calling .keys()",
      "message": "consider-iterating-dictionary: Consider iterating the dictionary directly instead of calling .keys()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 243,
      "column_number": 66,
      "rule_id": "C0201",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-iterating-dictionary",
        "pylint_message_id": "C0201"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider iterating the dictionary directly instead of calling .keys()",
      "message": "consider-iterating-dictionary: Consider iterating the dictionary directly instead of calling .keys()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 244,
      "column_number": 21,
      "rule_id": "C0201",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-iterating-dictionary",
        "pylint_message_id": "C0201"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider iterating the dictionary directly instead of calling .keys()",
      "message": "consider-iterating-dictionary: Consider iterating the dictionary directly instead of calling .keys()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 250,
      "column_number": 46,
      "rule_id": "C0201",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-iterating-dictionary",
        "pylint_message_id": "C0201"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (104/100)",
      "message": "line-too-long: Line too long (104/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 85,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 132,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 6,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 58,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils import facts\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils import facts\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 59,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 65,
      "column_number": 9,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"mount\": dict(type='str', required=True), \"fs_type\": dict(type='str', required=True), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"mount\": dict(type='str', required=True), \"fs_type\": dict(type='str', required=True), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 141,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 142,
      "column_number": 14,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 143,
      "column_number": 16,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"changed\": False, \"vg_name\": '', \"lv_name\": ''}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"changed\": False, \"vg_name\": '', \"lv_name\": ''}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 146,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 169,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 125,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import glob\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import glob\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 53,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import os\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import os\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 54,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import re\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import re\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 55,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 57,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 66,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 68,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 71,
      "column_number": 21,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"break\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-break: Unnecessary \"else\" after \"break\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 72,
      "column_number": 12,
      "rule_id": "R1723",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-break",
        "pylint_message_id": "R1723"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 86,
      "column_number": 9,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 86,
      "column_number": 14,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 93,
      "column_number": 36,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 96,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 98,
      "column_number": 17,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 100,
      "column_number": 17,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 104,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"spec\": dict(type='str', required=True)}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"spec\": dict(type='str', required=True)}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 105,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 106,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"device\": None}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"device\": None}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 109,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 120,
      "column_number": 11,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 125,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 130,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (146/100)",
      "message": "line-too-long: Line too long (146/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 16,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 169,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (109/100)",
      "message": "line-too-long: Line too long (109/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 206,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 31,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'ArgValidator' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'ArgValidator' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 31,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider merging these isinstance calls to isinstance(value, (float, int))",
      "message": "consider-merging-isinstance: Consider merging these isinstance calls to isinstance(value, (float, int))",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 41,
      "column_number": 11,
      "rule_id": "R1701",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-merging-isinstance",
        "pylint_message_id": "R1701"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 44,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 59,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise TypeError(\"'%s' has to be an integer\" % value) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except ValueError as exc' and 'raise TypeError(\"'%s' has to be an integer\" % value) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 66,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 66,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise TypeError(\"'%s' has to be a float\" % value) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except ValueError as exc' and 'raise TypeError(\"'%s' has to be a float\" % value) from exc'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 73,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 73,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 76,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 86,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 95,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 98,
      "column_number": 26,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"list\": ArgValidator._validate_list, \"str\": ArgValidator._validate_str, ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"list\": ArgValidator._validate_list, \"str\": ArgValidator._validate_str, ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 107,
      "column_number": 42,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate_list of a client class",
      "message": "protected-access: Access to a protected member _validate_list of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 107,
      "column_number": 52,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate_str of a client class",
      "message": "protected-access: Access to a protected member _validate_str of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 108,
      "column_number": 51,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate_bool of a client class",
      "message": "protected-access: Access to a protected member _validate_bool of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 109,
      "column_number": 52,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate_int of a client class",
      "message": "protected-access: Access to a protected member _validate_int of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 110,
      "column_number": 51,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate_float of a client class",
      "message": "protected-access: Access to a protected member _validate_float of a client class",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 111,
      "column_number": 53,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 118,
      "column_number": 20,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 120,
      "column_number": 25,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 133,
      "column_number": 43,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 135,
      "column_number": 43,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 155,
      "column_number": 39,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (21/12)",
      "message": "too-many-branches: Too many branches (21/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 114,
      "column_number": 0,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 189,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 229,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using enumerate instead of iterating with range and len",
      "message": "consider-using-enumerate: Consider using enumerate instead of iterating with range and len",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 253,
      "column_number": 16,
      "rule_id": "C0200",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-enumerate",
        "pylint_message_id": "C0200"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 264,
      "column_number": 30,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "\"x == []\" can be simplified to \"not x\", if it is strictly a sequence, as an empty list is falsey",
      "message": "use-implicit-booleaness-not-comparison: \"x == []\" can be simplified to \"not x\", if it is strictly a sequence, as an empty list is falsey",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 267,
      "column_number": 7,
      "rule_id": "C1803",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "use-implicit-booleaness-not-comparison",
        "pylint_message_id": "C1803"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 273,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 274,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using enumerate instead of iterating with range and len",
      "message": "consider-using-enumerate: Consider using enumerate instead of iterating with range and len",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 280,
      "column_number": 8,
      "rule_id": "C0200",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-enumerate",
        "pylint_message_id": "C0200"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 289,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (18/15)",
      "message": "too-many-locals: Too many local variables (18/15)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 289,
      "column_number": 0,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 290,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 294,
      "column_number": 23,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 295,
      "column_number": 27,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"break\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-break: Unnecessary \"else\" after \"break\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 299,
      "column_number": 12,
      "rule_id": "R1723",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-break",
        "pylint_message_id": "R1723"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 308,
      "column_number": 45,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 318,
      "column_number": 36,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 292,
      "column_number": 4,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 341,
      "column_number": 27,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (14/12)",
      "message": "too-many-branches: Too many branches (14/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 289,
      "column_number": 0,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 347,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 353,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused argument 'error_log'",
      "message": "unused-argument: Unused argument 'error_log'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 347,
      "column_number": 51,
      "rule_id": "W0613",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-argument",
        "pylint_message_id": "W0613"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused argument 'updated_params'",
      "message": "unused-argument: Unused argument 'updated_params'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 347,
      "column_number": 67,
      "rule_id": "W0613",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-argument",
        "pylint_message_id": "W0613"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/size.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/size.py",
      "line_number": 3,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'Size' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'Size' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/size.py",
      "line_number": 23,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/size.py",
      "line_number": 41,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/size.py",
      "line_number": 95,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/_version.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"VERSION_TUPLE\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"VERSION_TUPLE\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/_version.py",
      "line_number": 11,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"VERSION_TUPLE\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"VERSION_TUPLE\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/_version.py",
      "line_number": 13,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Constant name \"version\" doesn't conform to UPPER_CASE naming style",
      "message": "invalid-name: Constant name \"version\" doesn't conform to UPPER_CASE naming style",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/_version.py",
      "line_number": 20,
      "column_number": 14,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 19,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 25,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 30,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 35,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 39,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 45,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 48,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 50,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 55,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 60,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 68,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 70,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 76,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 79,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 81,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 86,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 91,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 93,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 95,
      "column_number": 70,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 97,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 106,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 112,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 115,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 117,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 122,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 127,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 129,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 132,
      "column_number": 67,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 134,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 140,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 143,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 145,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 150,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 161,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 166,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 168,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 171,
      "column_number": 88,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 173,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 179,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 182,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 184,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 188,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 194,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 207,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 219,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 221,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 226,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 231,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 234,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 248,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 250,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 256,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 259,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 261,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 265,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 275,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 277,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 283,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 285,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 292,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 298,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 15,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 46,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 77,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 113,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 141,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 180,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 217,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 257,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (7/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (7/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 227,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 278,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 279,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 287,
      "column_number": 18,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 295,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 299,
      "column_number": 10,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import os",
      "message": "unused-import: Unused import os",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import glob",
      "message": "unused-import: Unused import glob",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 10,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import shutil",
      "message": "unused-import: Unused import shutil",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 11,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused List imported from typing",
      "message": "unused-import: Unused List imported from typing",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py",
      "line_number": 13,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 19,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 24,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 29,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 31,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 43,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 46,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 52,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 55,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 57,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 62,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 77,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 82,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 87,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 90,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 94,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 99,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 104,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 109,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 112,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 115,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 117,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 122,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 125,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 126,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 130,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 132,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (110/100)",
      "message": "line-too-long: Line too long (110/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 135,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (124/100)",
      "message": "line-too-long: Line too long (124/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 136,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 137,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 141,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 144,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 150,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 153,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 155,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 160,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 178,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 183,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 185,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 192,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 195,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 201,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 204,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 206,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 211,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 216,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 221,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 224,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 230,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 235,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 238,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 245,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (116/100)",
      "message": "line-too-long: Line too long (116/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 246,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 248,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 251,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (116/100)",
      "message": "line-too-long: Line too long (116/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 258,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 259,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 262,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 268,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 271,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 273,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 278,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 283,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 285,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 297,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 300,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 306,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 309,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 311,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 315,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 323,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 325,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 331,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 333,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 340,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 346,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 15,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 53,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (24/15)",
      "message": "too-many-locals: Too many local variables (24/15)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 58,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 151,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 78,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (7/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (7/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 78,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 202,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (23/15)",
      "message": "too-many-locals: Too many local variables (23/15)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 207,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 269,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 212,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 212,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 307,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 326,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 327,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 335,
      "column_number": 18,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 343,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 347,
      "column_number": 10,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"glob\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"glob\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 11,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 12,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"typing.List\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"typing.List\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 13,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import os",
      "message": "unused-import: Unused import os",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import yaml",
      "message": "unused-import: Unused import yaml",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 10,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import glob",
      "message": "unused-import: Unused import glob",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 11,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused List imported from typing",
      "message": "unused-import: Unused List imported from typing",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py",
      "line_number": 13,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 15,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 17,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 22,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 24,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 28,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (125/100)",
      "message": "line-too-long: Line too long (125/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 31,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 32,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 34,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 35,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 38,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 44,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 47,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 54,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 62,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 70,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 45,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 50,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import outside toplevel (yaml)",
      "message": "import-outside-toplevel: Import outside toplevel (yaml)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 58,
      "column_number": 8,
      "rule_id": "C0415",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "import-outside-toplevel",
        "pylint_message_id": "C0415"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import os",
      "message": "unused-import: Unused import os",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 6,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import sys",
      "message": "unused-import: Unused import sys",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py",
      "line_number": 8,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 18,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 29,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 34,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 41,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 46,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 48,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 51,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 57,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 60,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 62,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 67,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 72,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 74,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (123/100)",
      "message": "line-too-long: Line too long (123/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 85,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (121/100)",
      "message": "line-too-long: Line too long (121/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 86,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 88,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 91,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 97,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 100,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 102,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 107,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 112,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 114,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 123,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 127,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 131,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 135,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 138,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 144,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 147,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 149,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 154,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 159,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 161,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 171,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 174,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 180,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 183,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 185,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 190,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 195,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 198,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 201,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 207,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 212,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 220,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 222,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 228,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 231,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 233,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 238,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 250,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 253,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 255,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 269,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 272,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 278,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 281,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 283,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 289,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 296,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 298,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 302,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 307,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 314,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 323,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 326,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 328,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 334,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 336,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 337,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 340,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 347,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 354,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 360,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 14,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 27,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 58,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 98,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 145,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 181,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 229,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable 'i'",
      "message": "unused-variable: Unused variable 'i'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 199,
      "column_number": 20,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 279,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 329,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 330,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 349,
      "column_number": 18,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 357,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 362,
      "column_number": 4,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 363,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 366,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 11,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"typing.List\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"typing.List\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 12,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import os",
      "message": "unused-import: Unused import os",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 21,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 25,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 28,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 49,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 53,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 55,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 60,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 63,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 70,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 73,
      "column_number": 64,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 82,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 90,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 98,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 103,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 110,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 115,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 118,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 120,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 126,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 133,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 139,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 146,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 151,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 156,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (121/100)",
      "message": "line-too-long: Line too long (121/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 157,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (108/100)",
      "message": "line-too-long: Line too long (108/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 158,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (138/100)",
      "message": "line-too-long: Line too long (138/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 162,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 164,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 166,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 171,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 174,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 177,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 180,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 185,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 190,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 196,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 202,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 206,
      "column_number": 61,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 208,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (110/100)",
      "message": "line-too-long: Line too long (110/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 210,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 211,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 215,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 220,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 226,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 232,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 236,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (108/100)",
      "message": "line-too-long: Line too long (108/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 237,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 240,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 242,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 244,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 249,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 252,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 260,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 262,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 265,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 266,
      "column_number": 45,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 268,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 16,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 47,
      "column_number": 31,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 36,
      "column_number": 33,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (17/15)",
      "message": "too-many-locals: Too many local variables (17/15)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 56,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 80,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 68,
      "column_number": 21,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 116,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 88,
      "column_number": 25,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable 'feature_name'",
      "message": "unused-variable: Unused variable 'feature_name'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 152,
      "column_number": 24,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 175,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (24/15)",
      "message": "too-many-locals: Too many local variables (24/15)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 181,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 250,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"json\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"json\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 9,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"os\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"os\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 10,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"subprocess\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"subprocess\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 11,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"sys\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"sys\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 12,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 13,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import os",
      "message": "unused-import: Unused import os",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 10,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import sys",
      "message": "unused-import: Unused import sys",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py",
      "line_number": 12,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (104/100)",
      "message": "line-too-long: Line too long (104/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 56,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 70,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 92,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 114,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 147,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 151,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 153,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 179,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 181,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (120/100)",
      "message": "line-too-long: Line too long (120/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 189,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (122/100)",
      "message": "line-too-long: Line too long (122/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 191,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (120/100)",
      "message": "line-too-long: Line too long (120/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 193,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (116/100)",
      "message": "line-too-long: Line too long (116/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 195,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 196,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (116/100)",
      "message": "line-too-long: Line too long (116/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 201,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 204,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 213,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 216,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 235,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 240,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 242,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 247,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 255,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 258,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 265,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 274,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 280,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 289,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (111/100)",
      "message": "line-too-long: Line too long (111/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 292,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 294,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 297,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 299,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 304,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 336,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 359,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 365,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 367,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (115/100)",
      "message": "line-too-long: Line too long (115/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 369,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 371,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (119/100)",
      "message": "line-too-long: Line too long (119/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 372,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (120/100)",
      "message": "line-too-long: Line too long (120/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 373,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 374,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 375,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 382,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 384,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 388,
      "column_number": 65,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 393,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 398,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 404,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 407,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 420,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 425,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 430,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 441,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 443,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 449,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 456,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 458,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 462,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 469,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (117/100)",
      "message": "line-too-long: Line too long (117/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 471,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (114/100)",
      "message": "line-too-long: Line too long (114/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 472,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 473,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 481,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 483,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (138/100)",
      "message": "line-too-long: Line too long (138/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 484,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 485,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 487,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 491,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 495,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 500,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 507,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 527,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 530,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 536,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 18,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many return statements (7/6)",
      "message": "too-many-return-statements: Too many return statements (7/6)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 29,
      "column_number": 4,
      "rule_id": "R0911",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-return-statements",
        "pylint_message_id": "R0911"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (16/15)",
      "message": "too-many-locals: Too many local variables (16/15)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 93,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 121,
      "column_number": 31,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 109,
      "column_number": 33,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 145,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 143,
      "column_number": 35,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 133,
      "column_number": 37,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (9/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (9/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 126,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (23/12)",
      "message": "too-many-branches: Too many branches (23/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 93,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 202,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 184,
      "column_number": 21,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 214,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 209,
      "column_number": 21,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 233,
      "column_number": 31,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 227,
      "column_number": 33,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (19/12)",
      "message": "too-many-branches: Too many branches (19/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 154,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (52/50)",
      "message": "too-many-statements: Too many statements (52/50)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 154,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 295,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 253,
      "column_number": 25,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 284,
      "column_number": 27,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 287,
      "column_number": 33,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 250,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable 'feature_name'",
      "message": "unused-variable: Unused variable 'feature_name'",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 366,
      "column_number": 24,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "No exception type(s) specified",
      "message": "bare-except: No exception type(s) specified",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 391,
      "column_number": 8,
      "rule_id": "W0702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "bare-except",
        "pylint_message_id": "W0702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "'subprocess.run' used without explicitly defining the value for 'check'.",
      "message": "subprocess-run-check: 'subprocess.run' used without explicitly defining the value for 'check'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 388,
      "column_number": 21,
      "rule_id": "W1510",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "subprocess-run-check",
        "pylint_message_id": "W1510"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 401,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (28/15)",
      "message": "too-many-locals: Too many local variables (28/15)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 408,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 510,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (14/12)",
      "message": "too-many-branches: Too many branches (14/12)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 408,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (74/50)",
      "message": "too-many-statements: Too many statements (74/50)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 408,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"json\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"json\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 10,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"os\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"os\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 11,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"subprocess\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"subprocess\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 12,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"sys\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"sys\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 13,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 14,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"datetime.datetime\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"datetime.datetime\" should be placed before third party import \"yaml\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 15,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 24,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 44,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 55,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 59,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 65,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 67,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 74,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 81,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 84,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 88,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 102,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (108/100)",
      "message": "line-too-long: Line too long (108/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 104,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 105,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 110,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 112,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 119,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 125,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 128,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 132,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 142,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 144,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 147,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 150,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 152,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 159,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 161,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 162,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 164,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 169,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 172,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 174,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 178,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 182,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (134/100)",
      "message": "line-too-long: Line too long (134/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 183,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 184,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 188,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 194,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 196,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 199,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (126/100)",
      "message": "line-too-long: Line too long (126/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 201,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (115/100)",
      "message": "line-too-long: Line too long (115/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 202,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 203,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (148/100)",
      "message": "line-too-long: Line too long (148/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 205,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (120/100)",
      "message": "line-too-long: Line too long (120/100)",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 206,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 207,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 218,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 229,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 259,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 262,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 265,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 15,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "'subprocess.run' used without explicitly defining the value for 'check'.",
      "message": "subprocess-run-check: 'subprocess.run' used without explicitly defining the value for 'check'.",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 28,
      "column_number": 21,
      "rule_id": "W1510",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "subprocess-run-check",
        "pylint_message_id": "W1510"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 90,
      "column_number": 24,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-return: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 209,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 221,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py",
      "line_number": 257,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (110/100)",
      "message": "line-too-long: Line too long (110/100)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2300,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many lines in module (2903/1000)",
      "message": "too-many-lines: Too many lines in module (2903/1000)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0302",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "too-many-lines",
        "pylint_message_id": "C0302"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import errno\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import errno\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 64,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import functools\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import functools\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 65,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import os\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import os\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 66,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import re\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import re\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 67,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import shlex\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import shlex\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 68,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import socket\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import socket\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 69,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import subprocess\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import subprocess\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 70,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import time\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import time\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 71,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import traceback\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import traceback\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 72,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import logging\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import logging\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 73,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 76,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.network_lsr import ethtool\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.network_lsr import ethtool\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 77,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.network_lsr.myerror import MyError\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.network_lsr.myerror import MyError\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 78,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.network_lsr.argument_validator import ArgUtil, ArgValidator_ListConnections, ValidationError\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.network_lsr.argument_validator import ArgUtil, ArgValidator_ListConnections, ValidationError\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 80,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.network_lsr.utils import Util\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.network_lsr.utils import Util\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 86,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.network_lsr import nm_provider\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.network_lsr import nm_provider\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 87,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 101,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too few public methods (0/2)",
      "message": "too-few-public-methods: Too few public methods (0/2)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 101,
      "column_number": 0,
      "rule_id": "R0903",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-few-public-methods",
        "pylint_message_id": "R0903"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 109,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 123,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 127,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 128,
      "column_number": 15,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 146,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 153,
      "column_number": 21,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 215,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 238,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Raising too general exception: Exception",
      "message": "broad-exception-raised: Raising too general exception: Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 235,
      "column_number": 24,
      "rule_id": "W0719",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-raised",
        "pylint_message_id": "W0719"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 247,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 264,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 270,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 276,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 285,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 288,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 292,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 296,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"KeyValid\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"KeyValid\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 296,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 304,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"ValueEscape\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"ValueEscape\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 304,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider merging these comparisons with 'in' by using 'c in ('\\\\', \"'\")'. Use a set instead if elements are hashable.",
      "message": "consider-using-in: Consider merging these comparisons with 'in' by using 'c in ('\\\\', \"'\")'. Use a set instead if elements are hashable.",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 320,
      "column_number": 21,
      "rule_id": "R1714",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-in",
        "pylint_message_id": "R1714"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider merging these comparisons with 'in' by using 'c in ('\"', '\\\\', '$', '`')'. Use a set instead if elements are hashable.",
      "message": "consider-using-in: Consider merging these comparisons with 'in' by using 'c in ('\"', '\\\\', '$', '`')'. Use a set instead if elements are hashable.",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 331,
      "column_number": 19,
      "rule_id": "R1714",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-in",
        "pylint_message_id": "R1714"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 366,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (38/15)",
      "message": "too-many-locals: Too many local variables (38/15)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 366,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 419,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 421,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 433,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 444,
      "column_number": 38,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 460,
      "column_number": 43,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 465,
      "column_number": 31,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 477,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 483,
      "column_number": 31,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 491,
      "column_number": 39,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 496,
      "column_number": 31,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 523,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using enumerate instead of iterating with range and len",
      "message": "consider-using-enumerate: Consider using enumerate instead of iterating with range and len",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 545,
      "column_number": 12,
      "rule_id": "C0200",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-enumerate",
        "pylint_message_id": "C0200"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'idx'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'idx'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 552,
      "column_number": 16,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 598,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (74/12)",
      "message": "too-many-branches: Too many branches (74/12)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 366,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (178/50)",
      "message": "too-many-statements: Too many statements (178/50)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 366,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 648,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 666,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 673,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 684,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'file_type'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'file_type'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 686,
      "column_number": 12,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 696,
      "column_number": 38,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 706,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'file_type'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'file_type'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 708,
      "column_number": 12,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'file_type'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'file_type'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 718,
      "column_number": 12,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 723,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 721,
      "column_number": 21,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 729,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'file_type'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'file_type'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 730,
      "column_number": 12,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 740,
      "column_number": 21,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 744,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 764,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 762,
      "column_number": 17,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 778,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 781,
      "column_number": 16,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many return statements (7/6)",
      "message": "too-many-return-statements: Too many return statements (7/6)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 744,
      "column_number": 4,
      "rule_id": "R0911",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-return-statements",
        "pylint_message_id": "R0911"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable '_unused_'",
      "message": "unused-variable: Unused variable '_unused_'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 774,
      "column_number": 16,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable '_ignored_'",
      "message": "unused-variable: Unused variable '_ignored_'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 774,
      "column_number": 31,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 794,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 800,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 805,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 812,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 814,
      "column_number": 12,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"GObject\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"GObject\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 815,
      "column_number": 12,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 824,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 835,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (6/5)",
      "message": "too-many-arguments: Too many arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 835,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 835,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many return statements (7/6)",
      "message": "too-many-return-statements: Too many return statements (7/6)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 858,
      "column_number": 8,
      "rule_id": "R0911",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-return-statements",
        "pylint_message_id": "R0911"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 884,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (6/5)",
      "message": "too-many-arguments: Too many arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 884,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 884,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 887,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 893,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 899,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 906,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 907,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 916,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (50/15)",
      "message": "too-many-locals: Too many local variables (50/15)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 916,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 917,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except AttributeError as exc' and 'raise MyError(\"Macvlan mode '%s' is not recognized\" % mode) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except AttributeError as exc' and 'raise MyError(\"Macvlan mode '%s' is not recognized\" % mode) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1010,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1010,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1049,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise MyError('created connection failed to normalize: %s' % e) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise MyError('created connection failed to normalize: %s' % e) from e'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1451,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1451,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (107/12)",
      "message": "too-many-branches: Too many branches (107/12)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 916,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (264/50)",
      "message": "too-many-statements: Too many statements (264/50)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 916,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1454,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1459,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1471,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1471,
      "column_number": 61,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1474,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1479,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1486,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1498,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1498,
      "column_number": 64,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1501,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1536,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1545,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1559,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1559,
      "column_number": 70,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1575,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1583,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1588,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1594,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Simplify chained comparison between the operands",
      "message": "chained-comparison: Simplify chained comparison between the operands",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1611,
      "column_number": 20,
      "rule_id": "R1716",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "chained-comparison",
        "pylint_message_id": "R1716"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "Possibly using variable 'dev_state' before assignment",
      "message": "possibly-used-before-assignment: Possibly using variable 'dev_state' before assignment",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1612,
      "column_number": 24,
      "rule_id": "E0606",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "possibly-used-before-assignment",
        "pylint_message_id": "E0606"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1678,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1697,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1699,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1710,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'RunEnvironment' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'RunEnvironment' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1710,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1715,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1718,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (9/5)",
      "message": "too-many-arguments: Too many arguments (9/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1718,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (9/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (9/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1718,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1731,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1737,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1751,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1758,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable 'cc'",
      "message": "unused-variable: Unused variable 'cc'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1791,
      "column_number": 12,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1796,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (9/5)",
      "message": "too-many-arguments: Too many arguments (9/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1811,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (9/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (9/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1811,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1823,
      "column_number": 33,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1830,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1840,
      "column_number": 21,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1845,
      "column_number": 31,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'idx'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'idx'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1846,
      "column_number": 27,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1849,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1875,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1879,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1887,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1898,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1902,
      "column_number": 8,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1913,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'Cmd' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'Cmd' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1913,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many instance attributes (12/7)",
      "message": "too-many-instance-attributes: Too many instance attributes (12/7)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1913,
      "column_number": 0,
      "rule_id": "R0902",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-instance-attributes",
        "pylint_message_id": "R0902"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (8/5)",
      "message": "too-many-arguments: Too many arguments (8/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1914,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (8/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (8/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1914,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1938,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1942,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1946,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise MyError('configuration error: %s' % e) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise MyError('configuration error: %s' % e) from e'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1952,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1952,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1957,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1966,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1972,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1976,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1983,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1994,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1997,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2000,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2003,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2012,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2017,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (6/5)",
      "message": "too-many-arguments: Too many arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2017,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2017,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2030,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-return: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2031,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2035,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2037,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2043,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2049,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2056,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2090,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2093,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2106,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2112,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2122,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (14/12)",
      "message": "too-many-branches: Too many branches (14/12)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2112,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2151,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2169,
      "column_number": 32,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2176,
      "column_number": 36,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2152,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2193,
      "column_number": 32,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2217,
      "column_number": 17,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unnecessary pass statement",
      "message": "unnecessary-pass: Unnecessary pass statement",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2222,
      "column_number": 8,
      "rule_id": "W0107",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unnecessary-pass",
        "pylint_message_id": "W0107"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2224,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2227,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2230,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2233,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many public methods (28/20)",
      "message": "too-many-public-methods: Too many public methods (28/20)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 1913,
      "column_number": 0,
      "rule_id": "R0904",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-public-methods",
        "pylint_message_id": "R0904"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2252,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"Cmd_nm\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"Cmd_nm\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2252,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import outside toplevel (ansible.module_utils.network_lsr.nm.provider)",
      "message": "import-outside-toplevel: Import outside toplevel (ansible.module_utils.network_lsr.nm.provider)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2259,
      "column_number": 8,
      "rule_id": "C0415",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "import-outside-toplevel",
        "pylint_message_id": "C0415"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2266,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise MyError('failure loading libnm library: %s' % e) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise MyError('failure loading libnm library: %s' % e) from e'",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2271,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2271,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2290,
      "column_number": 32,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2300,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2366,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using a dictionary comprehension",
      "message": "consider-using-dict-comprehension: Consider using a dictionary comprehension",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2382,
      "column_number": 24,
      "rule_id": "R1717",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-dict-comprehension",
        "pylint_message_id": "R1717"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2396,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2417,
      "column_number": 31,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2456,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2463,
      "column_number": 40,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2466,
      "column_number": 21,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2473,
      "column_number": 40,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2477,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2538,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2544,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2556,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2563,
      "column_number": 12,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2582,
      "column_number": 36,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2591,
      "column_number": 36,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2602,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2617,
      "column_number": 39,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2638,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"Cmd_initscripts\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"Cmd_initscripts\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2638,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2651,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2655,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2661,
      "column_number": 32,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2692,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2721,
      "column_number": 35,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2727,
      "column_number": 27,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2729,
      "column_number": 33,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2735,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (13/12)",
      "message": "too-many-branches: Too many branches (13/12)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2695,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2766,
      "column_number": 31,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2771,
      "column_number": 27,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2779,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2800,
      "column_number": 36,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2807,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2818,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2824,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2838,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2844,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2854,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2858,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (13/12)",
      "message": "too-many-branches: Too many branches (13/12)",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2782,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2871,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2890,
      "column_number": 11,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_connections.py",
      "line_number": 2893,
      "column_number": 12,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import traceback\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import traceback\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 45,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule, missing_required_lib\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule, missing_required_lib\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 47,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 59,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"changed\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"changed\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 63,
      "column_number": 22,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 67,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 78,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 88,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"desired_state\": dict(type='dict', required=True)}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"desired_state\": dict(type='dict', required=True)}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 89,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'dict', \"required\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'dict', \"required\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 90,
      "column_number": 22,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/library/network_state.py",
      "line_number": 107,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
      "message": "useless-option-value: Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 149,
      "column_number": 0,
      "rule_id": "R0022",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-option-value",
        "pylint_message_id": "R0022"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (129/100)",
      "message": "line-too-long: Line too long (129/100)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1534,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1555,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (104/100)",
      "message": "line-too-long: Line too long (104/100)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1569,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many lines in module (2791/1000)",
      "message": "too-many-lines: Too many lines in module (2791/1000)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0302",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "too-many-lines",
        "pylint_message_id": "C0302"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "FIXME: Maybe this restriction can be removed. Need to make sure that",
      "message": "fixme: FIXME: Maybe this restriction can be removed. Need to make sure that",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2014,
      "column_number": 9,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "FIXME: Maybe just accept all values, even if they are not",
      "message": "fixme: FIXME: Maybe just accept all values, even if they are not",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2024,
      "column_number": 9,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "FIXME: Seems to be a duplicate check since \"wait\" will be removed from",
      "message": "fixme: FIXME: Seems to be a duplicate check since \"wait\" will be removed from",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2041,
      "column_number": 9,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 6,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 20,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 22,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 39,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 42,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 45,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 50,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 56,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 59,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 63,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 77,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 80,
      "column_number": 8,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 85,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too few public methods (1/2)",
      "message": "too-few-public-methods: Too few public methods (1/2)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 77,
      "column_number": 0,
      "rule_id": "R0903",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-few-public-methods",
        "pylint_message_id": "R0903"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 89,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 98,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 170,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (9/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (9/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 171,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-raise: Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 188,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-raise: Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 195,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 203,
      "column_number": 40,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 208,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 214,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 221,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 225,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 234,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 244,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 250,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 273,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 271,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 278,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-raise: Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 283,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 286,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 291,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 306,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (7/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (7/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 307,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 338,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 342,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 346,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 351,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 356,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 357,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Redefining built-in 'range'",
      "message": "redefined-builtin: Redefining built-in 'range'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 370,
      "column_number": 8,
      "rule_id": "W0622",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "redefined-builtin",
        "pylint_message_id": "W0622"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 376,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 381,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 391,
      "column_number": 40,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 401,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 409,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (13/12)",
      "message": "too-many-branches: Too many branches (13/12)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 369,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 417,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 427,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider merging these isinstance calls to isinstance(value, (Util.STRING_TYPE, int))",
      "message": "consider-merging-isinstance: Consider merging these isinstance calls to isinstance(value, (Util.STRING_TYPE, int))",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 425,
      "column_number": 15,
      "rule_id": "R1701",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-merging-isinstance",
        "pylint_message_id": "R1701"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 429,
      "column_number": 36,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 449,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (6/5)",
      "message": "too-many-arguments: Too many arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 450,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 450,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using a dictionary comprehension",
      "message": "consider-using-dict-comprehension: Consider using a dictionary comprehension",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 459,
      "column_number": 21,
      "rule_id": "R1717",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-dict-comprehension",
        "pylint_message_id": "R1717"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except AttributeError as exc' and 'raise ValidationError(name, 'invalid content is not a dictionary') from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except AttributeError as exc' and 'raise ValidationError(name, 'invalid content is not a dictionary') from exc'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 479,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'value'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'value'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 480,
      "column_number": 21,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except KeyError as exc' and 'raise ValidationError(name, \"invalid key '%s'\" % setting) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except KeyError as exc' and 'raise ValidationError(name, \"invalid key '%s'\" % setting) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 484,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 484,
      "column_number": 44,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 489,
      "column_number": 44,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate of a client class",
      "message": "protected-access: Access to a protected member _validate of a client class",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 492,
      "column_number": 34,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise ValidationError(e.name, e.error_message) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise ValidationError(e.name, e.error_message) from e'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 494,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 500,
      "column_number": 44,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 508,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 516,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 520,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate of a client class",
      "message": "protected-access: Access to a protected member _validate of a client class",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 550,
      "column_number": 21,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise ValidationError(e.name, e.error_message) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise ValidationError(e.name, e.error_message) from e'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 552,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 557,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (6/5)",
      "message": "too-many-arguments: Too many arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 558,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 558,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValidationError(name, \"value '%s' is not a valid IP%s address\" % (value, Util.addr_family_to_v(self.family))) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise ValidationError(name, \"value '%s' is not a valid IP%s address\" % (value, Util.addr_family_to_v(self.family))) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 570,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 572,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 580,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many arguments (6/5)",
      "message": "too-many-arguments: Too many arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 581,
      "column_number": 4,
      "rule_id": "R0913",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-arguments",
        "pylint_message_id": "R0913"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many positional arguments (6/5)",
      "message": "too-many-positional-arguments: Too many positional arguments (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 581,
      "column_number": 4,
      "rule_id": "R0917",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-positional-arguments",
        "pylint_message_id": "R0917"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 599,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except MyError as exc' and 'raise ValidationError(name, \"value '%s' is not a valid MAC address%s\" % (value, enum_ex)) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except MyError as exc' and 'raise ValidationError(name, \"value '%s' is not a valid MAC address%s\" % (value, enum_ex)) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 600,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 601,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 606,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 608,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 613,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise ValidationError(name, \"value '%s' is not a valid IP%s address with prefix length\" % (value, Util.addr_family_to_v(self.family))) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise ValidationError(name, \"value '%s' is not a valid IP%s address with prefix length\" % (value, Util.addr_family_to_v(self.family))) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 637,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 639,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 656,
      "column_number": 40,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 660,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 704,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 710,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 720,
      "column_number": 40,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 727,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 735,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 844,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 852,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 862,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (22/12)",
      "message": "too-many-branches: Too many branches (22/12)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 781,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 874,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictIP\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictIP\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 874,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1047,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictEthernet\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictEthernet\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1047,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1064,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using a dictionary comprehension",
      "message": "consider-using-dict-comprehension: Consider using a dictionary comprehension",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1065,
      "column_number": 15,
      "rule_id": "R1717",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-dict-comprehension",
        "pylint_message_id": "R1717"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1076,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1092,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictEthtool\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictEthtool\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1092,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1105,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictEthtoolFeatures\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictEthtoolFeatures\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1105,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1305,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictEthtoolCoalesce\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictEthtoolCoalesce\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1305,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1383,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictEthtoolRing\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictEthtoolRing\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1383,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1405,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictBond\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictBond\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1405,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"AD_OPTIONS\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"AD_OPTIONS\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1504,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"ARP_OPTIONS\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"ARP_OPTIONS\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1510,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"ARP_ONLY_MODE\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"ARP_ONLY_MODE\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1511,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1518,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1534,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (17/12)",
      "message": "too-many-branches: Too many branches (17/12)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1503,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1592,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1623,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictInfiniband\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictInfiniband\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1623,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1639,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1643,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictVlan\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictVlan\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1643,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1652,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1656,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictMacvlan\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictMacvlan\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1656,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1676,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1701,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1706,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_Dict802_1X\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_Dict802_1X\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1706,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1751,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictWireless\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictWireless\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1751,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1779,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1793,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider merging these comparisons with 'in' by using 'result in (['|'], ['&'])'. Use a set instead if elements are hashable.",
      "message": "consider-using-in: Consider merging these comparisons with 'in' by using 'result in (['|'], ['&'])'. Use a set instead if elements are hashable.",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1805,
      "column_number": 11,
      "rule_id": "R1714",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-in",
        "pylint_message_id": "R1714"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1808,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1815,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictMatch\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictMatch\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1815,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1832,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_DictConnection\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_DictConnection\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1832,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Attribute name \"VALID_FIELDS\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Attribute name \"VALID_FIELDS\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1948,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1962,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused argument 'value'",
      "message": "unused-argument: Unused argument 'value'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1950,
      "column_number": 35,
      "rule_id": "W0613",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-argument",
        "pylint_message_id": "W0613"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2031,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2046,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused argument 'value'",
      "message": "unused-argument: Unused argument 'value'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 1994,
      "column_number": 36,
      "rule_id": "W0613",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-argument",
        "pylint_message_id": "W0613"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2081,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused argument 'value'",
      "message": "unused-argument: Unused argument 'value'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2055,
      "column_number": 38,
      "rule_id": "W0613",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-argument",
        "pylint_message_id": "W0613"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2136,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2142,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2196,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2208,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2239,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2253,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2267,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2319,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2330,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2341,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Redefining argument with the local name 'name'",
      "message": "redefined-argument-from-local: Redefining argument with the local name 'name'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2354,
      "column_number": 12,
      "rule_id": "R1704",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "redefined-argument-from-local",
        "pylint_message_id": "R1704"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (65/12)",
      "message": "too-many-branches: Too many branches (65/12)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2087,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (120/50)",
      "message": "too-many-statements: Too many statements (120/50)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2087,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2364,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"ArgValidator_ListConnections\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"ArgValidator_ListConnections\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2364,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2383,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2389,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2404,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2418,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2426,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2438,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2442,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except MyError as exc' and 'raise ValidationError.from_connection(idx, \"profile references a parent '%s' which has 'interface_name' missing\" % connection['parent']) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except MyError as exc' and 'raise ValidationError.from_connection(idx, \"profile references a parent '%s' which has 'interface_name' missing\" % connection['parent']) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2480,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2482,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except MyError as exc' and 'raise ValidationError.from_connection(idx, \"profile references a controller '%s' which has 'interface_name' missing\" % connection['controller']) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except MyError as exc' and 'raise ValidationError.from_connection(idx, \"profile references a controller '%s' which has 'interface_name' missing\" % connection['controller']) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2492,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2494,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-raise: Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2588,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2620,
      "column_number": 16,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (50/12)",
      "message": "too-many-branches: Too many branches (50/12)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2442,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (78/50)",
      "message": "too-many-statements: Too many statements (78/50)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2442,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2708,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'IPRouteUtils' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'IPRouteUtils' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2708,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2766,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2771,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2783,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too few public methods (1/2)",
      "message": "too-few-public-methods: Too few public methods (1/2)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py",
      "line_number": 2708,
      "column_number": 0,
      "rule_id": "R0903",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-few-public-methods",
        "pylint_message_id": "R0903"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py",
      "line_number": 42,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py",
      "line_number": 48,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py",
      "line_number": 57,
      "column_number": 48,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable 'unused'",
      "message": "unused-variable: Unused variable 'unused'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py",
      "line_number": 57,
      "column_number": 8,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/myerror.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/myerror.py",
      "line_number": 6,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/myerror.py",
      "line_number": 9,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 22,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 98,
      "column_number": 11,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 78,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 93,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 103,
      "column_number": 12,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py",
      "line_number": 114,
      "column_number": 12,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Statement seems to have no effect",
      "message": "pointless-statement: Statement seems to have no effect",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 33,
      "column_number": 8,
      "rule_id": "W0104",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "pointless-statement",
        "pylint_message_id": "W0104"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Statement seems to have no effect",
      "message": "pointless-statement: Statement seems to have no effect",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 34,
      "column_number": 8,
      "rule_id": "W0104",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "pointless-statement",
        "pylint_message_id": "W0104"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Statement seems to have no effect",
      "message": "pointless-statement: Statement seems to have no effect",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 35,
      "column_number": 8,
      "rule_id": "W0104",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "pointless-statement",
        "pylint_message_id": "W0104"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 47,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class '_NmMainLoop' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class '_NmMainLoop' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 51,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 58,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 74,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 78,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 95,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 100,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py",
      "line_number": 105,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 19,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 49,
      "column_number": 11,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 52,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 62,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 69,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 102,
      "column_number": 11,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 105,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py",
      "line_number": 115,
      "column_number": 16,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/error.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/error.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/error.py",
      "line_number": 8,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 18,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 60,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 64,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 68,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using deprecated method warn()",
      "message": "deprecated-method: Using deprecated method warn()",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 83,
      "column_number": 8,
      "rule_id": "W4902",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "deprecated-method",
        "pylint_message_id": "W4902"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using deprecated method warn()",
      "message": "deprecated-method: Using deprecated method warn()",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py",
      "line_number": 89,
      "column_number": 8,
      "rule_id": "W4902",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "deprecated-method",
        "pylint_message_id": "W4902"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm_provider.py",
      "line_number": 6,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "FIXME: encoding issues regarding python unicode string",
      "message": "fixme: FIXME: encoding issues regarding python unicode string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 225,
      "column_number": 9,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 6,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 16,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 24,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 35,
      "column_number": 38,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 58,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 62,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"NM\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"NM\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 62,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import outside toplevel (gi)",
      "message": "import-outside-toplevel: Import outside toplevel (gi)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 68,
      "column_number": 12,
      "rule_id": "C0415",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "import-outside-toplevel",
        "pylint_message_id": "C0415"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import outside toplevel (gi.repository.NM, gi.repository.GLib, gi.repository.Gio, gi.repository.GObject)",
      "message": "import-outside-toplevel: Import outside toplevel (gi.repository.NM, gi.repository.GLib, gi.repository.Gio, gi.repository.GObject)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 71,
      "column_number": 12,
      "rule_id": "C0415",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "import-outside-toplevel",
        "pylint_message_id": "C0415"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 81,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"GLib\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"GLib\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 81,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 86,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"Gio\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"Gio\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 86,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 91,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"GObject\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"GObject\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 91,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 96,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"Timestamp\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"Timestamp\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 96,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 100,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"GMainLoop\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"GMainLoop\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 100,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 108,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"GMainLoop_run\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"GMainLoop_run\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 108,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"GLib\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"GLib\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 113,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 129,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"GMainLoop_iterate\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"GMainLoop_iterate\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 129,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 133,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Method name \"GMainLoop_iterate_all\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Method name \"GMainLoop_iterate_all\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 133,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 165,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 172,
      "column_number": 12,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 177,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 194,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 204,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Variable name \"GLib\" doesn't conform to snake_case naming style",
      "message": "invalid-name: Variable name \"GLib\" doesn't conform to snake_case naming style",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 205,
      "column_number": 8,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 215,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 229,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 240,
      "column_number": 34,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 249,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise MyError(\"not a valid MAC address: '%s'\" % mac_str) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise MyError(\"not a valid MAC address: '%s'\" % mac_str) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 254,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 254,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 256,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 260,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 265,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 269,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 272,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 276,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 288,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 291,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 303,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 309,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider merging these comparisons with 'in' by using 'family not in (socket.AF_INET, socket.AF_INET6)'. Use a set instead if elements are hashable.",
      "message": "consider-using-in: Consider merging these comparisons with 'in' by using 'family not in (socket.AF_INET, socket.AF_INET6)'. Use a set instead if elements are hashable.",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 310,
      "column_number": 11,
      "rule_id": "R1714",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-using-in",
        "pylint_message_id": "R1714"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 311,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 314,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 321,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 324,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 326,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 332,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Either all return statements in a function should return an expression, or none of them should.",
      "message": "inconsistent-return-statements: Either all return statements in a function should return an expression, or none of them should.",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 332,
      "column_number": 4,
      "rule_id": "R1710",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "inconsistent-return-statements",
        "pylint_message_id": "R1710"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 344,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Either all return statements in a function should return an expression, or none of them should.",
      "message": "inconsistent-return-statements: Either all return statements in a function should return an expression, or none of them should.",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 344,
      "column_number": 4,
      "rule_id": "R1710",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "inconsistent-return-statements",
        "pylint_message_id": "R1710"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 353,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Simplify chained comparison between the operands",
      "message": "chained-comparison: Simplify chained comparison between the operands",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 355,
      "column_number": 15,
      "rule_id": "R1716",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "chained-comparison",
        "pylint_message_id": "R1716"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 358,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 367,
      "column_number": 30,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise MyError(\"invalid address '%s'\" % address) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise MyError(\"invalid address '%s'\" % address) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 372,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 372,
      "column_number": 26,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many public methods (30/20)",
      "message": "too-many-public-methods: Too many public methods (30/20)",
      "file_path": ".ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py",
      "line_number": 16,
      "column_number": 0,
      "rule_id": "R0904",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-public-methods",
        "pylint_message_id": "R0904"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import yaml\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import yaml\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 43,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "Unable to import 'argument_validator'",
      "message": "import-error: Unable to import 'argument_validator'",
      "file_path": ".ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 56,
      "column_number": 8,
      "rule_id": "E0401",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "import-error",
        "pylint_message_id": "E0401"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 62,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (25/12)",
      "message": "too-many-branches: Too many branches (25/12)",
      "file_path": ".ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 62,
      "column_number": 0,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (52/50)",
      "message": "too-many-statements: Too many statements (52/50)",
      "file_path": ".ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 62,
      "column_number": 0,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 144,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Redefining name 'sorted_data' from outer scope (line 166)",
      "message": "redefined-outer-name: Redefining name 'sorted_data' from outer scope (line 166)",
      "file_path": ".ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 149,
      "column_number": 8,
      "rule_id": "W0621",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "redefined-outer-name",
        "pylint_message_id": "W0621"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.network/scripts/print_all_options.py",
      "line_number": 157,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
      "message": "useless-option-value: Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 635,
      "column_number": 0,
      "rule_id": "R0022",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-option-value",
        "pylint_message_id": "R0022"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
      "message": "useless-option-value: Useless option value for 'disable', 'no-self-use' was moved to an optional extension, see https://pylint.readthedocs.io/en/latest/whatsnew/2/2.14/summary.html#removed-checkers.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1514,
      "column_number": 0,
      "rule_id": "R0022",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-option-value",
        "pylint_message_id": "R0022"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (115/100)",
      "message": "line-too-long: Line too long (115/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 390,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (118/100)",
      "message": "line-too-long: Line too long (118/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 407,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (131/100)",
      "message": "line-too-long: Line too long (131/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 493,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 504,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (110/100)",
      "message": "line-too-long: Line too long (110/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 505,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 506,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 507,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (122/100)",
      "message": "line-too-long: Line too long (122/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 510,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (132/100)",
      "message": "line-too-long: Line too long (132/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 521,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 550,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 591,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (121/100)",
      "message": "line-too-long: Line too long (121/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 691,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 741,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (145/100)",
      "message": "line-too-long: Line too long (145/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 751,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (139/100)",
      "message": "line-too-long: Line too long (139/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 759,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 824,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 828,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (128/100)",
      "message": "line-too-long: Line too long (128/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 836,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (120/100)",
      "message": "line-too-long: Line too long (120/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 843,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (122/100)",
      "message": "line-too-long: Line too long (122/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 851,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 863,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 864,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (108/100)",
      "message": "line-too-long: Line too long (108/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 865,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 866,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (130/100)",
      "message": "line-too-long: Line too long (130/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 867,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (117/100)",
      "message": "line-too-long: Line too long (117/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 886,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (124/100)",
      "message": "line-too-long: Line too long (124/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 887,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 889,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 913,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 922,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (121/100)",
      "message": "line-too-long: Line too long (121/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 923,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (141/100)",
      "message": "line-too-long: Line too long (141/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 968,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 979,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (132/100)",
      "message": "line-too-long: Line too long (132/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1001,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (128/100)",
      "message": "line-too-long: Line too long (128/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1009,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1017,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (150/100)",
      "message": "line-too-long: Line too long (150/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1037,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (145/100)",
      "message": "line-too-long: Line too long (145/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1055,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (129/100)",
      "message": "line-too-long: Line too long (129/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1056,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (143/100)",
      "message": "line-too-long: Line too long (143/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1057,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (150/100)",
      "message": "line-too-long: Line too long (150/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1058,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (107/100)",
      "message": "line-too-long: Line too long (107/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1082,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (114/100)",
      "message": "line-too-long: Line too long (114/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1083,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (107/100)",
      "message": "line-too-long: Line too long (107/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1087,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (107/100)",
      "message": "line-too-long: Line too long (107/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1091,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1133,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (107/100)",
      "message": "line-too-long: Line too long (107/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1139,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1151,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (126/100)",
      "message": "line-too-long: Line too long (126/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1154,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1163,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (123/100)",
      "message": "line-too-long: Line too long (123/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1196,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (150/100)",
      "message": "line-too-long: Line too long (150/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1219,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (141/100)",
      "message": "line-too-long: Line too long (141/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1223,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1256,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (109/100)",
      "message": "line-too-long: Line too long (109/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1310,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (134/100)",
      "message": "line-too-long: Line too long (134/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1311,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (126/100)",
      "message": "line-too-long: Line too long (126/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1322,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (114/100)",
      "message": "line-too-long: Line too long (114/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1355,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (145/100)",
      "message": "line-too-long: Line too long (145/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1384,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (129/100)",
      "message": "line-too-long: Line too long (129/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1385,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (143/100)",
      "message": "line-too-long: Line too long (143/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1386,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (150/100)",
      "message": "line-too-long: Line too long (150/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1387,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (114/100)",
      "message": "line-too-long: Line too long (114/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1415,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1416,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1425,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1446,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (140/100)",
      "message": "line-too-long: Line too long (140/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1534,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1568,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1569,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1583,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1593,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (115/100)",
      "message": "line-too-long: Line too long (115/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1617,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (108/100)",
      "message": "line-too-long: Line too long (108/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1640,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (123/100)",
      "message": "line-too-long: Line too long (123/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1693,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1718,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (110/100)",
      "message": "line-too-long: Line too long (110/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1719,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (126/100)",
      "message": "line-too-long: Line too long (126/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1767,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (119/100)",
      "message": "line-too-long: Line too long (119/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1774,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1791,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1792,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (115/100)",
      "message": "line-too-long: Line too long (115/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1815,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (110/100)",
      "message": "line-too-long: Line too long (110/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1850,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1862,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1865,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1899,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (111/100)",
      "message": "line-too-long: Line too long (111/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1905,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1915,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1916,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1917,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1939,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1943,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1958,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (111/100)",
      "message": "line-too-long: Line too long (111/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1999,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2017,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (117/100)",
      "message": "line-too-long: Line too long (117/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2032,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (120/100)",
      "message": "line-too-long: Line too long (120/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2033,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (134/100)",
      "message": "line-too-long: Line too long (134/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2034,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (104/100)",
      "message": "line-too-long: Line too long (104/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2037,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (126/100)",
      "message": "line-too-long: Line too long (126/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2038,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (119/100)",
      "message": "line-too-long: Line too long (119/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2039,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (104/100)",
      "message": "line-too-long: Line too long (104/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2044,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (126/100)",
      "message": "line-too-long: Line too long (126/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2045,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (119/100)",
      "message": "line-too-long: Line too long (119/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2046,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2049,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (149/100)",
      "message": "line-too-long: Line too long (149/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2249,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2347,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (105/100)",
      "message": "line-too-long: Line too long (105/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2391,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (107/100)",
      "message": "line-too-long: Line too long (107/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2473,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2513,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2545,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many lines in module (2560/1000)",
      "message": "too-many-lines: Too many lines in module (2560/1000)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0302",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "too-many-lines",
        "pylint_message_id": "C0302"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "XXX add support for LVM RAID raid0 level",
      "message": "fixme: XXX add support for LVM RAID raid0 level",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 437,
      "column_number": 5,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "XXX: blivet has to store cipher, key_size, luks_version for existing before we",
      "message": "fixme: XXX: blivet has to store cipher, key_size, luks_version for existing before we",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 533,
      "column_number": 9,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "XXX If we have no key we will always re-encrypt.",
      "message": "fixme: XXX If we have no key we will always re-encrypt.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 657,
      "column_number": 13,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "TODO: see if we can create this device w/ the specified name",
      "message": "fixme: TODO: see if we can create this device w/ the specified name",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 675,
      "column_number": 21,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "XXX fail if any disk isn't resolved?",
      "message": "fixme: XXX fail if any disk isn't resolved?",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1530,
      "column_number": 37,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "TODO: see if we can create this device w/ the specified name",
      "message": "fixme: TODO: see if we can create this device w/ the specified name",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1549,
      "column_number": 21,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "XXX: scheduling ActionRemoveMember is currently broken, we need to execute",
      "message": "fixme: XXX: scheduling ActionRemoveMember is currently broken, we need to execute",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1909,
      "column_number": 17,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "XXX workaround for https://github.com/storaged-project/blivet/pull/1040",
      "message": "fixme: XXX workaround for https://github.com/storaged-project/blivet/pull/1040",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1918,
      "column_number": 13,
      "rule_id": "W0511",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "fixme",
        "pylint_message_id": "W0511"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 4,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import copy\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import copy\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 375,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import logging\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import logging\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 376,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import os\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import os\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 377,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import traceback\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import traceback\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 378,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import inspect\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import inspect\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 379,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Module import itself",
      "message": "import-self: Module import itself",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 403,
      "column_number": 8,
      "rule_id": "W0406",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "import-self",
        "pylint_message_id": "W0406"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Module import itself",
      "message": "import-self: Module import itself",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 405,
      "column_number": 8,
      "rule_id": "W0406",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "import-self",
        "pylint_message_id": "W0406"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Module import itself",
      "message": "import-self: Module import itself",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 406,
      "column_number": 8,
      "rule_id": "W0406",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "import-self",
        "pylint_message_id": "W0406"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 421,
      "column_number": 8,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'FakeDevices' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'FakeDevices' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 421,
      "column_number": 8,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too few public methods (1/2)",
      "message": "too-few-public-methods: Too few public methods (1/2)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 421,
      "column_number": 8,
      "rule_id": "R0903",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-few-public-methods",
        "pylint_message_id": "R0903"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 426,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "Unable to import 'ansible.module_utils.storage_lsr.argument_validator'",
      "message": "import-error: Unable to import 'ansible.module_utils.storage_lsr.argument_validator'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 427,
      "column_number": 0,
      "rule_id": "E0401",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "import-error",
        "pylint_message_id": "E0401"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.storage_lsr.argument_validator import validate_parameters\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.storage_lsr.argument_validator import validate_parameters\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 427,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "No name 'storage_lsr' in module 'ansible.module_utils'",
      "message": "no-name-in-module: No name 'storage_lsr' in module 'ansible.module_utils'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 427,
      "column_number": 0,
      "rule_id": "E0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "no-name-in-module",
        "pylint_message_id": "E0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Constant name \"use_partitions\" doesn't conform to UPPER_CASE naming style",
      "message": "invalid-name: Constant name \"use_partitions\" doesn't conform to UPPER_CASE naming style",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 445,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Constant name \"disklabel_type\" doesn't conform to UPPER_CASE naming style",
      "message": "invalid-name: Constant name \"disklabel_type\" doesn't conform to UPPER_CASE naming style",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 446,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Constant name \"safe_mode\" doesn't conform to UPPER_CASE naming style",
      "message": "invalid-name: Constant name \"safe_mode\" doesn't conform to UPPER_CASE naming style",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 447,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 448,
      "column_number": 16,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 449,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 457,
      "column_number": 12,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 458,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 468,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 472,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'BlivetBase' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'BlivetBase' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 472,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 490,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _name of a client class",
      "message": "protected-access: Access to a protected member _name of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 490,
      "column_number": 36,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 493,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _name of a client class",
      "message": "protected-access: Access to a protected member _name of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 494,
      "column_number": 41,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 510,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 521,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _name of a client class",
      "message": "protected-access: Access to a protected member _name of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 522,
      "column_number": 41,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 544,
      "column_number": 8,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except RaidError as exc' and 'raise BlivetAnsibleError('%s is not a valid RAID level' % raid_level) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except RaidError as exc' and 'raise BlivetAnsibleError('%s is not a valid RAID level' % raid_level) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 547,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 547,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 550,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 563,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"cannot create RAID '%s': %s\" % (raid_name, str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"cannot create RAID '%s': %s\" % (raid_name, str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 594,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 594,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too few public methods (0/2)",
      "message": "too-few-public-methods: Too few public methods (0/2)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 472,
      "column_number": 0,
      "rule_id": "R0903",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-few-public-methods",
        "pylint_message_id": "R0903"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 599,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 603,
      "column_number": 8,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 611,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 612,
      "column_number": 19,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _packages of a client class",
      "message": "protected-access: Access to a protected member _packages of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 617,
      "column_number": 28,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _key_file of a client class",
      "message": "protected-access: Access to a protected member _key_file of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 658,
      "column_number": 12,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _key_file of a client class",
      "message": "protected-access: Access to a protected member _key_file of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 662,
      "column_number": 12,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (13/12)",
      "message": "too-many-branches: Too many branches (13/12)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 680,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 716,
      "column_number": 73,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 716,
      "column_number": 81,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 741,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise BlivetAnsibleError(\"invalid percentage '%s' size specified for volume '%s'\" % (self._volume['size'], self._volume['name'])) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except ValueError as exc' and 'raise BlivetAnsibleError(\"invalid percentage '%s' size specified for volume '%s'\" % (self._volume['size'], self._volume['name'])) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 751,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 751,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 753,
      "column_number": 21,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"invalid size specification for volume '%s': '%s'\" % (self._volume['name'], self._volume['size'])) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"invalid size specification for volume '%s': '%s'\" % (self._volume['name'], self._volume['size'])) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 759,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 759,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unnecessary pass statement",
      "message": "unnecessary-pass: Unnecessary pass statement",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 765,
      "column_number": 8,
      "rule_id": "W0107",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unnecessary-pass",
        "pylint_message_id": "W0107"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 824,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 828,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to unmount '%s' to allow offline resize: %s\" % (self._device.name, str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to unmount '%s' to allow offline resize: %s\" % (self._device.name, str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 836,
      "column_number": 20,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 836,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _resize_support of a client class",
      "message": "protected-access: Access to a protected member _resize_support of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 842,
      "column_number": 27,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _resize_support of a client class",
      "message": "protected-access: Access to a protected member _resize_support of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 850,
      "column_number": 27,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"volume '%s' cannot be resized from %s to %s: %s\" % (self._device.name, self._device.size, size, str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"volume '%s' cannot be resized from %s to %s: %s\" % (self._device.name, self._device.size, size, str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 863,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 863,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 867,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (21/12)",
      "message": "too-many-branches: Too many branches (21/12)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 786,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (51/50)",
      "message": "too-many-statements: Too many statements (51/50)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 786,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 887,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 913,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 923,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 935,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 945,
      "column_number": 14,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 961,
      "column_number": 8,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-raise: Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 962,
      "column_number": 8,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 963,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 968,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 971,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _disks of a client class",
      "message": "protected-access: Access to a protected member _disks of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 979,
      "column_number": 11,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _disks of a client class",
      "message": "protected-access: Access to a protected member _disks of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 979,
      "column_number": 59,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _disks of a client class",
      "message": "protected-access: Access to a protected member _disks of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 980,
      "column_number": 24,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 996,
      "column_number": 21,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1001,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"failed set up volume '%s'\" % self._volume['name']) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"failed set up volume '%s'\" % self._volume['name']) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1011,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1011,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"partition allocation failed for volume '%s'\" % self._volume['name']) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"partition allocation failed for volume '%s'\" % self._volume['name']) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1017,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1017,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1022,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1026,
      "column_number": 15,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1028,
      "column_number": 15,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1028,
      "column_number": 26,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise BlivetAnsibleError(\"invalid percentage '%s' size specified for thin volume '%s'\" % (self._volume['size'], self._volume['name'])) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except ValueError as exc' and 'raise BlivetAnsibleError(\"invalid percentage '%s' size specified for thin volume '%s'\" % (self._volume['size'], self._volume['name'])) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1037,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1037,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1042,
      "column_number": 19,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1045,
      "column_number": 19,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1054,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1055,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1070,
      "column_number": 24,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except BlivetAnsibleError as exc' and 'raise BlivetAnsibleError(\"specified 'vdo_pool_size' for volume '%s' exceeds available space in pool '%s' (%s)\" % (pool_size, parent_device.name, parent_device.free_space)) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except BlivetAnsibleError as exc' and 'raise BlivetAnsibleError(\"specified 'vdo_pool_size' for volume '%s' exceeds available space in pool '%s' (%s)\" % (pool_size, parent_device.name, parent_device.free_space)) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1080,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1080,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up VDO pool '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up VDO pool '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1091,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1091,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"vdo_lv\": True, \"parents\": [vdopool]}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"vdo_lv\": True, \"parents\": [vdopool]}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1095,
      "column_number": 15,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1099,
      "column_number": 24,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1102,
      "column_number": 18,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1112,
      "column_number": 49,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1115,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"seg_type\": self._volume['raid_level'], \"pvs\": pvs, \"stripe_size\": stripe_size, ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"seg_type\": self._volume['raid_level'], \"pvs\": pvs, \"stripe_size\": stripe_size, ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1124,
      "column_number": 19,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"seg_type\": self._volume['raid_level'], \"pvs\": pvs}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"seg_type\": self._volume['raid_level'], \"pvs\": pvs}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1126,
      "column_number": 15,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to detach cache from volume '%s': %s\" % (self._device.name, str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to detach cache from volume '%s': %s\" % (self._device.name, str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1133,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1133,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1139,
      "column_number": 62,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1144,
      "column_number": 17,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1149,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1154,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1167,
      "column_number": 45,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"cache_request\": cache_request}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"cache_request\": cache_request}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1190,
      "column_number": 15,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1195,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _thinpools of a client class",
      "message": "protected-access: Access to a protected member _thinpools of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1195,
      "column_number": 19,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1196,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _thinpools of a client class",
      "message": "protected-access: Access to a protected member _thinpools of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1198,
      "column_number": 23,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _thinpools of a client class",
      "message": "protected-access: Access to a protected member _thinpools of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1200,
      "column_number": 21,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1209,
      "column_number": 11,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1209,
      "column_number": 41,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1219,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1221,
      "column_number": 28,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1223,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1223,
      "column_number": 87,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"fmt\": self._get_format(), \"name\": self._volume['name'], \"parents\": [parent_device], ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"fmt\": self._get_format(), \"name\": self._volume['name'], \"parents\": [parent_device], ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1232,
      "column_number": 26,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"thin_volume\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"thin_volume\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1238,
      "column_number": 29,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up volume '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up volume '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1256,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1256,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (13/12)",
      "message": "too-many-branches: Too many branches (13/12)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1205,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1262,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1265,
      "column_number": 18,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1299,
      "column_number": 19,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1310,
      "column_number": 16,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1311,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to allocate partitions for mdraid '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to allocate partitions for mdraid '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1322,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1322,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1354,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1358,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1368,
      "column_number": 15,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1370,
      "column_number": 15,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1370,
      "column_number": 26,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1373,
      "column_number": 15,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1375,
      "column_number": 19,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1383,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1384,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1413,
      "column_number": 24,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1415,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _device of a client class",
      "message": "protected-access: Access to a protected member _device of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1415,
      "column_number": 83,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up volume '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up volume '%s': %s\" % (self._volume['name'], str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1425,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1425,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _pool of a client class",
      "message": "protected-access: Access to a protected member _pool of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1444,
      "column_number": 22,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1446,
      "column_number": 33,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1452,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Method '_get_format' is abstract in class 'BlivetBase' but is not overridden in child class 'BlivetPool'",
      "message": "abstract-method: Method '_get_format' is abstract in class 'BlivetBase' but is not overridden in child class 'BlivetPool'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1452,
      "column_number": 0,
      "rule_id": "W0223",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "abstract-method",
        "pylint_message_id": "W0223"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1456,
      "column_number": 8,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1457,
      "column_number": 22,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1458,
      "column_number": 31,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1465,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1466,
      "column_number": 19,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _packages of a client class",
      "message": "protected-access: Access to a protected member _packages of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1468,
      "column_number": 28,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unnecessary pass statement",
      "message": "unnecessary-pass: Unnecessary pass statement",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1488,
      "column_number": 8,
      "rule_id": "W0107",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unnecessary-pass",
        "pylint_message_id": "W0107"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-raise: Unnecessary \"elif\" after \"raise\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1522,
      "column_number": 8,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1523,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1527,
      "column_number": 16,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1534,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1601,
      "column_number": 69,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1601,
      "column_number": 77,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1615,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1617,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"failed to allocate partitions for pool '%s'\" % self._pool['name']) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"failed to allocate partitions for pool '%s'\" % self._pool['name']) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1640,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1640,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1646,
      "column_number": 18,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1653,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-return: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1687,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1692,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1693,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1706,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Method '_get_format' is abstract in class 'BlivetBase' but is not overridden in child class 'BlivetPartitionPool'",
      "message": "abstract-method: Method '_get_format' is abstract in class 'BlivetBase' but is not overridden in child class 'BlivetPartitionPool'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1706,
      "column_number": 0,
      "rule_id": "W0223",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "abstract-method",
        "pylint_message_id": "W0223"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-raise: Unnecessary \"else\" after \"raise\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1717,
      "column_number": 12,
      "rule_id": "R1720",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-raise",
        "pylint_message_id": "R1720"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1718,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1727,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-return: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1737,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1752,
      "column_number": 26,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (24/15)",
      "message": "too-many-locals: Too many local variables (24/15)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1758,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise BlivetAnsibleError(\"invalid percentage '%s' size specified in pool '%s'\" % (spec, pool_device.name)) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except ValueError as exc' and 'raise BlivetAnsibleError(\"invalid percentage '%s' size specified in pool '%s'\" % (spec, pool_device.name)) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1767,
      "column_number": 20,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1767,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"invalid size specification '%s' in pool '%s'\" % (spec, pool_device.name)) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except Exception as exc' and 'raise BlivetAnsibleError(\"invalid size specification '%s' in pool '%s'\" % (spec, pool_device.name)) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1774,
      "column_number": 20,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1774,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1780,
      "column_number": 27,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1787,
      "column_number": 28,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1788,
      "column_number": 26,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"thin_pool\": True, \"size\": tlv_size, \"parents\": [pool_device]}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"thin_pool\": True, \"size\": tlv_size, \"parents\": [pool_device]}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1842,
      "column_number": 28,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"name\": thinlv['name']}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"name\": thinlv['name']}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1845,
      "column_number": 37,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up thin pool '%s': %s\" % (self._pool['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up thin pool '%s': %s\" % (self._pool['name'], str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1850,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1850,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (20/12)",
      "message": "too-many-branches: Too many branches (20/12)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1758,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (63/50)",
      "message": "too-many-statements: Too many statements (63/50)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1758,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1883,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to add disk '%s' to pool '%s': %s\" % (disk.name, self._pool['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to add disk '%s' to pool '%s': %s\" % (disk.name, self._pool['name'], str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1898,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1898,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1904,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to remove member '%s' from pool '%s': %s\" % (pv.name, self._pool['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to remove member '%s' from pool '%s': %s\" % (pv.name, self._pool['name'], str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1915,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1915,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (16/12)",
      "message": "too-many-branches: Too many branches (16/12)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1856,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up pool '%s': %s\" % (self._pool['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up pool '%s': %s\" % (self._pool['name'], str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1943,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1943,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1951,
      "column_number": 26,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using Python 3 style super() without arguments",
      "message": "super-with-arguments: Consider using Python 3 style super() without arguments",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1952,
      "column_number": 8,
      "rule_id": "R1725",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "super-with-arguments",
        "pylint_message_id": "R1725"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Attribute '_thinpools' defined outside __init__",
      "message": "attribute-defined-outside-init: Attribute '_thinpools' defined outside __init__",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1948,
      "column_number": 8,
      "rule_id": "W0201",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "attribute-defined-outside-init",
        "pylint_message_id": "W0201"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Attribute '_thinpools' defined outside __init__",
      "message": "attribute-defined-outside-init: Attribute '_thinpools' defined outside __init__",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1951,
      "column_number": 8,
      "rule_id": "W0201",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "attribute-defined-outside-init",
        "pylint_message_id": "W0201"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Attribute '_thinpools' defined outside __init__",
      "message": "attribute-defined-outside-init: Attribute '_thinpools' defined outside __init__",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1954,
      "column_number": 12,
      "rule_id": "W0201",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "attribute-defined-outside-init",
        "pylint_message_id": "W0201"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1957,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _clevis of a client class",
      "message": "protected-access: Access to a protected member _clevis of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1972,
      "column_number": 50,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _clevis of a client class",
      "message": "protected-access: Access to a protected member _clevis of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1974,
      "column_number": 48,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _clevis of a client class",
      "message": "protected-access: Access to a protected member _clevis of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1976,
      "column_number": 55,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-return: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 1986,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2002,
      "column_number": 37,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to add disk '%s' to pool '%s': %s\" % (disk.name, self._pool['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to add disk '%s' to pool '%s': %s\" % (disk.name, self._pool['name'], str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2016,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2016,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up pool '%s': %s\" % (self._pool['name'], str(e))) from e'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'raise BlivetAnsibleError(\"failed to set up pool '%s': %s\" % (self._pool['name'], str(e))) from e'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2049,
      "column_number": 16,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2049,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2068,
      "column_number": 33,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _volume of a client class",
      "message": "protected-access: Access to a protected member _volume of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2077,
      "column_number": 24,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _volume of a client class",
      "message": "protected-access: Access to a protected member _volume of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2078,
      "column_number": 28,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _volume of a client class",
      "message": "protected-access: Access to a protected member _volume of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2079,
      "column_number": 26,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _blivet_volumes of a client class",
      "message": "protected-access: Access to a protected member _blivet_volumes of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2086,
      "column_number": 50,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _volume of a client class",
      "message": "protected-access: Access to a protected member _volume of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2087,
      "column_number": 28,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _volume of a client class",
      "message": "protected-access: Access to a protected member _volume of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2088,
      "column_number": 32,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _volume of a client class",
      "message": "protected-access: Access to a protected member _volume of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2089,
      "column_number": 30,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2092,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'FSTab' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'FSTab' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2092,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2095,
      "column_number": 24,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2098,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2101,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2102,
      "column_number": 24,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2104,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2108,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"device_id\": fields[0], \"device_path\": getattr(device, 'path', None), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"device_id\": fields[0], \"device_path\": getattr(device, 'path', None), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2118,
      "column_number": 37,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2136,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2137,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"path\": mount['mount_point'], \"state\": 'absent'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"path\": mount['mount_point'], \"state\": 'absent'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2159,
      "column_number": 22,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (14/12)",
      "message": "too-many-branches: Too many branches (14/12)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2125,
      "column_number": 0,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2197,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2198,
      "column_number": 11,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"backing_device\": action.device.path, \"name\": action.format.map_name, ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"backing_device\": action.device.path, \"name\": action.format.map_name, ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2203,
      "column_number": 20,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2211,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2212,
      "column_number": 15,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _get_volumes of a client class",
      "message": "protected-access: Access to a protected member _get_volumes of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2216,
      "column_number": 8,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _blivet_volumes of a client class",
      "message": "protected-access: Access to a protected member _blivet_volumes of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2217,
      "column_number": 23,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2249,
      "column_number": 41,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2276,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Redefining built-in 'input'",
      "message": "redefined-builtin: Redefining built-in 'input'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2276,
      "column_number": 32,
      "rule_id": "W0622",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "redefined-builtin",
        "pylint_message_id": "W0622"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2308,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Redefining built-in 'input'",
      "message": "redefined-builtin: Redefining built-in 'input'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2308,
      "column_number": 37,
      "rule_id": "W0622",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "redefined-builtin",
        "pylint_message_id": "W0622"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2321,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (20/15)",
      "message": "too-many-locals: Too many local variables (20/15)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2321,
      "column_number": 0,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"encryption\": dict(type='bool'), \"encryption_cipher\": dict(type='str'), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"encryption\": dict(type='bool'), \"encryption_cipher\": dict(type='str'), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2330,
      "column_number": 25,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2330,
      "column_number": 41,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2331,
      "column_number": 48,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"no_log\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"no_log\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2332,
      "column_number": 45,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2333,
      "column_number": 50,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2334,
      "column_number": 54,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"no_log\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"no_log\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2335,
      "column_number": 50,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2336,
      "column_number": 48,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2337,
      "column_number": 39,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2338,
      "column_number": 38,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2339,
      "column_number": 44,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2340,
      "column_number": 42,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2341,
      "column_number": 41,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2342,
      "column_number": 42,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2343,
      "column_number": 41,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2344,
      "column_number": 35,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2345,
      "column_number": 41,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2346,
      "column_number": 35,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"default\": 'present', \"choices\": ['present', 'absent'], ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"default\": 'present', \"choices\": ['present', 'absent'], ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2347,
      "column_number": 36,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2348,
      "column_number": 35,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"disks\": dict(type='list', elements='str', default=list()), \"raid_device_count\": dict(type='int'), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"disks\": dict(type='list', elements='str', default=list()), \"raid_device_count\": dict(type='int'), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2351,
      "column_number": 8,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2351,
      "column_number": 19,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2351,
      "column_number": 61,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2352,
      "column_number": 31,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2353,
      "column_number": 30,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2354,
      "column_number": 35,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2355,
      "column_number": 29,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"cached\": dict(type='bool'), \"cache_devices\": dict(type='list', elements='str', default=list()), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"cached\": dict(type='bool'), \"cache_devices\": dict(type='list', elements='str', default=list()), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2358,
      "column_number": 8,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2358,
      "column_number": 20,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2359,
      "column_number": 27,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2359,
      "column_number": 69,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2360,
      "column_number": 24,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2361,
      "column_number": 24,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2362,
      "column_number": 25,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2363,
      "column_number": 27,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2364,
      "column_number": 24,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2364,
      "column_number": 66,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2365,
      "column_number": 30,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2366,
      "column_number": 28,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2367,
      "column_number": 28,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool', \"default\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool', \"default\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2368,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2369,
      "column_number": 27,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"pools\": dict(type='list', elements='dict', options=dict(disks=dict(type='list', elements='str', default=list()), encryption=dict(type='bool'), encryption_cipher=dict(type='str'), encryption_key=dict(type='str', no_log=False), encryption_key_size=dict(type='int'), encryption_luks_version=dict(type='str'), encryption_password=dict(type='str', no_log=True), encryption_clevis_pin=dict(type='str'), encryption_tang_url=dict(type='str'), encryption_tang_thumbprint=dict(type='str'), grow_to_fill=dict(type='bool'), name=dict(type='str'), raid_level=dict(type='str'), raid_device_count=dict(type='int'), raid_spare_count=dict(type='int'), raid_metadata_version=dict(type='str'), raid_chunk_size=dict(type='str'), shared=dict(type='bool'), state=dict(type='str', default='present', choices=['present', 'absent']), type=dict(type='str'), volumes=dict(type='list', elements='dict', default=list(), options=pool_volume_opts))), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"pools\": dict(type='list', elements='dict', options=dict(disks=dict(type='list', elements='str', default=list()), encryption=dict(type='bool'), encryption_cipher=dict(type='str'), encryption_key=dict(type='str', no_log=False), encryption_key_size=dict(type='int'), encryption_luks_version=dict(type='str'), encryption_password=dict(type='str', no_log=True), encryption_clevis_pin=dict(type='str'), encryption_tang_url=dict(type='str'), encryption_tang_thumbprint=dict(type='str'), grow_to_fill=dict(type='bool'), name=dict(type='str'), raid_level=dict(type='str'), raid_device_count=dict(type='int'), raid_spare_count=dict(type='int'), raid_metadata_version=dict(type='str'), raid_chunk_size=dict(type='str'), shared=dict(type='bool'), state=dict(type='str', default='present', choices=['present', 'absent']), type=dict(type='str'), volumes=dict(type='list', elements='dict', default=list(), options=pool_volume_opts))), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2371,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'dict', \"options\": dict(disks=dict(type='list', elements='str', default=list()), encryption=dict(type='bool'), encryption_cipher=dict(type='str'), encryption_key=dict(type='str', no_log=False), encryption_key_size=dict(type='int'), encryption_luks_version=dict(type='str'), encryption_password=dict(type='str', no_log=True), encryption_clevis_pin=dict(type='str'), encryption_tang_url=dict(type='str'), encryption_tang_thumbprint=dict(type='str'), grow_to_fill=dict(type='bool'), name=dict(type='str'), raid_level=dict(type='str'), raid_device_count=dict(type='int'), raid_spare_count=dict(type='int'), raid_metadata_version=dict(type='str'), raid_chunk_size=dict(type='str'), shared=dict(type='bool'), state=dict(type='str', default='present', choices=['present', 'absent']), type=dict(type='str'), volumes=dict(type='list', elements='dict', default=list(), options=pool_volume_opts)), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'dict', \"options\": dict(disks=dict(type='list', elements='str', default=list()), encryption=dict(type='bool'), encryption_cipher=dict(type='str'), encryption_key=dict(type='str', no_log=False), encryption_key_size=dict(type='int'), encryption_luks_version=dict(type='str'), encryption_password=dict(type='str', no_log=True), encryption_clevis_pin=dict(type='str'), encryption_tang_url=dict(type='str'), encryption_tang_thumbprint=dict(type='str'), grow_to_fill=dict(type='bool'), name=dict(type='str'), raid_level=dict(type='str'), raid_device_count=dict(type='int'), raid_spare_count=dict(type='int'), raid_metadata_version=dict(type='str'), raid_chunk_size=dict(type='str'), shared=dict(type='bool'), state=dict(type='str', default='present', choices=['present', 'absent']), type=dict(type='str'), volumes=dict(type='list', elements='dict', default=list(), options=pool_volume_opts)), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2372,
      "column_number": 14,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"disks\": dict(type='list', elements='str', default=list()), \"encryption\": dict(type='bool'), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"disks\": dict(type='list', elements='str', default=list()), \"encryption\": dict(type='bool'), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2373,
      "column_number": 27,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'str', \"default\": list()}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2373,
      "column_number": 38,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2373,
      "column_number": 80,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2374,
      "column_number": 43,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2375,
      "column_number": 50,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"no_log\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"no_log\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2376,
      "column_number": 47,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2377,
      "column_number": 52,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2378,
      "column_number": 56,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"no_log\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"no_log\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2379,
      "column_number": 52,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2380,
      "column_number": 54,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2381,
      "column_number": 52,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2382,
      "column_number": 59,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2383,
      "column_number": 45,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2384,
      "column_number": 37,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2385,
      "column_number": 43,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2386,
      "column_number": 50,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2387,
      "column_number": 49,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2388,
      "column_number": 54,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2389,
      "column_number": 48,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2390,
      "column_number": 39,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"default\": 'present', \"choices\": ['present', 'absent'], ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"default\": 'present', \"choices\": ['present', 'absent'], ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2391,
      "column_number": 38,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2392,
      "column_number": 37,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'dict', \"default\": list(), \"options\": pool_volume_opts, ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'dict', \"default\": list(), \"options\": pool_volume_opts, ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2393,
      "column_number": 40,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2393,
      "column_number": 83,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'list', \"elements\": 'dict', \"options\": volume_opts}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'list', \"elements\": 'dict', \"options\": volume_opts}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2395,
      "column_number": 16,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool', \"required\": False, \"default\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool', \"required\": False, \"default\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2397,
      "column_number": 22,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": False, \"default\": None}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": False, \"default\": None}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2398,
      "column_number": 23,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool', \"required\": False, \"default\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool', \"required\": False, \"default\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2399,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'dict', \"required\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'dict', \"required\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2400,
      "column_number": 22,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'dict', \"required\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'dict', \"required\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2401,
      "column_number": 24,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool', \"required\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool', \"required\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2402,
      "column_number": 23,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'dict', \"required\": False, \"default\": {}}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'dict', \"required\": False, \"default\": {}}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2403,
      "column_number": 35,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool', \"required\": False, \"default\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool', \"required\": False, \"default\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2404,
      "column_number": 23,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"changed\": False, \"actions\": list(), \"leaves\": list(), \"mounts\": list(), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"changed\": False, \"actions\": list(), \"leaves\": list(), \"mounts\": list(), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2411,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2413,
      "column_number": 16,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2414,
      "column_number": 15,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2415,
      "column_number": 15,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2416,
      "column_number": 15,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2417,
      "column_number": 14,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2418,
      "column_number": 16,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2419,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2428,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using the global statement",
      "message": "global-statement: Using the global statement",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2443,
      "column_number": 4,
      "rule_id": "W0603",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-statement",
        "pylint_message_id": "W0603"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using the global statement",
      "message": "global-statement: Using the global statement",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2446,
      "column_number": 4,
      "rule_id": "W0603",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-statement",
        "pylint_message_id": "W0603"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using the global statement",
      "message": "global-statement: Using the global statement",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2449,
      "column_number": 4,
      "rule_id": "W0603",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-statement",
        "pylint_message_id": "W0603"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Global variable 'diskvolume_mkfs_option_map' undefined at the module level",
      "message": "global-variable-undefined: Global variable 'diskvolume_mkfs_option_map' undefined at the module level",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2452,
      "column_number": 4,
      "rule_id": "W0601",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-variable-undefined",
        "pylint_message_id": "W0601"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using the global statement",
      "message": "global-statement: Using the global statement",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2455,
      "column_number": 4,
      "rule_id": "W0603",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-statement",
        "pylint_message_id": "W0603"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using the global statement",
      "message": "global-statement: Using the global statement",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2459,
      "column_number": 4,
      "rule_id": "W0603",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-statement",
        "pylint_message_id": "W0603"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Global variable 'uses_kmod_kvdo' undefined at the module level",
      "message": "global-variable-undefined: Global variable 'uses_kmod_kvdo' undefined at the module level",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2463,
      "column_number": 4,
      "rule_id": "W0601",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "global-variable-undefined",
        "pylint_message_id": "W0601"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2469,
      "column_number": 14,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"action\": action.type_desc_str, \"fs_type\": action.format.type if action.is_format else None, ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"action\": action.type_desc_str, \"fs_type\": action.format.type if action.is_format else None, ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2492,
      "column_number": 15,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2498,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2501,
      "column_number": 62,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2503,
      "column_number": 33,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2513,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2536,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2537,
      "column_number": 33,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (19/12)",
      "message": "too-many-branches: Too many branches (19/12)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2321,
      "column_number": 0,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (89/50)",
      "message": "too-many-statements: Too many statements (89/50)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2321,
      "column_number": 0,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blivet.py",
      "line_number": 2555,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 88,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import os\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import os\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 39,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import shlex\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import shlex\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 40,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 42,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 56,
      "column_number": 18,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 78,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-return: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 79,
      "column_number": 4,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 87,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 89,
      "column_number": 11,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 91,
      "column_number": 14,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 109,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 110,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"info\": None}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"info\": None}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 112,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 123,
      "column_number": 11,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/blockdev_info.py",
      "line_number": 129,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 64,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "Unable to import 'ansible.module_utils.storage_lsr.size'",
      "message": "import-error: Unable to import 'ansible.module_utils.storage_lsr.size'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 65,
      "column_number": 0,
      "rule_id": "E0401",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "import-error",
        "pylint_message_id": "E0401"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.storage_lsr.size import Size\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.storage_lsr.size import Size\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 65,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "No name 'storage_lsr' in module 'ansible.module_utils'",
      "message": "no-name-in-module: No name 'storage_lsr' in module 'ansible.module_utils'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 65,
      "column_number": 0,
      "rule_id": "E0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "no-name-in-module",
        "pylint_message_id": "E0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 68,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"size\": dict(type='str', required=True)}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"size\": dict(type='str', required=True)}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 70,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 71,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"changed\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"changed\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 75,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/bsize.py",
      "line_number": 97,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (132/100)",
      "message": "line-too-long: Line too long (132/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 102,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (109/100)",
      "message": "line-too-long: Line too long (109/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 147,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (153/100)",
      "message": "line-too-long: Line too long (153/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 154,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import os\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import os\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 83,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import re\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import re\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 84,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 86,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "Unable to import 'ansible.module_utils.storage_lsr.size'",
      "message": "import-error: Unable to import 'ansible.module_utils.storage_lsr.size'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 87,
      "column_number": 0,
      "rule_id": "E0401",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "import-error",
        "pylint_message_id": "E0401"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.storage_lsr.size import Size\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.storage_lsr.size import Size\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 87,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "critical",
      "title": "No name 'storage_lsr' in module 'ansible.module_utils'",
      "message": "no-name-in-module: No name 'storage_lsr' in module 'ansible.module_utils'",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 87,
      "column_number": 0,
      "rule_id": "E0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "error",
        "pylint_symbol": "no-name-in-module",
        "pylint_message_id": "E0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 94,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 99,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 102,
      "column_number": 45,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 102,
      "column_number": 92,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 127,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 135,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 137,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 140,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 146,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 148,
      "column_number": 12,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 150,
      "column_number": 20,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 157,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 161,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 170,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 177,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 185,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 189,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 193,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 197,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 201,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 205,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 209,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"max_return\": dict(type='int', required=False, default=10), \"min_size\": dict(type='str', required=False, default='0'), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"max_return\": dict(type='int', required=False, default=10), \"min_size\": dict(type='str', required=False, default='0'), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 219,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'int', \"required\": False, \"default\": 10}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'int', \"required\": False, \"default\": 10}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 220,
      "column_number": 19,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": False, \"default\": '0'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": False, \"default\": '0'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 221,
      "column_number": 17,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": False, \"default\": '0'}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": False, \"default\": '0'}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 222,
      "column_number": 17,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": False, \"default\": None}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": False, \"default\": None}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 223,
      "column_number": 23,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'bool', \"required\": False, \"default\": False}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'bool', \"required\": False, \"default\": False}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 224,
      "column_number": 26,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"changed\": False, \"disks\": [], \"info\": []}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"changed\": False, \"disks\": [], \"info\": []}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 227,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 242,
      "column_number": 23,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider iterating with .items()",
      "message": "consider-using-dict-items: Consider iterating with .items()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 243,
      "column_number": 0,
      "rule_id": "C0206",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-dict-items",
        "pylint_message_id": "C0206"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider iterating the dictionary directly instead of calling .keys()",
      "message": "consider-iterating-dictionary: Consider iterating the dictionary directly instead of calling .keys()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 243,
      "column_number": 66,
      "rule_id": "C0201",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-iterating-dictionary",
        "pylint_message_id": "C0201"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider iterating the dictionary directly instead of calling .keys()",
      "message": "consider-iterating-dictionary: Consider iterating the dictionary directly instead of calling .keys()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 244,
      "column_number": 21,
      "rule_id": "C0201",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-iterating-dictionary",
        "pylint_message_id": "C0201"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider iterating the dictionary directly instead of calling .keys()",
      "message": "consider-iterating-dictionary: Consider iterating the dictionary directly instead of calling .keys()",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/find_unused_disk.py",
      "line_number": 250,
      "column_number": 46,
      "rule_id": "C0201",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-iterating-dictionary",
        "pylint_message_id": "C0201"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (104/100)",
      "message": "line-too-long: Line too long (104/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 85,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 132,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 6,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 58,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils import facts\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils import facts\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 59,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 65,
      "column_number": 9,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"mount\": dict(type='str', required=True), \"fs_type\": dict(type='str', required=True), ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"mount\": dict(type='str', required=True), \"fs_type\": dict(type='str', required=True), ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 141,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 142,
      "column_number": 14,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 143,
      "column_number": 16,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"changed\": False, \"vg_name\": '', \"lv_name\": ''}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"changed\": False, \"vg_name\": '', \"lv_name\": ''}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 146,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/lvm_gensym.py",
      "line_number": 169,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 125,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import glob\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import glob\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 53,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import os\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import os\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 54,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"import re\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"import re\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 55,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "message": "wrong-import-position: Import \"from ansible.module_utils.basic import AnsibleModule\" should be placed at the top of the module",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 57,
      "column_number": 0,
      "rule_id": "C0413",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-position",
        "pylint_message_id": "C0413"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 66,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 68,
      "column_number": 25,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 71,
      "column_number": 21,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"break\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-break: Unnecessary \"else\" after \"break\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 72,
      "column_number": 12,
      "rule_id": "R1723",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-break",
        "pylint_message_id": "R1723"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 86,
      "column_number": 9,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 86,
      "column_number": 14,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 93,
      "column_number": 36,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 96,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 98,
      "column_number": 17,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 100,
      "column_number": 17,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 104,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"spec\": dict(type='str', required=True)}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"spec\": dict(type='str', required=True)}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 105,
      "column_number": 18,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"type\": 'str', \"required\": True}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 106,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"device\": None}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"device\": None}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 109,
      "column_number": 13,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 120,
      "column_number": 11,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 125,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py",
      "line_number": 130,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (146/100)",
      "message": "line-too-long: Line too long (146/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 16,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 169,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (109/100)",
      "message": "line-too-long: Line too long (109/100)",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 206,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 5,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 31,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'ArgValidator' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'ArgValidator' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 31,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider merging these isinstance calls to isinstance(value, (float, int))",
      "message": "consider-merging-isinstance: Consider merging these isinstance calls to isinstance(value, (float, int))",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 41,
      "column_number": 11,
      "rule_id": "R1701",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "consider-merging-isinstance",
        "pylint_message_id": "R1701"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 44,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 59,
      "column_number": 24,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise TypeError(\"'%s' has to be an integer\" % value) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except ValueError as exc' and 'raise TypeError(\"'%s' has to be an integer\" % value) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 66,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 66,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Consider explicitly re-raising using 'except ValueError as exc' and 'raise TypeError(\"'%s' has to be a float\" % value) from exc'",
      "message": "raise-missing-from: Consider explicitly re-raising using 'except ValueError as exc' and 'raise TypeError(\"'%s' has to be a float\" % value) from exc'",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 73,
      "column_number": 12,
      "rule_id": "W0707",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "raise-missing-from",
        "pylint_message_id": "W0707"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 73,
      "column_number": 28,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 76,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 86,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 95,
      "column_number": 4,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 98,
      "column_number": 26,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{\"list\": ArgValidator._validate_list, \"str\": ArgValidator._validate_str, ... }' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{\"list\": ArgValidator._validate_list, \"str\": ArgValidator._validate_str, ... }' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 107,
      "column_number": 42,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate_list of a client class",
      "message": "protected-access: Access to a protected member _validate_list of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 107,
      "column_number": 52,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate_str of a client class",
      "message": "protected-access: Access to a protected member _validate_str of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 108,
      "column_number": 51,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate_bool of a client class",
      "message": "protected-access: Access to a protected member _validate_bool of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 109,
      "column_number": 52,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate_int of a client class",
      "message": "protected-access: Access to a protected member _validate_int of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 110,
      "column_number": 51,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Access to a protected member _validate_float of a client class",
      "message": "protected-access: Access to a protected member _validate_float of a client class",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 111,
      "column_number": 53,
      "rule_id": "W0212",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "protected-access",
        "pylint_message_id": "W0212"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 118,
      "column_number": 20,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 120,
      "column_number": 25,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 133,
      "column_number": 43,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using '{}' instead of a call to 'dict'.",
      "message": "use-dict-literal: Consider using '{}' instead of a call to 'dict'.",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 135,
      "column_number": 43,
      "rule_id": "R1735",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-dict-literal",
        "pylint_message_id": "R1735"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 155,
      "column_number": 39,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (21/12)",
      "message": "too-many-branches: Too many branches (21/12)",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 114,
      "column_number": 0,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 189,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 229,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using enumerate instead of iterating with range and len",
      "message": "consider-using-enumerate: Consider using enumerate instead of iterating with range and len",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 253,
      "column_number": 16,
      "rule_id": "C0200",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-enumerate",
        "pylint_message_id": "C0200"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 264,
      "column_number": 30,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "\"x == []\" can be simplified to \"not x\", if it is strictly a sequence, as an empty list is falsey",
      "message": "use-implicit-booleaness-not-comparison: \"x == []\" can be simplified to \"not x\", if it is strictly a sequence, as an empty list is falsey",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 267,
      "column_number": 7,
      "rule_id": "C1803",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "use-implicit-booleaness-not-comparison",
        "pylint_message_id": "C1803"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 273,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 274,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using enumerate instead of iterating with range and len",
      "message": "consider-using-enumerate: Consider using enumerate instead of iterating with range and len",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 280,
      "column_number": 8,
      "rule_id": "C0200",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-enumerate",
        "pylint_message_id": "C0200"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 289,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (18/15)",
      "message": "too-many-locals: Too many local variables (18/15)",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 289,
      "column_number": 0,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 290,
      "column_number": 17,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 294,
      "column_number": 23,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 295,
      "column_number": 27,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"break\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-break: Unnecessary \"else\" after \"break\", remove the \"else\" and de-indent the code inside it",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 299,
      "column_number": 12,
      "rule_id": "R1723",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-break",
        "pylint_message_id": "R1723"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 308,
      "column_number": 45,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 318,
      "column_number": 36,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 292,
      "column_number": 4,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Consider using [] instead of list()",
      "message": "use-list-literal: Consider using [] instead of list()",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 341,
      "column_number": 27,
      "rule_id": "R1734",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "use-list-literal",
        "pylint_message_id": "R1734"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (14/12)",
      "message": "too-many-branches: Too many branches (14/12)",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 289,
      "column_number": 0,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 347,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 353,
      "column_number": 22,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused argument 'error_log'",
      "message": "unused-argument: Unused argument 'error_log'",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 347,
      "column_number": 51,
      "rule_id": "W0613",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-argument",
        "pylint_message_id": "W0613"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused argument 'updated_params'",
      "message": "unused-argument: Unused argument 'updated_params'",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py",
      "line_number": 347,
      "column_number": 67,
      "rule_id": "W0613",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-argument",
        "pylint_message_id": "W0613"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/size.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"__metaclass__\" doesn't conform to PascalCase naming style",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/size.py",
      "line_number": 3,
      "column_number": 0,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class 'Size' inherits from object, can be safely removed from bases in python3",
      "message": "useless-object-inheritance: Class 'Size' inherits from object, can be safely removed from bases in python3",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/size.py",
      "line_number": 23,
      "column_number": 0,
      "rule_id": "R0205",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "useless-object-inheritance",
        "pylint_message_id": "R0205"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/size.py",
      "line_number": 41,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Formatting a regular string which could be an f-string",
      "message": "consider-using-f-string: Formatting a regular string which could be an f-string",
      "file_path": ".ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/size.py",
      "line_number": 95,
      "column_number": 29,
      "rule_id": "C0209",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "consider-using-f-string",
        "pylint_message_id": "C0209"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing module docstring",
      "message": "missing-module-docstring: Missing module docstring",
      "file_path": "_version.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "C0114",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-module-docstring",
        "pylint_message_id": "C0114"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"VERSION_TUPLE\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"VERSION_TUPLE\" doesn't conform to PascalCase naming style",
      "file_path": "_version.py",
      "line_number": 11,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Class name \"VERSION_TUPLE\" doesn't conform to PascalCase naming style",
      "message": "invalid-name: Class name \"VERSION_TUPLE\" doesn't conform to PascalCase naming style",
      "file_path": "_version.py",
      "line_number": 13,
      "column_number": 4,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Constant name \"version\" doesn't conform to UPPER_CASE naming style",
      "message": "invalid-name: Constant name \"version\" doesn't conform to UPPER_CASE naming style",
      "file_path": "_version.py",
      "line_number": 20,
      "column_number": 14,
      "rule_id": "C0103",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "invalid-name",
        "pylint_message_id": "C0103"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 19,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 25,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 30,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 35,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 39,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 45,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 48,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 50,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 55,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 60,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 68,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 70,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 76,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 79,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 81,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 86,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 91,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 93,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 95,
      "column_number": 70,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 97,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 106,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 112,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 115,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 117,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 122,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 127,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 129,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 132,
      "column_number": 67,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 134,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 140,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 143,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 145,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 150,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 161,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 166,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 168,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 171,
      "column_number": 88,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 173,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 179,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 182,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 184,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 188,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 194,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 207,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 219,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 221,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 226,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 231,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 234,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 248,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 250,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 256,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 259,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 261,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 265,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 275,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 277,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 283,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 285,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 292,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 298,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 15,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 46,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 77,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 113,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 141,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 180,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 217,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 257,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (7/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (7/5)",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 227,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 278,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 279,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 287,
      "column_number": 18,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 295,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 299,
      "column_number": 10,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import os",
      "message": "unused-import: Unused import os",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import glob",
      "message": "unused-import: Unused import glob",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 10,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import shutil",
      "message": "unused-import: Unused import shutil",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 11,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused List imported from typing",
      "message": "unused-import: Unused List imported from typing",
      "file_path": "scripts/fix_ansible_lint.py",
      "line_number": 13,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 19,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 24,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 29,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 31,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 43,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 46,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 52,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 55,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 57,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 62,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 77,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 82,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 87,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 90,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 94,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 99,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 104,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 109,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 112,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 115,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 117,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 122,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 125,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 126,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 130,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 132,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (110/100)",
      "message": "line-too-long: Line too long (110/100)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 135,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (124/100)",
      "message": "line-too-long: Line too long (124/100)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 136,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 137,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 141,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 144,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 150,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 153,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 155,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 160,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 178,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 183,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 185,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 192,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 195,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 201,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 204,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 206,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 211,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 216,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 221,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 224,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 230,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (101/100)",
      "message": "line-too-long: Line too long (101/100)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 235,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 238,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 245,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (116/100)",
      "message": "line-too-long: Line too long (116/100)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 246,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 248,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 251,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (116/100)",
      "message": "line-too-long: Line too long (116/100)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 258,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 259,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 262,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 268,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 271,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 273,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 278,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 283,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 285,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 297,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 300,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 306,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 309,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 311,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 315,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 323,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 325,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 331,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 333,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 340,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 346,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 15,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 53,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (24/15)",
      "message": "too-many-locals: Too many local variables (24/15)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 58,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 151,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 78,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (7/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (7/5)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 78,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 202,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (23/15)",
      "message": "too-many-locals: Too many local variables (23/15)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 207,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 269,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 212,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 212,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 307,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 326,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 327,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 335,
      "column_number": 18,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 343,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 347,
      "column_number": 10,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"glob\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"glob\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 11,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 12,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"typing.List\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"typing.List\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 13,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import os",
      "message": "unused-import: Unused import os",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import yaml",
      "message": "unused-import: Unused import yaml",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 10,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import glob",
      "message": "unused-import: Unused import glob",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 11,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused List imported from typing",
      "message": "unused-import: Unused List imported from typing",
      "file_path": "scripts/fix_ansible_lint_advanced.py",
      "line_number": 13,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 15,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 17,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 22,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 24,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 28,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (125/100)",
      "message": "line-too-long: Line too long (125/100)",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 31,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 32,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 34,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 35,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 38,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 44,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 47,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 54,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 62,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 70,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 45,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 50,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Import outside toplevel (yaml)",
      "message": "import-outside-toplevel: Import outside toplevel (yaml)",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 58,
      "column_number": 8,
      "rule_id": "C0415",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "import-outside-toplevel",
        "pylint_message_id": "C0415"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import os",
      "message": "unused-import: Unused import os",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 6,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import sys",
      "message": "unused-import: Unused import sys",
      "file_path": "scripts/fix_escape_chars.py",
      "line_number": 8,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 18,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 29,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 34,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 41,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 46,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 48,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 51,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 57,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 60,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 62,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 67,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 72,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 74,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (123/100)",
      "message": "line-too-long: Line too long (123/100)",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 85,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (121/100)",
      "message": "line-too-long: Line too long (121/100)",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 86,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 88,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 91,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 97,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 100,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 102,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 107,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 112,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 114,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 123,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 127,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 131,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 135,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 138,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 144,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 147,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 149,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 154,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 159,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 161,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 171,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 174,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 180,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 183,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 185,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 190,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 195,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 198,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 201,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 207,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 212,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 220,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 222,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 228,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 231,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 233,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 238,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 250,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 253,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 255,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 269,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 272,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 278,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 281,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 283,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 289,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 296,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 298,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 302,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 307,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 314,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 323,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 326,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 328,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 334,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 336,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 337,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 340,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 347,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 354,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 360,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 14,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 27,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 58,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 98,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 145,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 181,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 229,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable 'i'",
      "message": "unused-variable: Unused variable 'i'",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 199,
      "column_number": 20,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 279,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 329,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 330,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 349,
      "column_number": 18,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing function or method docstring",
      "message": "missing-function-docstring: Missing function or method docstring",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 357,
      "column_number": 0,
      "rule_id": "C0116",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-function-docstring",
        "pylint_message_id": "C0116"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "message": "no-else-return: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 362,
      "column_number": 4,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 363,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 366,
      "column_number": 14,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 11,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"typing.List\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"typing.List\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 12,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import os",
      "message": "unused-import: Unused import os",
      "file_path": "scripts/fix_yaml_parsing.py",
      "line_number": 7,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 21,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 25,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 28,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 49,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 53,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 55,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 60,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 63,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 70,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 73,
      "column_number": 64,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 82,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 90,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 98,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 103,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 110,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 115,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 118,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 120,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 126,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 133,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 139,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 146,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 151,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 156,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (121/100)",
      "message": "line-too-long: Line too long (121/100)",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 157,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (108/100)",
      "message": "line-too-long: Line too long (108/100)",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 158,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (138/100)",
      "message": "line-too-long: Line too long (138/100)",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 162,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 164,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 166,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 171,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 174,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 177,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 180,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 185,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 190,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 196,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 202,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 206,
      "column_number": 61,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 208,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (110/100)",
      "message": "line-too-long: Line too long (110/100)",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 210,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 211,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 215,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 220,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 226,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 232,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 236,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (108/100)",
      "message": "line-too-long: Line too long (108/100)",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 237,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 240,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 242,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 244,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 249,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 252,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 260,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 262,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 265,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 266,
      "column_number": 45,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 268,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 16,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 47,
      "column_number": 31,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 36,
      "column_number": 33,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (17/15)",
      "message": "too-many-locals: Too many local variables (17/15)",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 56,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 80,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 68,
      "column_number": 21,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 116,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 88,
      "column_number": 25,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable 'feature_name'",
      "message": "unused-variable: Unused variable 'feature_name'",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 152,
      "column_number": 24,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 175,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (24/15)",
      "message": "too-many-locals: Too many local variables (24/15)",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 181,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 250,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"json\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"json\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 9,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"os\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"os\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 10,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"subprocess\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"subprocess\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 11,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"sys\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"sys\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 12,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 13,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import os",
      "message": "unused-import: Unused import os",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 10,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused import sys",
      "message": "unused-import: Unused import sys",
      "file_path": "scripts/generate_compatibility_matrix.py",
      "line_number": 12,
      "column_number": 0,
      "rule_id": "W0611",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-import",
        "pylint_message_id": "W0611"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (104/100)",
      "message": "line-too-long: Line too long (104/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 56,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 70,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 92,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (103/100)",
      "message": "line-too-long: Line too long (103/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 114,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 147,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 151,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 153,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 179,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 181,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (120/100)",
      "message": "line-too-long: Line too long (120/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 189,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (122/100)",
      "message": "line-too-long: Line too long (122/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 191,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (120/100)",
      "message": "line-too-long: Line too long (120/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 193,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (116/100)",
      "message": "line-too-long: Line too long (116/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 195,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 196,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (116/100)",
      "message": "line-too-long: Line too long (116/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 201,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 204,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (106/100)",
      "message": "line-too-long: Line too long (106/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 213,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 216,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 235,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 240,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 242,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 247,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 255,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 258,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 265,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 274,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 280,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 289,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (111/100)",
      "message": "line-too-long: Line too long (111/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 292,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 294,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 297,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 299,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 304,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 336,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 359,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 365,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (112/100)",
      "message": "line-too-long: Line too long (112/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 367,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (115/100)",
      "message": "line-too-long: Line too long (115/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 369,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 371,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (119/100)",
      "message": "line-too-long: Line too long (119/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 372,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (120/100)",
      "message": "line-too-long: Line too long (120/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 373,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 374,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 375,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 382,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 384,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 388,
      "column_number": 65,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 393,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 398,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 404,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 407,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 420,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 425,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 430,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (113/100)",
      "message": "line-too-long: Line too long (113/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 441,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 443,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 449,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 456,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 458,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 462,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 469,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (117/100)",
      "message": "line-too-long: Line too long (117/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 471,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (114/100)",
      "message": "line-too-long: Line too long (114/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 472,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 473,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 481,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 483,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (138/100)",
      "message": "line-too-long: Line too long (138/100)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 484,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 485,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 487,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 491,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 495,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 500,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 507,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 527,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 530,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 536,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 18,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many return statements (7/6)",
      "message": "too-many-return-statements: Too many return statements (7/6)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 29,
      "column_number": 4,
      "rule_id": "R0911",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-return-statements",
        "pylint_message_id": "R0911"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (16/15)",
      "message": "too-many-locals: Too many local variables (16/15)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 93,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 121,
      "column_number": 31,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 109,
      "column_number": 33,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 145,
      "column_number": 15,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 143,
      "column_number": 35,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 133,
      "column_number": 37,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (9/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (9/5)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 126,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (23/12)",
      "message": "too-many-branches: Too many branches (23/12)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 93,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 202,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 184,
      "column_number": 21,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 214,
      "column_number": 19,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 209,
      "column_number": 21,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 233,
      "column_number": 31,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 227,
      "column_number": 33,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (19/12)",
      "message": "too-many-branches: Too many branches (19/12)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 154,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (52/50)",
      "message": "too-many-statements: Too many statements (52/50)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 154,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Catching too general exception Exception",
      "message": "broad-exception-caught: Catching too general exception Exception",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 295,
      "column_number": 23,
      "rule_id": "W0718",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "broad-exception-caught",
        "pylint_message_id": "W0718"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 253,
      "column_number": 25,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 284,
      "column_number": 27,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 287,
      "column_number": 33,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many nested blocks (6/5)",
      "message": "too-many-nested-blocks: Too many nested blocks (6/5)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 250,
      "column_number": 8,
      "rule_id": "R1702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-nested-blocks",
        "pylint_message_id": "R1702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Unused variable 'feature_name'",
      "message": "unused-variable: Unused variable 'feature_name'",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 366,
      "column_number": 24,
      "rule_id": "W0612",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unused-variable",
        "pylint_message_id": "W0612"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "No exception type(s) specified",
      "message": "bare-except: No exception type(s) specified",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 391,
      "column_number": 8,
      "rule_id": "W0702",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "bare-except",
        "pylint_message_id": "W0702"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "'subprocess.run' used without explicitly defining the value for 'check'.",
      "message": "subprocess-run-check: 'subprocess.run' used without explicitly defining the value for 'check'.",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 388,
      "column_number": 21,
      "rule_id": "W1510",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "subprocess-run-check",
        "pylint_message_id": "W1510"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 401,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many local variables (28/15)",
      "message": "too-many-locals: Too many local variables (28/15)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 408,
      "column_number": 4,
      "rule_id": "R0914",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-locals",
        "pylint_message_id": "R0914"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 510,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many branches (14/12)",
      "message": "too-many-branches: Too many branches (14/12)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 408,
      "column_number": 4,
      "rule_id": "R0912",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-branches",
        "pylint_message_id": "R0912"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Too many statements (74/50)",
      "message": "too-many-statements: Too many statements (74/50)",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 408,
      "column_number": 4,
      "rule_id": "R0915",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "too-many-statements",
        "pylint_message_id": "R0915"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"json\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"json\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 10,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"os\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"os\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 11,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"subprocess\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"subprocess\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 12,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"sys\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"sys\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 13,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"pathlib.Path\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 14,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "standard import \"datetime.datetime\" should be placed before third party import \"yaml\"",
      "message": "wrong-import-order: standard import \"datetime.datetime\" should be placed before third party import \"yaml\"",
      "file_path": "scripts/generate_enhanced_compatibility_matrix.py",
      "line_number": 15,
      "column_number": 0,
      "rule_id": "C0411",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "wrong-import-order",
        "pylint_message_id": "C0411"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 24,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 44,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 55,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 59,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 65,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 67,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 74,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 81,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 84,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 88,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 102,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (108/100)",
      "message": "line-too-long: Line too long (108/100)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 104,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 105,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 110,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 112,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 119,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 125,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 128,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 132,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 142,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 144,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 147,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 150,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 152,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 159,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (102/100)",
      "message": "line-too-long: Line too long (102/100)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 161,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 162,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 164,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 169,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 172,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 174,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 178,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 182,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (134/100)",
      "message": "line-too-long: Line too long (134/100)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 183,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 184,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 188,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 194,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 196,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 199,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (126/100)",
      "message": "line-too-long: Line too long (126/100)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 201,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (115/100)",
      "message": "line-too-long: Line too long (115/100)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 202,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 203,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (148/100)",
      "message": "line-too-long: Line too long (148/100)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 205,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Line too long (120/100)",
      "message": "line-too-long: Line too long (120/100)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 206,
      "column_number": 0,
      "rule_id": "C0301",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "line-too-long",
        "pylint_message_id": "C0301"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 207,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 218,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 229,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 259,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 262,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Trailing whitespace",
      "message": "trailing-whitespace: Trailing whitespace",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 265,
      "column_number": 0,
      "rule_id": "C0303",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "trailing-whitespace",
        "pylint_message_id": "C0303"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Missing class docstring",
      "message": "missing-class-docstring: Missing class docstring",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 15,
      "column_number": 0,
      "rule_id": "C0115",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "convention",
        "pylint_symbol": "missing-class-docstring",
        "pylint_message_id": "C0115"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "'subprocess.run' used without explicitly defining the value for 'check'.",
      "message": "subprocess-run-check: 'subprocess.run' used without explicitly defining the value for 'check'.",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 28,
      "column_number": 21,
      "rule_id": "W1510",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "subprocess-run-check",
        "pylint_message_id": "W1510"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using an f-string that does not have any interpolated variables",
      "message": "f-string-without-interpolation: Using an f-string that does not have any interpolated variables",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 90,
      "column_number": 24,
      "rule_id": "W1309",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "f-string-without-interpolation",
        "pylint_message_id": "W1309"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "message": "no-else-return: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\"",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 209,
      "column_number": 8,
      "rule_id": "R1705",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "no-else-return",
        "pylint_message_id": "R1705"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 221,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "major",
      "title": "Using open without explicitly specifying an encoding",
      "message": "unspecified-encoding: Using open without explicitly specifying an encoding",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 257,
      "column_number": 13,
      "rule_id": "W1514",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "warning",
        "pylint_symbol": "unspecified-encoding",
        "pylint_message_id": "W1514"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[5:2791]\n==module_utils.network_lsr.argument_validator:[5:2791]\n__metaclass__ = type\n\nimport os\nimport posixpath\nimport socket\nimport re\n\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.myerror import MyError  # noqa:E501\nfrom ansible.module_utils.network_lsr.utils import Util  # noqa:E501\n\nUINT32_MAX = 0xFFFFFFFF\n\n\nclass ArgUtil:\n    @staticmethod\n    def connection_find_by_name(name, connections, n_connections=None):\n        if not name:\n            raise ValueError(\"missing name argument\")\n        conn = None\n        for idx, connection in enumerate(connections):\n            if n_connections is not None and idx >= n_connections:\n                break\n            if \"name\" not in connection or name != connection[\"name\"]:\n                continue\n\n            if connection[\"persistent_state\"] == \"absent\":\n                conn = None\n            elif connection[\"persistent_state\"] == \"present\":\n                conn = connection\n        return conn\n\n    @staticmethod\n    def connection_find_controller(name, connections, n_connections=None):\n        connection = ArgUtil.connection_find_by_name(name, connections, n_connections)\n        if not connection:\n            raise MyError(\"invalid controller/parent '%s'\" % (name))\n        if connection[\"interface_name\"] is None:\n            raise MyError(\n                \"invalid controller/parent '%s' which needs an 'interface_name'\"\n                % (name)\n            )\n        if not Util.ifname_valid(connection[\"interface_name\"]):\n            raise MyError(\n                \"invalid controller/parent '%s' with invalid 'interface_name' ('%s')\"\n                % (name, connection[\"interface_name\"])\n            )\n        return connection[\"interface_name\"]\n\n    @staticmethod\n    def connection_find_controller_uuid(name, connections, n_connections=None):\n        connection = ArgUtil.connection_find_by_name(name, connections, n_connections)\n        if not connection:\n            raise MyError(\"invalid controller/parent '%s'\" % (name))\n        return connection[\"nm.uuid\"]\n\n    @staticmethod\n    def connection_get_non_absent_names(connections):\n        # @idx is the index with state['absent']. This will\n        # return the names of all explicitly mentioned profiles.\n        # That is, the names of profiles that should not be deleted.\n        result = set()\n        for connection in connections:\n            if \"name\" not in connection:\n                continue\n            if not connection[\"name\"]:\n                continue\n            result.add(connection[\"name\"])\n        return result\n\n\nclass ValidationError(MyError):\n    def __init__(self, name, message):\n        # pylint: disable=non-parent-init-called\n        super(ValidationError, self).__init__(name + \": \" + message)\n        self.error_message = message\n        self.name = name\n\n    @staticmethod\n    def from_connection(idx, message):\n        return ValidationError(\"connection[\" + str(idx) + \"]\", message)\n\n\nclass ArgValidator:\n    MISSING = object()\n    DEFAULT = object()\n\n    def __init__(self, name=None, required=False, default_value=None):\n        self.name = name\n        self.required = required\n        self._default_value = default_value\n\n    def get_default_value(self):\n        if callable(self._default_value):\n            return self._default_value()\n        return self._default_value\n\n    def validate(self, value):\n        \"\"\"\n        Validate and normalize the input dictionary\n\n        This validate @value or raises a ValidationError() on error.\n        It also returns a normalized value, where the settings are\n        converted to appropriate types and default values set. You\n        should rely on the normalization to fill unspecified values\n        and resolve ambiguity.\n\n        You are implementing \"types\" of ArgValidator instances and\n        a major point of them is to implement a suitable validation and\n        normalization. The means for that is for subclasses to override\n        _validate_impl() and possibly _validate_post(). Some subclasses\n        support convenience arguments for simpler validation, like\n        ArgValidatorStr.enum_values or ArgValidatorNum.val_min.\n        Or ArgValidator.required which is honored by ArgValidatorDict\n        to determine whether a mandatory key is missing. Also,\n        ArgValidatorDict and ArgValidatorList have a nested parameter\n        which is an ArgValidator for the elements of the dictionary and list.\n        \"\"\"\n        return self._validate(value, self.name)\n\n    def _validate(self, value, name):\n        \"\"\"\n        The internal implementation for validate().\n\n        This is mostly called from internal code and by validate().\n        Usually you would not call this directly nor override it.\n        Instead, you would implement either _validate_impl() or\n        _validate_post().\n        \"\"\"\n        validated = self._validate_impl(value, name)\n        return self._validate_post(value, name, validated)\n\n    def _validate_impl(self, value, name):\n        \"\"\"\n        Implementation of validation.\n\n        Subclasses must implement this validation function. It is\n        the main hook to implement validate(). On validation error\n        it must raise ValidationError() or otherwise return a pre-normalized\n        value that gets passed to _validate_post().\n        \"\"\"\n        raise NotImplementedError()\n\n    # pylint: disable=unused-argument,no-self-use\n    def _validate_post(self, value, name, result):\n        \"\"\"\n        Post validation of the validated result.\n\n        This will be called with the result from _validate_impl().\n        By default it does nothing, but subclasses can override\n        this to perform additional validation. The use for this\n        hook is to split the validation in two steps. When validating\n        a dictionary of multiple keys, then _validate_impl() can\n        implement the basic pre-validation and pre-normalization of the individual\n        keys (which can be in any order). Afterwards, _validate_post()\n        can take a more holistic view and validate interdependencies\n        between keys and perform additional validation. For example,\n        _validate_impl() would validate that the keys are of the correct\n        basic type, and _validate_post() would validate that the values\n        don't conflict and possibly normalize derived default values.\n        \"\"\"\n        return result\n\n\nclass ArgValidatorStr(ArgValidator):\n    def __init__(  # pylint: disable=too-many-arguments\n        self,\n        name,\n        required=False,\n        default_value=None,\n        enum_values=None,\n        allow_empty=False,\n        min_length=None,\n        max_length=None,\n        regex=None,\n    ):\n        ArgValidator.__init__(self, name, required, default_value)\n        self.enum_values = enum_values\n        self.allow_empty = allow_empty\n        self.regex = regex\n\n        if max_length is not None:\n            if not isinstance(max_length, int):\n                raise ValueError(\"max_length must be an integer\")\n            elif max_length < 0:\n                raise ValueError(\"max_length must be a positive integer\")\n        self.max_length = max_length\n\n        if min_length is not None:\n            if not isinstance(min_length, int):\n                raise ValueError(\"min_length must be an integer\")\n            elif min_length < 0:\n                raise ValueError(\"min_length must be a positive integer\")\n        self.min_length = min_length\n\n    def _validate_impl(self, value, name):\n        if not isinstance(value, Util.STRING_TYPE):\n            raise ValidationError(name, \"must be a string but is '%s'\" % (value))\n        value = str(value)\n        if self.enum_values is not None and value not in self.enum_values:\n            raise ValidationError(\n                name,\n                \"is '%s' but must be one of '%s'\"\n                % (value, \"' '\".join(sorted(self.enum_values))),\n            )\n        if self.regex is not None and not any(re.match(x, value) for x in self.regex):\n            raise ValidationError(\n                name,\n                \"is '%s' which does not match the regex '%s'\"\n                % (value, \"' '\".join(sorted(self.regex))),\n            )\n        if not self.allow_empty and not value:\n            raise ValidationError(name, \"cannot be empty\")\n        if not self._validate_string_max_length(value):\n            raise ValidationError(\n                name, \"maximum length is %s characters\" % (self.max_length)\n            )\n        if not self._validate_string_min_length(value):\n            raise ValidationError(\n                name, \"minimum length is %s characters\" % (self.min_length)\n            )\n        return value\n\n    def _validate_string_max_length(self, value):\n        \"\"\"\n        Ensures that the length of string `value` is less than or equal to\n        the maximum length\n        \"\"\"\n        if self.max_length is not None:\n            return len(str(value)) <= self.max_length\n        else:\n            return True\n\n    def _validate_string_min_length(self, value):\n        \"\"\"\n        Ensures that the length of string `value` is more than or equal to\n         the minimum length\n        \"\"\"\n        if self.min_length is not None:\n            return len(str(value)) >= self.min_length\n        else:\n            return True\n\n\nclass ArgValidatorRouteTable(ArgValidator):\n    def __init__(\n        self,\n        name,\n        required=False,\n        default_value=None,\n    ):\n        ArgValidator.__init__(self, name, required, default_value)\n\n    def _validate_impl(self, value, name):\n        table = None\n        try:\n            if isinstance(value, bool):\n                # bool can (probably) be converted to integer type,\n                # but here we don't want to accept a boolean value.\n                pass\n            elif isinstance(value, int):\n                table = int(value)\n            elif isinstance(value, Util.STRING_TYPE):\n                try:\n                    table = int(value)\n                except Exception:\n                    table = value\n        except Exception:\n            pass\n        if table is None:\n            raise ValidationError(\n                name,\n                \"route table must be the named or numeric tables but is {0}\".format(\n                    value\n                ),\n            )\n        if isinstance(table, int):\n            if table < 1:\n                raise ValidationError(\n                    name,\n                    \"route table value is {0} but cannot be less than 1\".format(value),\n                )\n            elif table > UINT32_MAX:\n                raise ValidationError(\n                    name,\n                    \"route table value is {0} but cannot be greater than {1}\".format(\n                        value, UINT32_MAX\n                    ),\n                )\n        if isinstance(table, Util.STRING_TYPE):\n            if table == \"\":\n                raise ValidationError(name, \"route table name cannot be empty string\")\n            if not IPRouteUtils.ROUTE_TABLE_NAME_REGEX.match(table):\n                raise ValidationError(\n                    name, \"route table name contains invalid characters\"\n                )\n\n        return table\n\n\nclass ArgValidatorNum(ArgValidator):\n    def __init__(  # pylint: disable=too-many-arguments\n        self,\n        name,\n        required=False,\n        val_min=None,\n        val_max=None,\n        default_value=ArgValidator.DEFAULT,\n        numeric_type=int,\n    ):\n        if default_value is ArgValidator.DEFAULT:\n            default_value = numeric_type(0)\n        ArgValidator.__init__(self, name, required, default_value)\n        self.val_min = val_min\n        self.val_max = val_max\n        self.numeric_type = numeric_type\n\n    def _validate_impl(self, value, name):\n        v = None\n        try:\n            if isinstance(value, bool):\n                # bool can (probably) be converted to self.numeric_type,\n                # but here we don't want to accept a boolean value.\n                pass\n            elif isinstance(value, self.numeric_type):\n                # ArgValidatorNum should normalize the input values to be of type\n                # self.numeric_type, except the default_value\n                v = self.numeric_type(value)\n            else:\n                v2 = self.numeric_type(value)\n                if isinstance(value, Util.STRING_TYPE) or v2 == value:\n                    v = v2\n        except Exception:\n            pass\n        if v is None:\n            raise ValidationError(\n                name, \"must be an integer number but is '%s'\" % (value)\n            )\n        if self.val_min is not None and v < self.val_min:\n            raise ValidationError(\n                name, \"value is %s but cannot be less then %s\" % (value, self.val_min)\n            )\n        if self.val_max is not None and v > self.val_max:\n            raise ValidationError(\n                name,\n                \"value is %s but cannot be greater then %s\" % (value, self.val_max),\n            )\n        return v\n\n\nclass ArgValidatorRange(ArgValidator):\n    def __init__(  # pylint: disable=too-many-arguments\n        self,\n        name,\n        required=False,\n        val_min=None,\n        val_max=None,\n        default_value=None,\n    ):\n        ArgValidator.__init__(self, name, required, default_value)\n        self.val_min = val_min\n        self.val_max = val_max\n\n    def _validate_impl(self, value, name):\n        range = None\n        if isinstance(value, Util.STRING_TYPE):\n            match_group = re.match(r\"^ *([0-9]+) *- *([0-9]+) *$\", value)\n            if match_group:\n                try:\n                    range = (int(match_group.group(1)), int(match_group.group(2)))\n                except Exception:\n                    pass\n            else:\n                try:\n                    range = (int(value), int(value))\n                except Exception:\n                    pass\n        elif isinstance(value, bool):\n            # bool can (probably) be converted to integer type,\n            # but here we don't want to accept a boolean value.\n            pass\n        elif isinstance(value, int):\n            range = (value, value)\n\n        if range is None:\n            raise ValidationError(name, \"the range value {0} is invalid\".format(value))\n        if range[0] > range[1]:\n            raise ValidationError(\n                name,\n                \"the range start cannot be greater than range end\",\n            )\n        if self.val_min is not None:\n            if range[0] < self.val_min:\n                raise ValidationError(\n                    name,\n                    \"lower range value is {0} but cannot be less than {1}\".format(\n                        range[0], self.val_min\n                    ),\n                )\n        if self.val_max is not None:\n            if range[1] > self.val_max:\n                raise ValidationError(\n                    name,\n                    \"upper range value is {0} but cannot be greater than {1}\".format(\n                        range[1], self.val_max\n                    ),\n                )\n\n        return range\n\n\nclass ArgValidatorBool(ArgValidator):\n    def __init__(self, name, required=False, default_value=False):\n        ArgValidator.__init__(self, name, required, default_value)\n\n    def _validate_impl(self, value, name):\n        try:\n            if isinstance(value, bool):\n                return value\n            if isinstance(value, Util.STRING_TYPE) or isinstance(value, int):\n                return Util.boolean(value)\n        except Exception:\n            pass\n        raise ValidationError(name, \"must be an boolean but is '%s'\" % (value))\n\n\nclass ArgValidatorDeprecated(ArgValidator):\n    \"\"\"\n    ArgValidatorDeprecated is only used as a marker to indicate that a setting is deprecated\n    by another setting. The validator that contains a deprecated setting is responsible for\n    processing this and the replacement setting needs to perform the validation.\n    \"\"\"\n\n    def __init__(self, name, deprecated_by):\n        ArgValidator.__init__(self, name, default_value=ArgValidator.MISSING)\n        self.deprecated_by = deprecated_by\n\n    def _validate_impl(self, value, name):\n        raise MyError(\n            \"Deprecated settings need to be validated by the replacement setting.\"\n        )\n\n\nclass ArgValidatorDict(ArgValidator):\n    def __init__(\n        self,\n        name=None,\n        required=False,\n        nested=None,\n        default_value=ArgValidator.DEFAULT,\n        all_missing_during_validate=False,\n    ):\n        if nested is not None:\n            nested = dict([(v.name, v) for v in nested])\n        else:\n            nested = {}\n        if default_value is ArgValidator.DEFAULT:\n            default_value = self.generate_default\n        ArgValidator.__init__(self, name, required, default_value)\n        self.nested = nested\n        self.all_missing_during_validate = all_missing_during_validate\n\n    def _validate_impl(self, value, name):\n        result = {}\n        seen_keys = set()\n        if value is None:\n            # Users might want to use jinja2 templates to set properties. As such,\n            # it's convenient to accept None as an alias for an empty dictionary\n            # e.g. setting like `\"match\": None` will be allowed by the role\n            return {}\n        try:\n            items = list(value.items())\n        except AttributeError:\n            raise ValidationError(name, \"invalid content is not a dictionary\")\n        for setting, value in items:\n            try:\n                validator = self.nested[setting]\n            except KeyError:\n                raise ValidationError(name, \"invalid key '%s'\" % (setting))\n            if isinstance(validator, ArgValidatorDeprecated):\n                setting = validator.deprecated_by\n                validator = self.nested[setting]\n            if setting in seen_keys:\n                raise ValidationError(name, \"duplicate key '%s'\" % (setting))\n            seen_keys.add(setting)\n            try:\n                validated_value = validator._validate(value, name + \".\" + setting)\n            except ValidationError as e:\n                raise ValidationError(e.name, e.error_message)\n            result[setting] = validated_value\n        for setting, validator in self.nested.items():\n            if setting in seen_keys:\n                continue\n            if validator.required:\n                raise ValidationError(name, \"missing required key '%s'\" % (setting))\n            if not self.all_missing_during_validate:\n                default = validator.get_default_value()\n                if default is not ArgValidator.MISSING:\n                    result[setting] = default\n        return result\n\n    @staticmethod\n    def generate_default_from_nested(nested):\n        result = {}\n        for name, validator in nested.items():\n            default = validator.get_default_value()\n            if default is not ArgValidator.MISSING:\n                result[name] = default\n        return result\n\n    def generate_default(self):\n        return ArgValidatorDict.generate_default_from_nested(self.nested)\n\n\nclass ArgValidatorList(ArgValidator):\n    def __init__(\n        self,\n        name,\n        nested,\n        default_value=None,\n        remove_none_or_empty=False,\n    ):\n        ArgValidator.__init__(self, name, required=False, default_value=default_value)\n        self.nested = nested\n        self.remove_none_or_empty = remove_none_or_empty\n\n    def _validate_impl(self, value, name):\n\n        if value is None:\n            # Users might want to use jinja2 templates to set properties. As such,\n            # it's convenient to accept None as an alias for an empty list\n            # e.g. setting like `\"match\": {\"path\": None}` will be allowed by the role\n            value = []\n        elif isinstance(value, Util.STRING_TYPE):\n            # we expect a list. However, for convenience allow to\n            # specify a string, separated by space. Escaping is\n            # not supported. If you need that, define a proper list.\n            value = [s for s in value.split(\" \") if s]\n\n        result = []\n        for idx, v in enumerate(value):\n            if (v is None or v == \"\") and self.remove_none_or_empty:\n                continue\n            try:\n                vv = self.nested._validate(v, name + \"[\" + str(idx) + \"]\")\n            except ValidationError as e:\n                raise ValidationError(e.name, e.error_message)\n            result.append(vv)\n        return result\n\n\nclass ArgValidatorIP(ArgValidatorStr):\n    def __init__(\n        self, name, family=None, required=False, default_value=None, plain_address=True\n    ):\n        ArgValidatorStr.__init__(self, name, required, default_value, None)\n        self.family = family\n        self.plain_address = plain_address\n\n    def _validate_impl(self, value, name):\n        v = ArgValidatorStr._validate_impl(self, value, name)\n        try:\n            addr, family = Util.parse_ip(v, self.family)\n        except Exception:\n            raise ValidationError(\n                name,\n                \"value '%s' is not a valid IP%s address\"\n                % (value, Util.addr_family_to_v(self.family)),\n            )\n        if self.plain_address:\n            return addr\n        return {\"family\": family, \"address\": addr}\n\n\nclass ArgValidatorMac(ArgValidatorStr):\n    def __init__(\n        self, name, force_len=None, required=False, default_value=None, enum_values=None\n    ):\n        ArgValidatorStr.__init__(self, name, required, default_value, None)\n        self.force_len = force_len\n        self.enum_values_mac = enum_values\n\n    def _validate_impl(self, value, name):\n        v = ArgValidatorStr._validate_impl(self, value, name)\n\n        if self.enum_values_mac is not None and value in self.enum_values_mac:\n            return v\n\n        try:\n            addr = Util.mac_aton(v, self.force_len)\n        except MyError:\n            enum_ex = \"\"\n            if self.enum_values_mac is not None:\n                enum_ex = \" nor one of %s\" % (self.enum_values_mac)\n            raise ValidationError(\n                name, \"value '%s' is not a valid MAC address%s\" % (value, enum_ex)\n            )\n        if not addr:\n            enum_ex = \"\"\n            if self.enum_values_mac is not None:\n                enum_ex = \" nor one of %s\" % (self.enum_values_mac)\n            raise ValidationError(\n                name, \"value '%s' is not a valid MAC address%s\" % (value, enum_ex)\n            )\n        return Util.mac_ntoa(addr)\n\n\nclass ArgValidatorIPAddr(ArgValidatorDict):\n    def __init__(self, name, family=None, required=False):\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[\n                ArgValidatorIP(\n                    \"address\", family=family, required=True, plain_address=False\n                ),\n                ArgValidatorNum(\"prefix\", default_value=None, val_min=0),\n            ],\n            default_value=None,\n        )\n        self.family = family\n\n    def _validate_impl(self, value, name):\n        if isinstance(value, Util.STRING_TYPE):\n            v = str(value)\n            if not v:\n                raise ValidationError(name, \"cannot be empty\")\n            try:\n                return Util.parse_address(v, self.family)\n            except Exception:\n                raise ValidationError(\n                    name,\n                    \"value '%s' is not a valid IP%s address with prefix length\"\n                    % (value, Util.addr_family_to_v(self.family)),\n                )\n        v = ArgValidatorDict._validate_impl(self, value, name)\n        return {\n            \"address\": v[\"address\"][\"address\"],\n            \"family\": v[\"address\"][\"family\"],\n            \"prefix\": v[\"prefix\"],\n        }\n\n    def _validate_post(self, value, name, result):\n        family = result[\"family\"]\n        prefix = result[\"prefix\"]\n        if prefix is None:\n            prefix = Util.addr_family_default_prefix(family)\n            result[\"prefix\"] = prefix\n        elif not Util.addr_family_valid_prefix(family, prefix):\n            raise ValidationError(name, \"invalid prefix %s in '%s'\" % (prefix, value))\n        return result\n\n\nclass ArgValidatorIPRoute(ArgValidatorDict):\n    def __init__(self, name, family=None, required=False):\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[\n                ArgValidatorIP(\n                    \"network\", family=family, required=True, plain_address=False\n                ),\n                ArgValidatorNum(\"prefix\", default_value=None, val_min=0),\n                ArgValidatorIP(\n                    \"gateway\", family=family, default_value=None, plain_address=False\n                ),\n                ArgValidatorNum(\n                    \"metric\", default_value=-1, val_min=-1, val_max=UINT32_MAX\n                ),\n                ArgValidatorStr(\n                    \"type\",\n                    default_value=None,\n                    enum_values=[\"blackhole\", \"prohibit\", \"unreachable\"],\n                ),\n                ArgValidatorRouteTable(\"table\"),\n                ArgValidatorIP(\n                    \"src\", family=family, default_value=None, plain_address=False\n                ),\n            ],\n            default_value=None,\n        )\n        self.family = family\n\n    def _validate_post(self, value, name, result):\n        network = result[\"network\"]\n\n        family = network[\"family\"]\n        result[\"network\"] = network[\"address\"]\n        result[\"family\"] = family\n\n        gateway = result[\"gateway\"]\n        route_type = result[\"type\"]\n        if gateway is not None:\n            if family != gateway[\"family\"]:\n                raise ValidationError(\n                    name,\n                    \"conflicting address family between network and gateway '%s'\"\n                    % (gateway[\"address\"]),\n                )\n            if route_type is not None:\n                raise ValidationError(\n                    name,\n                    \"a %s route can not have a gateway '%s'\"\n                    % (route_type, gateway[\"address\"]),\n                )\n            result[\"gateway\"] = gateway[\"address\"]\n\n        prefix = result[\"prefix\"]\n        if prefix is None:\n            prefix = Util.addr_family_default_prefix(family)\n            result[\"prefix\"] = prefix\n        elif not Util.addr_family_valid_prefix(family, prefix):\n            raise ValidationError(name, \"invalid prefix %s in '%s'\" % (prefix, value))\n\n        src = result[\"src\"]\n        if src is not None:\n            if family != src[\"family\"]:\n                raise ValidationError(\n                    name,\n                    \"conflicting address family between network and src \"\n                    \"address {0}\".format(src[\"address\"]),\n                )\n            result[\"src\"] = src[\"address\"]\n\n        return result\n\n\nclass ArgValidatorIPRoutingRule(ArgValidatorDict):\n    def __init__(self, name, required=False):\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[\n                ArgValidatorNum(\n                    \"priority\",\n                    default_value=None,\n                    required=True,\n                    val_min=0,\n                    val_max=UINT32_MAX,\n                ),\n                ArgValidatorStr(\n                    \"action\",\n                    default_value=\"to-table\",\n                    enum_values=[\"to-table\", \"blackhole\", \"prohibit\", \"unreachable\"],\n                ),\n                ArgValidatorRange(\"dport\", val_min=1, val_max=65534),\n                ArgValidatorStr(\n                    \"family\",\n                    default_value=None,\n                    enum_values=[\"ipv4\", \"ipv6\"],\n                ),\n                ArgValidatorIPAddr(\"from\"),\n                ArgValidatorNum(\n                    \"fwmark\", default_value=None, val_min=1, val_max=UINT32_MAX\n                ),\n                ArgValidatorNum(\n                    \"fwmask\", default_value=None, val_min=1, val_max=UINT32_MAX\n                ),\n                ArgValidatorStr(\"iif\", default_value=None),\n                ArgValidatorBool(\"invert\", default_value=False),\n                ArgValidatorNum(\"ipproto\", default_value=None, val_min=1, val_max=255),\n                ArgValidatorStr(\"oif\", default_value=None),\n                ArgValidatorRange(\"sport\", val_min=1, val_max=65534),\n                ArgValidatorNum(\"suppress_prefixlength\", default_value=None, val_min=0),\n                ArgValidatorRouteTable(\"table\"),\n                ArgValidatorIPAddr(\"to\"),\n                ArgValidatorNum(\"tos\", default_value=None, val_min=1, val_max=255),\n                ArgValidatorRange(\"uid\", val_min=0, val_max=UINT32_MAX),\n            ],\n            default_value=None,\n        )\n\n    def _validate_post(self, value, name, result):\n        family = None\n        if result[\"family\"]:\n            family = Util.addr_family_norm(result[\"family\"])\n        elif result[\"from\"]:\n            family = result[\"from\"][\"family\"]\n        elif result[\"to\"]:\n            family = result[\"to\"][\"family\"]\n        if not family:\n            raise ValidationError(name, \"specify the address family 'family'\")\n\n        if result[\"from\"]:\n            if result[\"from\"][\"family\"] != family:\n                raise ValidationError(name, \"invalid address family in 'from'\")\n\n        if result[\"to\"]:\n            if result[\"to\"][\"family\"] != family:\n                raise ValidationError(name, \"invalid address family in 'to'\")\n\n        result[\"family\"] = family\n        if result[\"action\"] == \"to-table\":\n            if result[\"table\"] is None:\n                raise ValidationError(\n                    name,\n                    \"missing 'table' for the routing rule\",\n                )\n        # `from 0.0.0.0/0` means from all IPv4 addresses\n        # `from ::/0` means from all IPv6 addresses\n        # In NM, if `from` property is not specified in a routing rule, NM\n        # still appends `from 0.0.0.0/0` or `from ::/0` to the rule\n        if result[\"from\"] is not None and result[\"from\"][\"address\"] not in [\n            \"0.0.0.0\",\n            \"::\",\n        ]:\n            if result[\"from\"][\"prefix\"] == 0:\n                raise ValidationError(\n                    name,\n                    \"the prefix length for 'from' cannot be zero\",\n                )\n\n        # NM also allows to specify `to 0.0.0.0/0` or `to ::/0` in a routing\n        # rule, but the connection profiles will only show the `from` setting\n        # for the rule\n        if result[\"to\"] is not None and result[\"to\"][\"address\"] not in [\n            \"0.0.0.0\",\n            \"::\",\n        ]:\n            if result[\"to\"][\"prefix\"] == 0:\n                raise ValidationError(\n                    name,\n                    \"the prefix length for 'to' cannot be zero\",\n                )\n\n        if (result[\"fwmask\"] is None) != (result[\"fwmark\"] is None):\n            raise ValidationError(\n                name,\n                \"'fwmask' and 'fwmark' must be set together\",\n            )\n\n        if result[\"iif\"] is not None:\n            if not Util.ifname_valid(result[\"iif\"]):\n                raise ValidationError(\n                    name,\n                    \"the incoming interface '{0}' specified in the routing rule is \"\n                    \"invalid interface_name\".format(result[\"iif\"]),\n                )\n\n        if result[\"oif\"] is not None:\n            if not Util.ifname_valid(result[\"oif\"]):\n                raise ValidationError(\n                    name,\n                    \"the outgoing interface '{0}' specified in the routing rule is \"\n                    \"invalid interface_name\".format(result[\"oif\"]),\n                )\n\n        if result[\"suppress_prefixlength\"] is not None:\n            if not Util.addr_family_valid_prefix(\n                result[\"family\"], result[\"suppress_prefixlength\"]\n            ):\n                raise ValidationError(\n                    name,\n                    \"The specified 'suppress_prefixlength' cannot be greater than \"\n                    \"{0}\".format(Util.addr_family_prefix_length(result[\"family\"])),\n                )\n\n            if result[\"action\"] != \"to-table\":\n                raise ValidationError(\n                    name,\n                    \"'suppress_prefixlength' is only allowed with the to-table action\",\n                )\n        return result\n\n\nclass ArgValidator_DictIP(ArgValidatorDict):\n    REGEX_DNS_OPTIONS = [\n        r\"^attempts:([1-9]\\d*|0)$\",\n        r\"^debug$\",\n        r\"^edns0$\",\n        r\"^inet6$\",\n        r\"^ip6-bytestring$\",\n        r\"^ip6-dotint$\",\n        r\"^ndots:([1-9]\\d*|0)$\",\n        r\"^no-aaaa$\",\n        r\"^no-check-names$\",\n        r\"^no-ip6-dotint$\",\n        r\"^no-reload$\",\n        r\"^no-tld-query$\",\n        r\"^rotate$\",\n        r\"^single-request$\",\n        r\"^single-request-reopen$\",\n        r\"^timeout:([1-9]\\d*|0)$\",\n        r\"^trust-ad$\",\n        r\"^use-vc$\",\n    ]\n\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"ip\",\n            nested=[\n                ArgValidatorBool(\"dhcp4\", default_value=None),\n                ArgValidatorBool(\"dhcp4_send_hostname\", default_value=None),\n                ArgValidatorIP(\"gateway4\", family=socket.AF_INET),\n                ArgValidatorNum(\n                    \"route_metric4\", val_min=-1, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorBool(\"auto6\", default_value=None),\n                ArgValidatorBool(\"ipv4_ignore_auto_dns\", default_value=None),\n                ArgValidatorBool(\"ipv6_ignore_auto_dns\", default_value=None),\n                ArgValidatorStr(\n                    \"wait_ip\",\n                    enum_values=[\"any\", \"ipv4\", \"ipv6\", \"ipv4+ipv6\"],\n                    default_value=\"any\",\n                ),\n                ArgValidatorBool(\"ipv6_disabled\", default_value=None),\n                ArgValidatorIP(\"gateway6\", family=socket.AF_INET6),\n                ArgValidatorNum(\n                    \"route_metric6\", val_min=-1, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorList(\n                    \"address\",\n                    nested=ArgValidatorIPAddr(\"address[?]\"),\n                    default_value=list,\n                ),\n                ArgValidatorBool(\"auto_gateway\", default_value=None),\n                ArgValidatorList(\n                    \"route\", nested=ArgValidatorIPRoute(\"route[?]\"), default_value=list\n                ),\n                ArgValidatorBool(\"route_append_only\"),\n                ArgValidatorBool(\"rule_append_only\"),\n                ArgValidatorList(\n                    \"dns\",\n                    nested=ArgValidatorIP(\"dns[?]\", plain_address=False),\n                    default_value=list,\n                ),\n                ArgValidatorList(\n                    \"dns_search\",\n                    nested=ArgValidatorStr(\"dns_search[?]\"),\n                    default_value=list,\n                ),\n                ArgValidatorList(\n                    \"dns_options\",\n                    nested=ArgValidatorStr(\n                        \"dns_options[?]\", regex=ArgValidator_DictIP.REGEX_DNS_OPTIONS\n                    ),\n                    default_value=list,\n                ),\n                ArgValidatorNum(\n                    \"dns_priority\",\n                    val_min=-2147483648,\n                    val_max=2147483647,\n                    default_value=0,\n                ),\n                ArgValidatorList(\n                    \"routing_rule\",\n                    nested=ArgValidatorIPRoutingRule(\"routing_rule[?]\"),\n                    default_value=list,\n                ),\n            ],\n            default_value=lambda: {\n                \"dhcp4\": True,\n                \"dhcp4_send_hostname\": None,\n                \"gateway4\": None,\n                \"route_metric4\": None,\n                \"auto6\": True,\n                \"ipv4_ignore_auto_dns\": None,\n                \"ipv6_ignore_auto_dns\": None,\n                \"wait_ip\": \"any\",\n                \"ipv6_disabled\": False,\n                \"gateway6\": None,\n                \"route_metric6\": None,\n                \"address\": [],\n                \"auto_gateway\": None,\n                \"route\": [],\n                \"routing_rule\": [],\n                \"route_append_only\": False,\n                \"rule_append_only\": False,\n                \"dns\": [],\n                \"dns_search\": [],\n                \"dns_options\": [],\n                \"dns_priority\": 0,\n            },\n        )\n\n    def _validate_post(self, value, name, result):\n\n        has_ipv6_addresses = any(\n            addr for addr in result[\"address\"] if addr[\"family\"] == socket.AF_INET6\n        )\n\n        if result[\"ipv6_disabled\"] is True:\n            if result[\"auto6\"] is True:\n                raise ValidationError(\n                    name, \"'auto6' and 'ipv6_disabled' are mutually exclusive\"\n                )\n            if has_ipv6_addresses:\n                raise ValidationError(\n                    name,\n                    \"'ipv6_disabled' and static IPv6 addresses are mutually exclusive\",\n                )\n            if result[\"gateway6\"] is not None:\n                raise ValidationError(\n                    name, \"'ipv6_disabled' and 'gateway6' are mutually exclusive\"\n                )\n            if result[\"route_metric6\"] is not None:\n                raise ValidationError(\n                    name, \"'ipv6_disabled' and 'route_metric6' are mutually exclusive\"\n                )\n        elif result[\"ipv6_disabled\"] is None:\n            # \"ipv6_disabled\" is not explicitly set, we always set it to False.\n            # Either \"auto6\" is enabled or static addresses are set, then this\n            # is clearly correct.\n            # Even with \"auto6:False\" and no IPv6 addresses, we at least enable\n            # IPv6 link local addresses.\n            result[\"ipv6_disabled\"] = False\n\n        if result[\"dhcp4\"] is None:\n            result[\"dhcp4\"] = result[\"dhcp4_send_hostname\"] is not None or not any(\n                addr for addr in result[\"address\"] if addr[\"family\"] == socket.AF_INET\n            )\n\n        if result[\"auto6\"] is None:\n            result[\"auto6\"] = not has_ipv6_addresses\n\n        if result[\"dhcp4_send_hostname\"] is not None:\n            if not result[\"dhcp4\"]:\n                raise ValidationError(\n                    name, \"'dhcp4_send_hostname' is only valid if 'dhcp4' is enabled\"\n                )\n\n        ipv4_gw_defined = result[\"gateway4\"] is not None\n        ipv6_gw_defined = result[\"gateway6\"] is not None\n        dhcp_enabled = result[\"dhcp4\"] or result[\"auto6\"]\n\n        if result[\"auto_gateway\"] and not (\n            ipv4_gw_defined or ipv6_gw_defined or dhcp_enabled\n        ):\n            raise ValidationError(\n                name,\n                \"must define 'gateway4', 'gateway6', or use dhcp \"\n                \"if 'auto_gateway' is enabled\",\n            )\n\n        return result\n\n\nclass ArgValidator_DictEthernet(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"ethernet\",\n            nested=[\n                ArgValidatorBool(\"autoneg\", default_value=None),\n                ArgValidatorNum(\n                    \"speed\", val_min=0, val_max=UINT32_MAX, default_value=0\n                ),\n                ArgValidatorStr(\n                    \"duplex\", enum_values=[\"half\", \"full\"], default_value=None\n                ),\n            ],\n            default_value=ArgValidator.MISSING,\n        )\n\n    def get_default_ethernet(self):\n        return dict([(k, v.get_default_value()) for k, v in self.nested.items()])\n\n    def _validate_post(self, value, name, result):\n        has_speed_or_duplex = result[\"speed\"] != 0 or result[\"duplex\"] is not None\n        if result[\"autoneg\"] is None:\n            if has_speed_or_duplex:\n                result[\"autoneg\"] = False\n        elif result[\"autoneg\"]:\n            if has_speed_or_duplex:\n                raise ValidationError(\n                    name,\n                    \"cannot specify '%s' with 'autoneg' enabled\"\n                    % (\"duplex\" if result[\"duplex\"] is not None else \"speed\"),\n                )\n        else:\n            if not has_speed_or_duplex:\n                raise ValidationError(\n                    name, \"need to specify 'duplex' and 'speed' with 'autoneg' enabled\"\n                )\n        if has_speed_or_duplex and (result[\"speed\"] == 0 or result[\"duplex\"] is None):\n            raise ValidationError(\n                name,\n                \"need to specify both 'speed' and 'duplex' with 'autoneg' disabled\",\n            )\n        return result\n\n\nclass ArgValidator_DictEthtool(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"ethtool\",\n            nested=[\n                ArgValidator_DictEthtoolFeatures(),\n                ArgValidator_DictEthtoolCoalesce(),\n                ArgValidator_DictEthtoolRing(),\n            ],\n        )\n\n\nclass ArgValidator_DictEthtoolFeatures(ArgValidatorDict):\n    # List of features created with:\n    # nmcli connection modify \"virbr0\" ethtool.feature- on |& \\\n    #   sed -e 's_[,:]_\\n_g'  | \\ # split output in newlines\n    #   grep ^\\ f | \\ # select only lines starting with \" f\"\n    #   tr -d \" .\" | \\ # remove spaces and fullstops\n    #   sed -e 's,feature-,ArgValidatorBool(\",' \\ # add Python code\n    #       -e 's/$/\", default_value=None)],/'\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"features\",\n            nested=[\n                ArgValidatorBool(\"esp_hw_offload\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"esp-hw-offload\", deprecated_by=\"esp_hw_offload\"\n                ),\n                ArgValidatorBool(\"esp_tx_csum_hw_offload\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"esp-tx-csum-hw-offload\",\n                    deprecated_by=\"esp_tx_csum_hw_offload\",\n                ),\n                ArgValidatorBool(\"fcoe_mtu\", default_value=None),\n                ArgValidatorDeprecated(\"fcoe-mtu\", deprecated_by=\"fcoe_mtu\"),\n                ArgValidatorBool(\"gro\", default_value=None),\n                ArgValidatorBool(\"gso\", default_value=None),\n                ArgValidatorBool(\"highdma\", default_value=None),\n                ArgValidatorBool(\"hw_tc_offload\", default_value=None),\n                ArgValidatorDeprecated(\"hw-tc-offload\", deprecated_by=\"hw_tc_offload\"),\n                ArgValidatorBool(\"l2_fwd_offload\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"l2-fwd-offload\", deprecated_by=\"l2_fwd_offload\"\n                ),\n                ArgValidatorBool(\"loopback\", default_value=None),\n                ArgValidatorBool(\"lro\", default_value=None),\n                ArgValidatorBool(\"ntuple\", default_value=None),\n                ArgValidatorBool(\"rx\", default_value=None),\n                ArgValidatorBool(\"rxhash\", default_value=None),\n                ArgValidatorBool(\"rxvlan\", default_value=None),\n                ArgValidatorBool(\"rx_all\", default_value=None),\n                ArgValidatorDeprecated(\"rx-all\", deprecated_by=\"rx_all\"),\n                ArgValidatorBool(\"rx_fcs\", default_value=None),\n                ArgValidatorDeprecated(\"rx-fcs\", deprecated_by=\"rx_fcs\"),\n                ArgValidatorBool(\"rx_gro_hw\", default_value=None),\n                ArgValidatorDeprecated(\"rx-gro-hw\", deprecated_by=\"rx_gro_hw\"),\n                ArgValidatorBool(\"rx_udp_tunnel_port_offload\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"rx-udp_tunnel-port-offload\",\n                    deprecated_by=\"rx_udp_tunnel_port_offload\",\n                ),\n                ArgValidatorBool(\"rx_vlan_filter\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"rx-vlan-filter\", deprecated_by=\"rx_vlan_filter\"\n                ),\n                ArgValidatorBool(\"rx_vlan_stag_filter\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"rx-vlan-stag-filter\",\n                    deprecated_by=\"rx_vlan_stag_filter\",\n                ),\n                ArgValidatorBool(\"rx_vlan_stag_hw_parse\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"rx-vlan-stag-hw-parse\",\n                    deprecated_by=\"rx_vlan_stag_hw_parse\",\n                ),\n                ArgValidatorBool(\"sg\", default_value=None),\n                ArgValidatorBool(\"tls_hw_record\", default_value=None),\n                ArgValidatorDeprecated(\"tls-hw-record\", deprecated_by=\"tls_hw_record\"),\n                ArgValidatorBool(\"tls_hw_tx_offload\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tls-hw-tx-offload\",\n                    deprecated_by=\"tls_hw_tx_offload\",\n                ),\n                ArgValidatorBool(\"tso\", default_value=None),\n                ArgValidatorBool(\"tx\", default_value=None),\n                ArgValidatorBool(\"txvlan\", default_value=None),\n                ArgValidatorBool(\"tx_checksum_fcoe_crc\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-checksum-fcoe-crc\",\n                    deprecated_by=\"tx_checksum_fcoe_crc\",\n                ),\n                ArgValidatorBool(\"tx_checksum_ipv4\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-checksum-ipv4\",\n                    deprecated_by=\"tx_checksum_ipv4\",\n                ),\n                ArgValidatorBool(\"tx_checksum_ipv6\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-checksum-ipv6\",\n                    deprecated_by=\"tx_checksum_ipv6\",\n                ),\n                ArgValidatorBool(\"tx_checksum_ip_generic\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-checksum-ip-generic\",\n                    deprecated_by=\"tx_checksum_ip_generic\",\n                ),\n                ArgValidatorBool(\"tx_checksum_sctp\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-checksum-sctp\",\n                    deprecated_by=\"tx_checksum_sctp\",\n                ),\n                ArgValidatorBool(\"tx_esp_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-esp-segmentation\",\n                    deprecated_by=\"tx_esp_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_fcoe_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-fcoe-segmentation\",\n                    deprecated_by=\"tx_fcoe_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_gre_csum_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-gre-csum-segmentation\",\n                    deprecated_by=\"tx_gre_csum_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_gre_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-gre-segmentation\",\n                    deprecated_by=\"tx_gre_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_gso_partial\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-gso-partial\", deprecated_by=\"tx_gso_partial\"\n                ),\n                ArgValidatorBool(\"tx_gso_robust\", default_value=None),\n                ArgValidatorDeprecated(\"tx-gso-robust\", deprecated_by=\"tx_gso_robust\"),\n                ArgValidatorBool(\"tx_ipxip4_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-ipxip4-segmentation\",\n                    deprecated_by=\"tx_ipxip4_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_ipxip6_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-ipxip6-segmentation\",\n                    deprecated_by=\"tx_ipxip6_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_nocache_copy\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-nocache-copy\",\n                    deprecated_by=\"tx_nocache_copy\",\n                ),\n                ArgValidatorBool(\"tx_scatter_gather\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-scatter-gather\",\n                    deprecated_by=\"tx_scatter_gather\",\n                ),\n                ArgValidatorBool(\"tx_scatter_gather_fraglist\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-scatter-gather-fraglist\",\n                    deprecated_by=\"tx_scatter_gather_fraglist\",\n                ),\n                ArgValidatorBool(\"tx_sctp_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-sctp-segmentation\",\n                    deprecated_by=\"tx_sctp_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_tcp6_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-tcp6-segmentation\",\n                    deprecated_by=\"tx_tcp6_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_tcp_ecn_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-tcp-ecn-segmentation\",\n                    deprecated_by=\"tx_tcp_ecn_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_tcp_mangleid_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-tcp-mangleid-segmentation\",\n                    deprecated_by=\"tx_tcp_mangleid_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_tcp_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-tcp-segmentation\",\n                    deprecated_by=\"tx_tcp_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_udp_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-udp-segmentation\",\n                    deprecated_by=\"tx_udp_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_udp_tnl_csum_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-udp_tnl-csum-segmentation\",\n                    deprecated_by=\"tx_udp_tnl_csum_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_udp_tnl_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-udp_tnl-segmentation\",\n                    deprecated_by=\"tx_udp_tnl_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_vlan_stag_hw_insert\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-vlan-stag-hw-insert\",\n                    deprecated_by=\"tx_vlan_stag_hw_insert\",\n                ),\n            ],\n        )\n\n\nclass ArgValidator_DictEthtoolCoalesce(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"coalesce\",\n            nested=[\n                ArgValidatorBool(\"adaptive_rx\", default_value=None),\n                ArgValidatorBool(\"adaptive_tx\", default_value=None),\n                ArgValidatorNum(\n                    \"pkt_rate_high\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"pkt_rate_low\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_frames\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_frames_high\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_frames_irq\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_frames_low\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_usecs\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_usecs_high\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_usecs_irq\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_usecs_low\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"sample_interval\",\n                    val_min=0,\n                    val_max=UINT32_MAX,\n                    default_value=None,\n                ),\n                ArgValidatorNum(\n                    \"stats_block_usecs\",\n                    val_min=0,\n                    val_max=UINT32_MAX,\n                    default_value=None,\n                ),\n                ArgValidatorNum(\n                    \"tx_frames\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_frames_high\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_frames_irq\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_frames_low\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_usecs\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_usecs_high\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_usecs_irq\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_usecs_low\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n            ],\n        )\n\n\nclass ArgValidator_DictEthtoolRing(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"ring\",\n            nested=[\n                ArgValidatorNum(\n                    \"rx\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_jumbo\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_mini\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n            ],\n        )\n\n\nclass ArgValidator_DictBond(ArgValidatorDict):\n\n    VALID_MODES = [\n        \"balance-rr\",\n        \"active-backup\",\n        \"balance-xor\",\n        \"broadcast\",\n        \"802.3ad\",\n        \"balance-tlb\",\n        \"balance-alb\",\n    ]\n\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"bond\",\n            nested=[\n                ArgValidatorStr(\"mode\", enum_values=ArgValidator_DictBond.VALID_MODES),\n                ArgValidatorNum(\n                    \"ad_actor_sys_prio\", val_min=1, val_max=65535, default_value=None\n                ),\n                ArgValidatorMac(\"ad_actor_system\"),\n                ArgValidatorStr(\n                    \"ad_select\", enum_values=[\"stable\", \"bandwidth\", \"count\"]\n                ),\n                ArgValidatorNum(\n                    \"ad_user_port_key\", val_min=0, val_max=1023, default_value=None\n                ),\n                ArgValidatorBool(\"all_ports_active\", default_value=None),\n                ArgValidatorStr(\"arp_all_targets\", enum_values=[\"any\", \"all\"]),\n                ArgValidatorNum(\n                    \"arp_interval\", val_min=0, val_max=1000000, default_value=None\n                ),\n                ArgValidatorStr(\n                    \"arp_validate\",\n                    enum_values=[\n                        \"none\",\n                        \"active\",\n                        \"backup\",\n                        \"all\",\n                        \"filter\",\n                        \"filter_active\",\n                        \"filter_backup\",\n                    ],\n                ),\n                ArgValidatorStr(\"arp_ip_target\"),\n                ArgValidatorNum(\n                    \"downdelay\", val_min=0, val_max=1000000, default_value=None\n                ),\n                ArgValidatorStr(\n                    \"fail_over_mac\", enum_values=[\"none\", \"active\", \"follow\"]\n                ),\n                ArgValidatorStr(\"lacp_rate\", enum_values=[\"slow\", \"fast\"]),\n                ArgValidatorNum(\n                    \"lp_interval\", val_min=1, val_max=1000000, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"miimon\", val_min=0, val_max=1000000, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"min_links\", val_min=0, val_max=1000000, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"num_grat_arp\", val_min=0, val_max=255, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"packets_per_port\", val_min=0, val_max=65535, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"peer_notif_delay\", val_min=0, val_max=1000000, default_value=None\n                ),\n                ArgValidatorStr(\"primary\"),\n                ArgValidatorStr(\n                    \"primary_reselect\", enum_values=[\"always\", \"better\", \"failure\"]\n                ),\n                ArgValidatorNum(\n                    \"resend_igmp\", val_min=0, val_max=255, default_value=None\n                ),\n                ArgValidatorBool(\"tlb_dynamic_lb\", default_value=None),\n                ArgValidatorNum(\n                    \"updelay\", val_min=0, val_max=1000000, default_value=None\n                ),\n                ArgValidatorBool(\"use_carrier\", default_value=None),\n                ArgValidatorStr(\n                    \"xmit_hash_policy\",\n                    enum_values=[\n                        \"layer2\",\n                        \"layer3+4\",\n                        \"layer2+3\",\n                        \"encap2+3\",\n                        \"encap3+4\",\n                        \"vlan+srcmac\",\n                    ],\n                ),\n            ],\n            default_value=ArgValidator.MISSING,\n        )\n\n    def _validate_post(self, value, name, result):\n        AD_OPTIONS = [\n            \"ad_actor_sys_prio\",\n            \"ad_actor_system\",\n            \"ad_user_port_key\",\n            \"lacp_rate\",\n        ]\n        ARP_OPTIONS = [\"arp_interval\", \"arp_ip_target\", \"arp_validate\"]\n        ARP_ONLY_MODE = [\"balance-rr\", \"active-backup\", \"balance-xor\", \"broadcast\"]\n\n        if result[\"mode\"] != \"802.3ad\":\n            for option in AD_OPTIONS:\n                if result[option] is not None:\n                    raise ValidationError(\n                        name,\n                        \"the bond option {0} is only valid with mode 802.3ad\".format(\n                            option\n                        ),\n                    )\n\n        if result[\"packets_per_port\"] is not None and result[\"mode\"] != \"balance-rr\":\n            raise ValidationError(\n                name,\n                \"the bond option packets_per_port is only valid with mode balance-rr\",\n            )\n\n        if result[\"mode\"] not in ARP_ONLY_MODE:\n            for option in ARP_OPTIONS:\n                if result[option] is not None:\n                    raise ValidationError(\n                        name,\n                        \"the bond option {0} is only valid with mode balance-rr, active-backup, balance-xor or broadcast\".format(\n                            option\n                        ),\n                    )\n\n        if result[\"tlb_dynamic_lb\"] is not None and result[\"mode\"] not in [\n            \"balance-tlb\",\n            \"balance-alb\",\n        ]:\n            raise ValidationError(\n                name,\n                \"the bond option tlb_dynamic_lb is only valid with mode balance-tlb or balance-alb\",\n            )\n\n        if result[\"primary\"] is not None and result[\"mode\"] not in [\n            \"active-backup\",\n            \"balance-tlb\",\n            \"balance-alb\",\n        ]:\n            raise ValidationError(\n                name,\n                \"the bond option primary is only valid with mode active-backup, balance-tlb, balance-alb\",\n            )\n\n        if (\n            result[\"updelay\"] is not None or result[\"downdelay\"] is not None\n        ) and not result[\"miimon\"]:\n            raise ValidationError(\n                name,\n                \"the bond option downdelay or updelay is only valid with miimon enabled\",\n            )\n        if result[\"peer_notif_delay\"]:\n            if not result[\"miimon\"] or result[\"peer_notif_delay\"] % result[\"miimon\"]:\n                raise ValidationError(\n                    name,\n                    \"the bond option peer_notif_delay needs miimon enabled and must be miimon multiple\",\n                )\n            if result[\"arp_interval\"]:\n                raise ValidationError(\n                    name,\n                    \"the bond option peer_notif_delay needs arp_interval disabled\",\n                )\n        if result[\"arp_ip_target\"]:\n            if not result[\"arp_interval\"]:\n                raise ValidationError(\n                    name,\n                    \"the bond option arp_ip_target requires arp_interval to be set\",\n                )\n\n        if result[\"arp_interval\"]:\n            if not result[\"arp_ip_target\"]:\n                raise ValidationError(\n                    name,\n                    \"the bond option arp_interval requires arp_ip_target to be set\",\n                )\n\n        return result\n\n    def get_default_bond(self):\n        return {\n            \"mode\": ArgValidator_DictBond.VALID_MODES[0],\n            \"ad_actor_sys_prio\": None,\n            \"ad_actor_system\": None,\n            \"ad_select\": None,\n            \"ad_user_port_key\": None,\n            \"all_ports_active\": None,\n            \"arp_all_targets\": None,\n            \"arp_interval\": None,\n            \"arp_ip_target\": None,\n            \"arp_validate\": None,\n            \"downdelay\": None,\n            \"fail_over_mac\": None,\n            \"lacp_rate\": None,\n            \"lp_interval\": None,\n            \"miimon\": None,\n            \"min_links\": None,\n            \"num_grat_arp\": None,\n            \"packets_per_port\": None,\n            \"peer_notif_delay\": None,\n            \"primary\": None,\n            \"primary_reselect\": None,\n            \"resend_igmp\": None,\n            \"tlb_dynamic_lb\": None,\n            \"updelay\": None,\n            \"use_carrier\": None,\n            \"xmit_hash_policy\": None,\n        }\n\n\nclass ArgValidator_DictInfiniband(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"infiniband\",\n            nested=[\n                ArgValidatorStr(\n                    \"transport_mode\", enum_values=[\"datagram\", \"connected\"]\n                ),\n                ArgValidatorNum(\n                    \"p_key\", val_min=-1, val_max=0xFFFF, default_value=None\n                ),\n            ],\n            default_value=ArgValidator.MISSING,\n        )\n\n    def get_default_infiniband(self):\n        return {\"transport_mode\": \"datagram\", \"p_key\": None}\n\n\nclass ArgValidator_DictVlan(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"vlan\",\n            nested=[ArgValidatorNum(\"id\", val_min=0, val_max=4094, required=True)],\n            default_value=ArgValidator.MISSING,\n        )\n\n    def get_default_vlan(self):\n        return {\"id\": None}\n\n\nclass ArgValidator_DictMacvlan(ArgValidatorDict):\n\n    VALID_MODES = [\"vepa\", \"bridge\", \"private\", \"passthru\", \"source\"]\n\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"macvlan\",\n            nested=[\n                ArgValidatorStr(\n                    \"mode\",\n                    enum_values=ArgValidator_DictMacvlan.VALID_MODES,\n                    default_value=\"bridge\",\n                ),\n                ArgValidatorBool(\"promiscuous\", default_value=True),\n                ArgValidatorBool(\"tap\", default_value=False),\n            ],\n            default_value=ArgValidator.MISSING,\n        )\n\n    def get_default_macvlan(self):\n        return {\"mode\": \"bridge\", \"promiscuous\": True, \"tap\": False}\n\n    def _validate_post(self, value, name, result):\n        if result[\"promiscuous\"] is False and result[\"mode\"] != \"passthru\":\n            raise ValidationError(\n                name, \"non promiscuous operation is allowed only in passthru mode\"\n            )\n        return result\n\n\nclass ArgValidatorPath(ArgValidatorStr):\n    \"\"\"\n    Validates that the value is a valid posix absolute path\n    \"\"\"\n\n    def __init__(self, name, required=False, default_value=None):\n        ArgValidatorStr.__init__(self, name, required, default_value, None)\n\n    def _validate_impl(self, value, name):\n        ArgValidatorStr._validate_impl(self, value, name)\n\n        if posixpath.isabs(value) is False:\n            raise ValidationError(\n                name,\n                \"value '%s' is not a valid posix absolute path\" % (value),\n            )\n        return value\n\n\nclass ArgValidator_Dict802_1X(ArgValidatorDict):\n\n    VALID_EAP_TYPES = [\"tls\"]\n\n    VALID_PRIVATE_KEY_FLAGS = [\"none\", \"agent-owned\", \"not-saved\", \"not-required\"]\n\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"ieee802_1x\",\n            nested=[\n                ArgValidatorStr(\n                    \"eap\",\n                    enum_values=ArgValidator_Dict802_1X.VALID_EAP_TYPES,\n                    default_value=\"tls\",\n                ),\n                ArgValidatorStr(\"identity\", required=True),\n                ArgValidatorPath(\"private_key\", required=True),\n                ArgValidatorStr(\"private_key_password\"),\n                ArgValidatorList(\n                    \"private_key_password_flags\",\n                    nested=ArgValidatorStr(\n                        \"private_key_password_flags[?]\",\n                        enum_values=ArgValidator_Dict802_1X.VALID_PRIVATE_KEY_FLAGS,\n                    ),\n                    default_value=None,\n                ),\n                ArgValidatorPath(\"client_cert\", required=True),\n                ArgValidatorPath(\"ca_cert\"),\n                ArgValidatorPath(\"ca_path\"),\n                ArgValidatorBool(\"system_ca_certs\", default_value=False),\n                ArgValidatorStr(\"domain_suffix_match\", required=False),\n            ],\n            default_value=None,\n        )\n\n    def _validate_post(self, value, name, result):\n        if result[\"system_ca_certs\"] is True and result[\"ca_path\"] is not None:\n            raise ValidationError(\n                name,\n                \"ca_path will be ignored by NetworkManager if system_ca_certs is used\",\n            )\n        return result\n\n\nclass ArgValidator_DictWireless(ArgValidatorDict):\n\n    VALID_KEY_MGMT = [\n        \"owe\",\n        \"sae\",\n        \"wpa-eap\",\n        \"wpa-psk\",\n    ]\n\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"wireless\",\n            nested=[\n                ArgValidatorStr(\"ssid\", max_length=32),\n                ArgValidatorStr(\n                    \"key_mgmt\", enum_values=ArgValidator_DictWireless.VALID_KEY_MGMT\n                ),\n                ArgValidatorStr(\"password\", default_value=None, max_length=63),\n            ],\n            default_value=None,\n        )\n\n    def _validate_post(self, value, name, result):\n        if result[\"key_mgmt\"] == \"wpa-psk\" or result[\"key_mgmt\"] == \"sae\":\n            if result[\"password\"] is None:\n                raise ValidationError(\n                    name,\n                    \"must supply a password if using {0} key management\".format(\n                        result[\"key_mgmt\"]\n                    ),\n                )\n        else:\n            if result[\"password\"] is not None:\n                raise ValidationError(\n                    name,\n                    \"password only allowed if using 'wpa-psk' or 'sae' key management\",\n                )\n\n        return result\n\n\nclass ArgValidatorListMatchPath(ArgValidatorList):\n    def __init__(self, name, nested, default_value, remove_none_or_empty):\n        ArgValidatorList.__init__(\n            self,\n            name,\n            nested,\n            default_value,\n            remove_none_or_empty,\n        )\n\n    def _validate_impl(self, value, name):\n        result = ArgValidatorList._validate_impl(self, value, name)\n        if result == [\"|\"] or result == [\"&\"]:\n            raise ValidationError(\n                name,\n                \"value '%s' is not a valid 'match.path' setting, after \"\n                \"normalization, '%s' will only match the devices that have no PCI \"\n                \"path\" % (value, result),\n            )\n        return result\n\n\nclass ArgValidator_DictMatch(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"match\",\n            nested=[\n                ArgValidatorListMatchPath(\n                    \"path\",\n                    nested=ArgValidatorStr(\"path[?]\", allow_empty=True),\n                    default_value=None,\n                    remove_none_or_empty=True,\n                ),\n            ],\n            default_value={},\n        )\n\n\nclass ArgValidator_DictConnection(ArgValidatorDict):\n\n    VALID_PERSISTENT_STATES = [\"absent\", \"present\"]\n    VALID_STATES = VALID_PERSISTENT_STATES + [\"up\", \"down\"]\n    VALID_TYPES = [\n        \"ethernet\",\n        \"infiniband\",\n        \"bridge\",\n        \"team\",\n        \"bond\",\n        \"vlan\",\n        \"macvlan\",\n        \"wireless\",\n        # wokeignore:rule=dummy\n        \"dummy\",\n    ]\n    VALID_PORT_TYPES = [\"bridge\", \"bond\", \"team\"]\n\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"connection\",\n            nested=[\n                ArgValidatorStr(\"name\"),\n                ArgValidatorStr(\n                    \"state\", enum_values=ArgValidator_DictConnection.VALID_STATES\n                ),\n                ArgValidatorStr(\n                    \"persistent_state\",\n                    enum_values=ArgValidator_DictConnection.VALID_PERSISTENT_STATES,\n                ),\n                ArgValidatorBool(\"force_state_change\", default_value=None),\n                ArgValidatorNum(\n                    \"wait\",\n                    val_min=0,\n                    val_max=3600,\n                    numeric_type=float,\n                    default_value=None,\n                ),\n                ArgValidatorStr(\n                    \"type\", enum_values=ArgValidator_DictConnection.VALID_TYPES\n                ),\n                ArgValidatorBool(\"autoconnect\", default_value=True),\n                ArgValidatorNum(\n                    \"autoconnect_retries\",\n                    val_min=0,\n                    val_max=UINT32_MAX,\n                    default_value=-1,\n                ),\n                ArgValidatorStr(\n                    \"port_type\",\n                    enum_values=ArgValidator_DictConnection.VALID_PORT_TYPES,\n                ),\n                ArgValidatorDeprecated(\n                    # wokeignore:rule=slave\n                    \"slave_type\",\n                    deprecated_by=\"port_type\",\n                ),\n                ArgValidatorStr(\"controller\"),\n                # wokeignore:rule=master\n                ArgValidatorDeprecated(\"master\", deprecated_by=\"controller\"),\n                ArgValidatorStr(\"interface_name\", allow_empty=True),\n                ArgValidatorMac(\"mac\"),\n                ArgValidatorMac(\n                    \"cloned_mac\",\n                    enum_values=[\n                        \"default\",\n                        \"preserve\",\n                        \"permanent\",\n                        \"random\",\n                        \"stable\",\n                    ],\n                    default_value=\"default\",\n                ),\n                ArgValidatorNum(\n                    \"mtu\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorStr(\"zone\"),\n                ArgValidatorBool(\"check_iface_exists\", default_value=True),\n                ArgValidatorStr(\"parent\"),\n                ArgValidatorBool(\"ignore_errors\", default_value=None),\n                ArgValidator_DictIP(),\n                ArgValidator_DictEthernet(),\n                ArgValidator_DictEthtool(),\n                ArgValidator_DictBond(),\n                ArgValidator_DictInfiniband(),\n                ArgValidator_DictVlan(),\n                ArgValidator_DictMacvlan(),\n                ArgValidator_Dict802_1X(),\n                ArgValidator_DictWireless(),\n                ArgValidator_DictMatch(),\n                # deprecated options:\n                ArgValidatorStr(\n                    \"infiniband_transport_mode\",\n                    enum_values=[\"datagram\", \"connected\"],\n                    default_value=ArgValidator.MISSING,\n                ),\n                ArgValidatorNum(\n                    \"infiniband_p_key\",\n                    val_min=-1,\n                    val_max=0xFFFF,\n                    default_value=ArgValidator.MISSING,\n                ),\n                ArgValidatorNum(\n                    \"vlan_id\",\n                    val_min=0,\n                    val_max=4094,\n                    default_value=ArgValidator.MISSING,\n                ),\n            ],\n            default_value=dict,\n            all_missing_during_validate=True,\n        )\n\n        # valid field based on specified state, used to set defaults and reject\n        # bad values\n        self.VALID_FIELDS = []\n\n    def _validate_post_state(self, value, name, result):\n        \"\"\"\n        Validate state definitions and create a corresponding list of actions.\n        \"\"\"\n        actions = []\n        state = result.get(\"state\")\n        persistent_state = result.get(\"persistent_state\")\n\n        if state in self.VALID_PERSISTENT_STATES:\n            if persistent_state:\n                raise ValidationError(\n                    name,\n                    \"State cannot be '{0}' if persistent_state is specified\".format(\n                        state\n                    ),\n                )\n            persistent_state = state\n            state = None\n\n        # default persistent_state to present (not done via default_value in the\n        # ArgValidatorStr, the value will only be set at the end of\n        # _validate_post()\n        if not persistent_state:\n            persistent_state = \"present\"\n\n        # If the profile should be absent at the end, it needs to be present in\n        # the meantime to allow to (de)activate it. This is only possible if it\n        # is completely defined, for which `type` needs to be specified.\n        # Otherwise, downing is happening on a best-effort basis\n        if persistent_state == \"absent\" and state and result.get(\"type\"):\n            actions.append(\"present\")\n\n        actions.append(persistent_state)\n\n        # Change the runtime state if necessary\n        if state:\n            actions.append(state)\n\n        result[\"state\"] = state\n        result[\"persistent_state\"] = persistent_state\n        result[\"actions\"] = actions\n\n        return result\n\n    def _validate_post_fields(self, value, name, result):\n        \"\"\"\n        Validate the allowed fields (settings depending on the requested state).\n        FIXME: Maybe it should check whether \"up\"/\"down\" is present in the\n        actions instead of checking the runtime state from \"state\" to switch\n        from state to actions after the state parsing is done.\n        \"\"\"\n        state = result.get(\"state\")\n        persistent_state = result.get(\"persistent_state\")\n\n        # minimal settings not related to runtime changes\n        valid_fields = [\"actions\", \"ignore_errors\", \"name\", \"persistent_state\", \"state\"]\n\n        # when type is present, a profile is completely specified (using\n        # defaults or other settings)\n        if \"type\" in result:\n            valid_fields += list(self.nested.keys())\n\n        # If there are no runtime changes, \"wait\" and \"force_state_change\" do\n        # not make sense\n        # FIXME: Maybe this restriction can be removed. Need to make sure that\n        # defaults for wait or force_state_change do not interfere\n        if not state:\n            while \"wait\" in valid_fields:\n                valid_fields.remove(\"wait\")\n            while \"force_state_change\" in valid_fields:\n                valid_fields.remove(\"force_state_change\")\n        else:\n            valid_fields += [\"force_state_change\", \"wait\"]\n\n        # FIXME: Maybe just accept all values, even if they are not\n        # needed/meaningful in the respective context\n        valid_fields = set(valid_fields)\n        for key in result:\n            if key not in valid_fields:\n                raise ValidationError(\n                    name + \".\" + key,\n                    \"property is not allowed for state '%s' and persistent_state '%s'\"\n                    % (state, persistent_state),\n                )\n\n        if \"name\" not in result:\n            if persistent_state == \"absent\":\n                result[\"name\"] = \"\"  # set to empty string to mean *absent all others*\n            else:\n                raise ValidationError(name, \"missing 'name'\")\n\n        # FIXME: Seems to be a duplicate check since \"wait\" will be removed from\n        # valid_keys when state is considered to be not True\n        if \"wait\" in result and not state:\n            raise ValidationError(\n                name + \".wait\",\n                \"'wait' is not allowed for state '%s'\" % (result[\"state\"]),\n            )\n\n        result[\"state\"] = state\n        result[\"persistent_state\"] = persistent_state\n\n        self.VALID_FIELDS = valid_fields\n        return result\n\n    def _validate_post_wireless(self, value, name, result):\n        \"\"\"\n        Validate wireless settings\n        \"\"\"\n        if \"type\" in result:\n            if result[\"type\"] == \"wireless\":\n                if \"wireless\" in result:\n                    if (\n                        result[\"wireless\"][\"key_mgmt\"] == \"wpa-eap\"\n                        and \"ieee802_1x\" not in result\n                    ):\n                        raise ValidationError(\n                            name + \".wireless\",\n                            \"key management set to wpa-eap but no \"\n                            \"'ieee802_1x' settings defined\",\n                        )\n                else:\n                    raise ValidationError(\n                        name + \".wireless\",\n                        \"must define 'wireless' settings for 'type' 'wireless'\",\n                    )\n\n            else:\n                if \"wireless\" in result:\n                    raise ValidationError(\n                        name + \".wireless\",\n                        \"'wireless' settings are not allowed for 'type' '%s'\"\n                        % (result[\"type\"]),\n                    )\n\n        return result\n\n    def _validate_post(self, value, name, result):\n        result = self._validate_post_state(value, name, result)\n        result = self._validate_post_fields(value, name, result)\n        result = self._validate_post_wireless(value, name, result)\n\n        if \"type\" in result:\n\n            if \"controller\" in result:\n                if \"port_type\" not in result:\n                    result[\"port_type\"] = None\n                if result[\"controller\"] == result[\"name\"]:\n                    raise ValidationError(\n                        name + \".controller\", '\"controller\" cannot refer to itself'\n                    )\n            else:\n                if \"port_type\" in result:\n                    raise ValidationError(\n                        name + \".port_type\",\n                        \"'port_type' requires a 'controller' property\",\n                    )\n\n            if \"ip\" in result:\n                if \"controller\" in result:\n                    raise ValidationError(\n                        name + \".ip\", 'a port cannot have an \"ip\" property'\n                    )\n            else:\n                if \"controller\" not in result:\n                    result[\"ip\"] = self.nested[\"ip\"].get_default_value()\n\n            if \"zone\" in result:\n                if \"controller\" in result:\n                    raise ValidationError(\n                        name + \".zone\", '\"zone\" cannot be configured for port types'\n                    )\n            else:\n                result[\"zone\"] = None\n\n            if \"mac\" in result:\n                if result[\"type\"] not in [\"ethernet\", \"infiniband\"]:\n                    raise ValidationError(\n                        name + \".mac\",\n                        \"a 'mac' address is only allowed for type 'ethernet' \"\n                        \"or 'infiniband'\",\n                    )\n                maclen = len(Util.mac_aton(result[\"mac\"]))\n                if result[\"type\"] == \"ethernet\" and maclen != 6:\n                    raise ValidationError(\n                        name + \".mac\",\n                        \"a 'mac' address for type ethernet requires 6 octets \"\n                        \"but is '%s'\" % result[\"mac\"],\n                    )\n                if result[\"type\"] == \"infiniband\" and maclen != 20:\n                    raise ValidationError(\n                        name + \".mac\",\n                        \"a 'mac' address for type ethernet requires 20 octets \"\n                        \"but is '%s'\" % result[\"mac\"],\n                    )\n\n            if result.get(\"match\"):\n                if \"path\" in result[\"match\"]:\n                    if result[\"type\"] not in [\"ethernet\", \"infiniband\"]:\n                        raise ValidationError(\n                            name + \".match.path\",\n                            \"'match.path' settings are only supported for type \"\n                            \"'ethernet' or 'infiniband'\",\n                        )\n\n            if result[\"type\"] == \"infiniband\":\n                if \"infiniband\" not in result:\n                    result[\"infiniband\"] = self.nested[\n                        \"infiniband\"\n                    ].get_default_infiniband()\n                    if \"infiniband_transport_mode\" in result:\n                        result[\"infiniband\"][\"transport_mode\"] = result[\n                            \"infiniband_transport_mode\"\n                        ]\n                        del result[\"infiniband_transport_mode\"]\n                    if \"infiniband_p_key\" in result:\n                        result[\"infiniband\"][\"p_key\"] = result[\"infiniband_p_key\"]\n                        del result[\"infiniband_p_key\"]\n                else:\n                    if \"infiniband_transport_mode\" in result:\n                        raise ValidationError(\n                            name + \".infiniband_transport_mode\",\n                            \"cannot mix deprecated 'infiniband_transport_mode' \"\n                            \"property with 'infiniband' settings\",\n                        )\n                    if \"infiniband_p_key\" in result:\n                        raise ValidationError(\n                            name + \".infiniband_p_key\",\n                            \"cannot mix deprecated 'infiniband_p_key' property \"\n                            \"with 'infiniband' settings\",\n                        )\n                    if result[\"infiniband\"][\"transport_mode\"] is None:\n                        result[\"infiniband\"][\"transport_mode\"] = \"datagram\"\n                # For the compatibility with NetworkManager API and the initial\n                # infiniband support in the role (the user may get used to set the\n                # `p_key` into `-1` to make the connection created on the physical\n                # infiniband interface), normalize the `p_key` setting as follows\n                if result[\"infiniband\"][\"p_key\"] == -1:\n                    result[\"infiniband\"][\"p_key\"] = None\n                if result[\"infiniband\"][\"p_key\"] is not None:\n                    if (\n                        result[\"infiniband\"][\"p_key\"] == 0x0000\n                        or result[\"infiniband\"][\"p_key\"] == 0x8000\n                    ):\n                        raise ValidationError(\n                            name,\n                            \"the pkey value {0} is not allowed as such a pkey value is not \"\n                            \"supported by kernel\".format(result[\"infiniband\"][\"p_key\"]),\n                        )\n                    if \"mac\" not in result and \"parent\" not in result:\n                        raise ValidationError(\n                            name + \".infiniband.p_key\",\n                            \"a infiniband device with 'infiniband.p_key' \"\n                            \"property also needs 'mac' or 'parent' property\",\n                        )\n                    if \"interface_name\" in result:\n                        raise ValidationError(\n                            name + \".interface_name\",\n                            \"the 'interface_name' must be unset for the ipoib \"\n                            \"connection, instead it is {0}\".format(\n                                result[\"interface_name\"]\n                            ),\n                        )\n            else:\n                if \"infiniband\" in result:\n                    raise ValidationError(\n                        name + \".infiniband\",\n                        \"'infiniband' settings are only allowed for type 'infiniband'\",\n                    )\n                if \"infiniband_transport_mode\" in result:\n                    raise ValidationError(\n                        name + \".infiniband_transport_mode\",\n                        \"a 'infiniband_transport_mode' property is only \"\n                        \"allowed for type 'infiniband'\",\n                    )\n                if \"infiniband_p_key\" in result:\n                    raise ValidationError(\n                        name + \".infiniband_p_key\",\n                        \"a 'infiniband_p_key' property is only allowed for \"\n                        \"type 'infiniband'\",\n                    )\n\n            if \"interface_name\" in result:\n                # Ignore empty interface_name\n                if result[\"interface_name\"] == \"\":\n                    del result[\"interface_name\"]\n                elif not Util.ifname_valid(result[\"interface_name\"]):\n                    raise ValidationError(\n                        name + \".interface_name\",\n                        \"invalid 'interface_name' '%s'\" % (result[\"interface_name\"]),\n                    )\n            else:\n                if (\n                    not result.get(\"mac\")\n                    and (not result.get(\"match\") or not result[\"match\"].get(\"path\"))\n                    and not (\n                        result[\"type\"] == \"infiniband\"\n                        and result[\"infiniband\"][\"p_key\"] is not None\n                    )\n                ):\n                    if not Util.ifname_valid(result[\"name\"]):\n                        raise ValidationError(\n                            name + \".interface_name\",\n                            \"'interface_name' as 'name' '%s' is not valid\"\n                            % (result[\"name\"]),\n                        )\n                    result[\"interface_name\"] = result[\"name\"]\n\n            if \"interface_name\" not in result and result[\"type\"] in [\n                \"bond\",\n                \"bridge\",\n                \"macvlan\",\n                \"team\",\n                \"vlan\",\n            ]:\n                raise ValidationError(\n                    name + \".interface_name\",\n                    \"type '%s' requires 'interface_name'\" % (result[\"type\"]),\n                )\n\n            if result[\"type\"] == \"vlan\":\n                if \"vlan\" not in result:\n                    if \"vlan_id\" not in result:\n                        raise ValidationError(\n                            name + \".vlan\", 'missing \"vlan\" settings for \"type\" \"vlan\"'\n                        )\n                    result[\"vlan\"] = self.nested[\"vlan\"].get_default_vlan()\n                    result[\"vlan\"][\"id\"] = result[\"vlan_id\"]\n                    del result[\"vlan_id\"]\n                else:\n                    if \"vlan_id\" in result:\n                        raise ValidationError(\n                            name + \".vlan_id\",\n                            \"don't use the deprecated 'vlan_id' together with the \"\n                            \"'vlan' settings'\",\n                        )\n                if \"parent\" not in result:\n                    raise ValidationError(\n                        name + \".parent\", 'missing \"parent\" for \"type\" \"vlan\"'\n                    )\n            else:\n                if \"vlan\" in result:\n                    raise ValidationError(\n                        name + \".vlan\", '\"vlan\" is only allowed for \"type\" \"vlan\"'\n                    )\n                if \"vlan_id\" in result:\n                    raise ValidationError(\n                        name + \".vlan_id\", '\"vlan_id\" is only allowed for \"type\" \"vlan\"'\n                    )\n\n            if \"parent\" in result:\n                if result[\"type\"] not in [\"vlan\", \"macvlan\", \"infiniband\"]:\n                    raise ValidationError(\n                        name + \".parent\",\n                        \"'parent' is only allowed for type 'vlan', 'macvlan' or \"\n                        \"'infiniband'\",\n                    )\n                if result[\"parent\"] == result[\"name\"]:\n                    raise ValidationError(\n                        name + \".parent\", '\"parent\" cannot refer to itself'\n                    )\n\n            if result[\"type\"] == \"bond\":\n                if \"bond\" not in result:\n                    result[\"bond\"] = self.nested[\"bond\"].get_default_bond()\n            else:\n                if \"bond\" in result:\n                    raise ValidationError(\n                        name + \".bond\",\n                        \"'bond' settings are not allowed for 'type' '%s'\"\n                        % (result[\"type\"]),\n                    )\n\n            if result[\"type\"] in [\"ethernet\", \"vlan\", \"bridge\", \"bond\", \"team\"]:\n                if \"ethernet\" not in result:\n                    result[\"ethernet\"] = self.nested[\"ethernet\"].get_default_ethernet()\n            else:\n                if \"ethernet\" in result:\n                    raise ValidationError(\n                        name + \".ethernet\",\n                        \"'ethernet' settings are not allowed for 'type' '%s'\"\n                        % (result[\"type\"]),\n                    )\n\n            if result[\"type\"] == \"macvlan\":\n                if \"macvlan\" not in result:\n                    result[\"macvlan\"] = self.nested[\"macvlan\"].get_default_macvlan()\n            else:\n                if \"macvlan\" in result:\n                    raise ValidationError(\n                        name + \".macvlan\",\n                        \"'macvlan' settings are not allowed for 'type' '%s'\"\n                        % (result[\"type\"]),\n                    )\n\n            if \"ieee802_1x\" in result and result[\"type\"] not in [\n                \"ethernet\",\n                \"wireless\",\n            ]:\n                raise ValidationError(\n                    name + \".ieee802_1x\",\n                    \"802.1x settings only allowed for ethernet or wireless interfaces.\",\n                )\n\n        for name in self.VALID_FIELDS:\n            if name in result:\n                continue\n            value = self.nested[name].get_default_value()\n            if value is not ArgValidator.MISSING:\n                result[name] = value\n\n        return result\n\n\nclass ArgValidator_ListConnections(ArgValidatorList):\n    def __init__(self):\n        ArgValidatorList.__init__(\n            self,\n            name=\"connections\",\n            nested=ArgValidator_DictConnection(),\n            default_value=list,\n        )\n\n    def _validate_post(self, value, name, result):\n        for idx, connection in enumerate(result):\n            if \"type\" in connection:\n                if connection[\"controller\"]:\n                    c = ArgUtil.connection_find_by_name(\n                        connection[\"controller\"], result, idx\n                    )\n                    if not c:\n                        raise ValidationError(\n                            name + \"[\" + str(idx) + \"].controller\",\n                            \"references non-existing 'controller' connection '%s'\"\n                            % (connection[\"controller\"]),\n                        )\n                    if c[\"type\"] not in ArgValidator_DictConnection.VALID_PORT_TYPES:\n                        raise ValidationError(\n                            name + \"[\" + str(idx) + \"].controller\",\n                            \"references 'controller' connection '%s' which is \"\n                            \"not a controller \"\n                            \"type by '%s'\" % (connection[\"controller\"], c[\"type\"]),\n                        )\n                    if connection[\"type\"] == \"infiniband\":\n                        if c[\"type\"] == \"bond\" and c[\"bond\"][\"mode\"] != \"active-backup\":\n                            raise ValidationError(\n                                name + \"[\" + str(idx) + \"].controller\",\n                                \"bond only supports infiniband ports in active-backup mode\",\n                            )\n                    if connection[\"port_type\"] is None:\n                        connection[\"port_type\"] = c[\"type\"]\n                    elif connection[\"port_type\"] != c[\"type\"]:\n                        raise ValidationError(\n                            name + \"[\" + str(idx) + \"].controller\",\n                            \"references 'controller' connection '%s' which is \"\n                            \"of type '%s' instead of port_type '%s'\"\n                            % (\n                                connection[\"controller\"],\n                                c[\"type\"],\n                                connection[\"port_type\"],\n                            ),\n                        )\n                if connection[\"parent\"]:\n                    if not ArgUtil.connection_find_by_name(\n                        connection[\"parent\"], result, idx\n                    ):\n                        raise ValidationError(\n                            name + \"[\" + str(idx) + \"].parent\",\n                            \"references non-existing 'parent' connection '%s'\"\n                            % (connection[\"parent\"]),\n                        )\n        return result\n\n    VALIDATE_ONE_MODE_NM = \"nm\"\n    VALIDATE_ONE_MODE_INITSCRIPTS = \"initscripts\"\n\n    def validate_route_tables(self, connection, idx):\n        rule_route_combined_list = (\n            connection[\"ip\"][\"route\"] + connection[\"ip\"][\"routing_rule\"]\n        )\n        for r in rule_route_combined_list:\n            if isinstance(r[\"table\"], Util.STRING_TYPE):\n                mapping = IPRouteUtils.get_route_tables_mapping()\n                if r[\"table\"] in mapping:\n                    r[\"table\"] = mapping[r[\"table\"]]\n                else:\n                    raise ValidationError.from_connection(\n                        idx,\n                        \"cannot find route table {0} in `/etc/iproute2/rt_tables` or \"\n                        \"`/etc/iproute2/rt_tables.d/`\".format(r[\"table\"]),\n                    )\n\n    def validate_connection_one(self, mode, connections, idx):\n        def _ipv4_enabled(connection):\n            has_addrs4 = any(\n                address[\"family\"] == socket.AF_INET\n                for address in connection[\"ip\"][\"address\"]\n            )\n            return connection[\"ip\"][\"dhcp4\"] or has_addrs4\n\n        def _ipv6_is_not_configured(connection):\n            has_addrs6 = any(\n                address[\"family\"] == socket.AF_INET6\n                for address in connection[\"ip\"][\"address\"]\n            )\n            return (\n                not connection[\"ip\"][\"ipv6_disabled\"]\n                and not connection[\"ip\"][\"auto6\"]\n                and not has_addrs6\n            )\n\n        connection = connections[idx]\n        if \"type\" not in connection:\n            return\n\n        if (connection[\"parent\"]) and (\n            (\n                (mode == self.VALIDATE_ONE_MODE_INITSCRIPTS)\n                and (connection[\"type\"] == \"vlan\")\n            )\n            or (\n                (connection[\"type\"] == \"infiniband\")\n                and (connection[\"infiniband\"][\"p_key\"] is not None)\n            )\n        ):\n            try:\n                ArgUtil.connection_find_controller(\n                    connection[\"parent\"], connections, idx\n                )\n            except MyError:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"profile references a parent '%s' which has 'interface_name' \"\n                    \"missing\" % (connection[\"parent\"]),\n                )\n\n        if (connection[\"controller\"]) and (mode == self.VALIDATE_ONE_MODE_INITSCRIPTS):\n            try:\n                ArgUtil.connection_find_controller(\n                    connection[\"controller\"], connections, idx\n                )\n            except MyError:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"profile references a controller '%s' which has 'interface_name' \"\n                    \"missing\" % (connection[\"controller\"]),\n                )\n\n        # check if 802.1x connection is valid\n        if connection[\"ieee802_1x\"]:\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"802.1x authentication is not supported by initscripts. \"\n                    \"Configure 802.1x in /etc/wpa_supplicant.conf \"\n                    \"if you need to use initscripts.\",\n                )\n\n        # check if wireless connection is valid\n        if connection[\"type\"] == \"wireless\":\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"Wireless WPA auth is not supported by initscripts. \"\n                    \"Configure wireless connection in /etc/wpa_supplicant.conf \"\n                    \"if you need to use initscripts.\",\n                )\n\n        # initscripts does not support ip.ipv4_ignore_auto_dns or\n        # ip.ipv6_ignore_auto_dns, so raise errors when network\n        # provider is initscripts\n        if (\n            connection[\"ip\"][\"ipv4_ignore_auto_dns\"] is not None\n            or connection[\"ip\"][\"ipv6_ignore_auto_dns\"] is not None\n        ):\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"ip.ipv4_ignore_auto_dns or ip.ipv6_ignore_auto_dns is not \"\n                    \"supported by initscripts.\",\n                )\n        # initscripts does not support ip.wait_ip,\n        # so raise errors when network provider is initscripts\n        if connection[\"ip\"][\"wait_ip\"] != \"any\":\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"ip.wait_ip is not supported by initscripts.\",\n                )\n        # initscripts does not support ip.dns_options, so raise errors when network\n        # provider is initscripts\n        if connection[\"ip\"][\"dns_options\"]:\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"ip.dns_options is not supported by initscripts.\",\n                )\n        # initscripts does not support ip.ipv6_disabled, so raise errors when network\n        # provider is initscripts\n        if connection[\"ip\"][\"ipv6_disabled\"]:\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"ip.ipv6_disabled is not supported by initscripts.\",\n                )\n            if not hasattr(Util.NM(), \"SETTING_IP6_CONFIG_METHOD_DISABLED\"):\n                raise ValidationError.from_connection(\n                    idx,\n                    \"ip.ipv6_disabled is not supported by the running version of \"\n                    \"NetworkManager, it requires at least version 1.20. But you can \"\n                    \"disable IPv6 auto configuration by setting ip.auto6 to False. \"\n                    \"Then NetworkManager will ignore IPv6 for this connection. This \"\n                    \"will still leave the sysctl value 'disable_ipv6' unchanged, but \"\n                    \"setting ip.ipv6_disabled to True in the role will set the sysctl \"\n                    \"value 'disable_ipv6' to True \",\n                )\n        # Setting ip.dns is not allowed when corresponding IP method for that\n        # nameserver is disabled\n        for nameserver in connection[\"ip\"][\"dns\"]:\n            if nameserver[\"family\"] == socket.AF_INET and not _ipv4_enabled(connection):\n                raise ValidationError.from_connection(\n                    idx,\n                    \"IPv4 needs to be enabled to support IPv4 nameservers.\",\n                )\n            if nameserver[\"family\"] == socket.AF_INET6 and (\n                connection[\"ip\"][\"ipv6_disabled\"] or _ipv6_is_not_configured(connection)\n            ):\n                raise ValidationError.from_connection(\n                    idx,\n                    \"IPv6 needs to be enabled to support IPv6 nameservers.\",\n                )\n        # when IPv4 and IPv6 are disabled, setting ip.dns_options or\n        # ip.dns_search or ip.dns_priority is not allowed\n        if (\n            connection[\"ip\"][\"dns_search\"]\n            or connection[\"ip\"][\"dns_options\"]\n            or connection[\"ip\"][\"dns_priority\"]\n        ):\n            if not _ipv4_enabled(connection) and connection[\"ip\"][\"ipv6_disabled\"]:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"Setting 'dns_search', 'dns_options' and 'dns_priority' are not \"\n                    \"allowed when both IPv4 and IPv6 are disabled.\",\n                )\n            elif not _ipv4_enabled(connection) and _ipv6_is_not_configured(connection):\n                raise ValidationError.from_connection(\n                    idx,\n                    \"Setting 'dns_search', 'dns_options' and 'dns_priority' are not \"\n                    \"allowed when IPv4 is disabled and IPv6 is not configured.\",\n                )\n        # DNS options 'inet6', 'ip6-bytestring', 'ip6-dotint', 'no-ip6-dotint' are only\n        # supported for IPv6 configuration, so raise errors when IPv6 is disabled\n        if any(\n            option in connection[\"ip\"][\"dns_options\"]\n            for option in [\n                \"inet6\",\n                \"ip6-bytestring\",\n                \"ip6-dotint\",\n                \"no-ip6-dotint\",\n            ]\n        ):\n            if connection[\"ip\"][\"ipv6_disabled\"]:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"Setting DNS options 'inet6', 'ip6-bytestring', 'ip6-dotint', \"\n                    \"'no-ip6-dotint' is not allowed when IPv6 is disabled.\",\n                )\n\n        if connection[\"match\"]:\n            if connection[\"match\"][\"path\"]:\n                if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                    raise ValidationError.from_connection(\n                        idx,\n                        \"match.path is not supported by initscripts.\",\n                    )\n                else:\n                    if not hasattr(Util.NM(), \"SETTING_MATCH_PATH\"):\n                        raise ValidationError.from_connection(\n                            idx,\n                            \"match.path is not supported by the running version of \"\n                            \"NetworkManger.\",\n                        )\n\n        if \"bond\" in connection:\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                for option in connection[\"bond\"]:\n                    if connection[\"bond\"][option] is not None and option not in [\n                        \"mode\",\n                        \"miimon\",\n                    ]:\n                        raise ValidationError.from_connection(\n                            idx,\n                            \"initscripts only supports the mode and miimon bond \"\n                            \"options. All the other bond options are not supported by \"\n                            \"initscripts.\",\n                        )\n            # the `peer_notif_delay` bond option was supported in NM since NM 1.30\n            if connection[\"bond\"][\"peer_notif_delay\"]:\n                if not hasattr(Util.NM(), \"SETTING_BOND_OPTION_PEER_NOTIF_DELAY\"):\n                    raise ValidationError.from_connection(\n                        idx,\n                        \"the bond option peer_notif_delay is not supported in \"\n                        \"NetworkManger until NM 1.30\",\n                    )\n\n        if connection[\"ip\"][\"route\"]:\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                for route in connection[\"ip\"][\"route\"]:\n                    if route[\"type\"] is not None:\n                        raise ValidationError.from_connection(\n                            idx,\n                            \"type is not supported by initscripts\",\n                        )\n                    if route[\"src\"] is not None:\n                        raise ValidationError.from_connection(\n                            idx,\n                            \"configuring the route source is not supported by initscripts\",\n                        )\n\n        if connection[\"ip\"][\"routing_rule\"]:\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"ip.routing_rule is not supported by initscripts\",\n                )\n            for routing_rule in connection[\"ip\"][\"routing_rule\"]:\n                if routing_rule[\"suppress_prefixlength\"] is not None:\n                    if not hasattr(\n                        Util.NM().IPRoutingRule, \"set_suppress_prefixlength\"\n                    ):\n                        raise ValidationError.from_connection(\n                            idx,\n                            \"the routing rule selector 'suppress_prefixlength' is not \"\n                            \"supported in NetworkManger until NM 1.20\",\n                        )\n            for routing_rule in connection[\"ip\"][\"routing_rule\"]:\n                if routing_rule[\"uid\"] is not None:\n                    if not hasattr(Util.NM().IPRoutingRule, \"set_uid_range\"):\n                        raise ValidationError.from_connection(\n                            idx,\n                            \"the routing rule selector 'uid' is not supported in \"\n                            \"NetworkManger until NM 1.34\",\n                        )\n\n        if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS and connection[\"cloned_mac\"] in [\n            \"preserve\",\n            \"permanent\",\n            \"random\",\n            \"stable\",\n        ]:\n            raise ValidationError.from_connection(\n                idx,\n                \"Non-MAC argument is not supported by initscripts.\",\n            )\n\n        self.validate_route_tables(connection, idx)\n\n\nclass IPRouteUtils(object):\n\n    # iproute2 does not care much about the valid characters of a\n    # table alias (it doesn't even require UTF-8 encoding, the only\n    # forbidden parts are whitespace).\n    #\n    # We don't allow such flexibility. Aliases must only contain a\n    # certain set of ASCII characters. These aliases are what we accept\n    # as input (in the playbook), and there is no need to accept\n    # user input with unusual characters or non-ASCII names.\n    _ROUTE_TABLE_NAME_PATTERN = \"[a-zA-Z0-9_.-]+\"\n    ROUTE_TABLE_NAME_REGEX = re.compile(\"^\" + _ROUTE_TABLE_NAME_PATTERN + \"$\")\n\n    @classmethod\n    def _parse_route_tables_mapping(cls, file_content, mapping):\n\n        # This parses the /etc/iproute2/rt_tables file and constructs\n        # the mapping from table aliases the table numeric IDs.\n        #\n        # It is thus similar to rtnl_rttable_a2n(), from here:\n        # https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/tree/lib/rt_names.c?id=11e41a635cfab54e8e02fbff2a03715467e77ae9#n447\n        regex = re.compile(\n            b\"^\\\\s*\"  # optional leading whitespace\n            b\"(0x[0-9a-fA-F]+|[0-9]+)\"  # table ID in hex or decimal (non negative)\n            b\"\\\\s+\"  # whitespace\n            b\"(\"  # make a pattern group for the table name\n            + cls._ROUTE_TABLE_NAME_PATTERN.encode(\"ascii\")\n            + b\")\"  # close pattern group\n            b\"(\\\\s*|\\\\s+#.*)$\"  # trailing whitespace or comment\n        )\n        for line in file_content.split(b\"\\n\"):\n\n            rmatch = regex.match(line)\n            if not rmatch:\n                continue\n\n            table = rmatch.group(1)\n            name = rmatch.group(2).decode(\"ascii\")\n\n            if table.startswith(b\"0x\"):\n                tableid = int(table, 16)\n            else:\n                tableid = int(table)\n            if tableid > UINT32_MAX:\n                continue\n\n            # In case of duplicates, the latter wins. That is unlike iproute2's\n            # rtnl_rttable_a2n(), which does a linear search over the\n            # hash table (thus, the first found name depends on the content\n            # of the hash table and the result in face of duplicates is\n            # not well defined).\n            mapping[name] = tableid\n\n    @classmethod\n    def _parse_route_tables_mapping_from_file(cls, filename, mapping):\n        try:\n            with open(filename, \"rb\") as f:\n                file_content = f.read()\n        except Exception:\n            return\n        cls._parse_route_tables_mapping(file_content, mapping)\n\n    @classmethod\n    def get_route_tables_mapping(cls):\n        if not hasattr(cls, \"_cached_rt_tables\"):\n            mapping = {}\n            cls._parse_route_tables_mapping_from_file(\n                \"/etc/iproute2/rt_tables\", mapping\n            )\n            # In iproute2, the directory `/etc/iproute2/rt_tables/rt_tables.d`\n            # is also iterated when get the mapping between the route table name\n            # and route table id,\n            # https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/tree/lib/rt_names.c?id=ade99e208c1843ed3b6eb9d138aa15a6a5eb5219#n391\n            try:\n                fnames = os.listdir(\"/etc/iproute2/rt_tables.d\")\n            except Exception:\n                fnames = []\n            for f in fnames:\n                if f.endswith(\".conf\") and f[0] != \".\":\n                    cls._parse_route_tables_mapping_from_file(\n                        \"/etc/iproute2/rt_tables.d/\" + f, mapping\n                    )\n            cls._cached_rt_tables = mapping\n        return cls._cached_rt_tables",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[5:2791]\n==module_utils.network_lsr.argument_validator:[5:2791]\n__metaclass__ = type\n\nimport os\nimport posixpath\nimport socket\nimport re\n\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.myerror import MyError  # noqa:E501\nfrom ansible.module_utils.network_lsr.utils import Util  # noqa:E501\n\nUINT32_MAX = 0xFFFFFFFF\n\n\nclass ArgUtil:\n    @staticmethod\n    def connection_find_by_name(name, connections, n_connections=None):\n        if not name:\n            raise ValueError(\"missing name argument\")\n        conn = None\n        for idx, connection in enumerate(connections):\n            if n_connections is not None and idx >= n_connections:\n                break\n            if \"name\" not in connection or name != connection[\"name\"]:\n                continue\n\n            if connection[\"persistent_state\"] == \"absent\":\n                conn = None\n            elif connection[\"persistent_state\"] == \"present\":\n                conn = connection\n        return conn\n\n    @staticmethod\n    def connection_find_controller(name, connections, n_connections=None):\n        connection = ArgUtil.connection_find_by_name(name, connections, n_connections)\n        if not connection:\n            raise MyError(\"invalid controller/parent '%s'\" % (name))\n        if connection[\"interface_name\"] is None:\n            raise MyError(\n                \"invalid controller/parent '%s' which needs an 'interface_name'\"\n                % (name)\n            )\n        if not Util.ifname_valid(connection[\"interface_name\"]):\n            raise MyError(\n                \"invalid controller/parent '%s' with invalid 'interface_name' ('%s')\"\n                % (name, connection[\"interface_name\"])\n            )\n        return connection[\"interface_name\"]\n\n    @staticmethod\n    def connection_find_controller_uuid(name, connections, n_connections=None):\n        connection = ArgUtil.connection_find_by_name(name, connections, n_connections)\n        if not connection:\n            raise MyError(\"invalid controller/parent '%s'\" % (name))\n        return connection[\"nm.uuid\"]\n\n    @staticmethod\n    def connection_get_non_absent_names(connections):\n        # @idx is the index with state['absent']. This will\n        # return the names of all explicitly mentioned profiles.\n        # That is, the names of profiles that should not be deleted.\n        result = set()\n        for connection in connections:\n            if \"name\" not in connection:\n                continue\n            if not connection[\"name\"]:\n                continue\n            result.add(connection[\"name\"])\n        return result\n\n\nclass ValidationError(MyError):\n    def __init__(self, name, message):\n        # pylint: disable=non-parent-init-called\n        super(ValidationError, self).__init__(name + \": \" + message)\n        self.error_message = message\n        self.name = name\n\n    @staticmethod\n    def from_connection(idx, message):\n        return ValidationError(\"connection[\" + str(idx) + \"]\", message)\n\n\nclass ArgValidator:\n    MISSING = object()\n    DEFAULT = object()\n\n    def __init__(self, name=None, required=False, default_value=None):\n        self.name = name\n        self.required = required\n        self._default_value = default_value\n\n    def get_default_value(self):\n        if callable(self._default_value):\n            return self._default_value()\n        return self._default_value\n\n    def validate(self, value):\n        \"\"\"\n        Validate and normalize the input dictionary\n\n        This validate @value or raises a ValidationError() on error.\n        It also returns a normalized value, where the settings are\n        converted to appropriate types and default values set. You\n        should rely on the normalization to fill unspecified values\n        and resolve ambiguity.\n\n        You are implementing \"types\" of ArgValidator instances and\n        a major point of them is to implement a suitable validation and\n        normalization. The means for that is for subclasses to override\n        _validate_impl() and possibly _validate_post(). Some subclasses\n        support convenience arguments for simpler validation, like\n        ArgValidatorStr.enum_values or ArgValidatorNum.val_min.\n        Or ArgValidator.required which is honored by ArgValidatorDict\n        to determine whether a mandatory key is missing. Also,\n        ArgValidatorDict and ArgValidatorList have a nested parameter\n        which is an ArgValidator for the elements of the dictionary and list.\n        \"\"\"\n        return self._validate(value, self.name)\n\n    def _validate(self, value, name):\n        \"\"\"\n        The internal implementation for validate().\n\n        This is mostly called from internal code and by validate().\n        Usually you would not call this directly nor override it.\n        Instead, you would implement either _validate_impl() or\n        _validate_post().\n        \"\"\"\n        validated = self._validate_impl(value, name)\n        return self._validate_post(value, name, validated)\n\n    def _validate_impl(self, value, name):\n        \"\"\"\n        Implementation of validation.\n\n        Subclasses must implement this validation function. It is\n        the main hook to implement validate(). On validation error\n        it must raise ValidationError() or otherwise return a pre-normalized\n        value that gets passed to _validate_post().\n        \"\"\"\n        raise NotImplementedError()\n\n    # pylint: disable=unused-argument,no-self-use\n    def _validate_post(self, value, name, result):\n        \"\"\"\n        Post validation of the validated result.\n\n        This will be called with the result from _validate_impl().\n        By default it does nothing, but subclasses can override\n        this to perform additional validation. The use for this\n        hook is to split the validation in two steps. When validating\n        a dictionary of multiple keys, then _validate_impl() can\n        implement the basic pre-validation and pre-normalization of the individual\n        keys (which can be in any order). Afterwards, _validate_post()\n        can take a more holistic view and validate interdependencies\n        between keys and perform additional validation. For example,\n        _validate_impl() would validate that the keys are of the correct\n        basic type, and _validate_post() would validate that the values\n        don't conflict and possibly normalize derived default values.\n        \"\"\"\n        return result\n\n\nclass ArgValidatorStr(ArgValidator):\n    def __init__(  # pylint: disable=too-many-arguments\n        self,\n        name,\n        required=False,\n        default_value=None,\n        enum_values=None,\n        allow_empty=False,\n        min_length=None,\n        max_length=None,\n        regex=None,\n    ):\n        ArgValidator.__init__(self, name, required, default_value)\n        self.enum_values = enum_values\n        self.allow_empty = allow_empty\n        self.regex = regex\n\n        if max_length is not None:\n            if not isinstance(max_length, int):\n                raise ValueError(\"max_length must be an integer\")\n            elif max_length < 0:\n                raise ValueError(\"max_length must be a positive integer\")\n        self.max_length = max_length\n\n        if min_length is not None:\n            if not isinstance(min_length, int):\n                raise ValueError(\"min_length must be an integer\")\n            elif min_length < 0:\n                raise ValueError(\"min_length must be a positive integer\")\n        self.min_length = min_length\n\n    def _validate_impl(self, value, name):\n        if not isinstance(value, Util.STRING_TYPE):\n            raise ValidationError(name, \"must be a string but is '%s'\" % (value))\n        value = str(value)\n        if self.enum_values is not None and value not in self.enum_values:\n            raise ValidationError(\n                name,\n                \"is '%s' but must be one of '%s'\"\n                % (value, \"' '\".join(sorted(self.enum_values))),\n            )\n        if self.regex is not None and not any(re.match(x, value) for x in self.regex):\n            raise ValidationError(\n                name,\n                \"is '%s' which does not match the regex '%s'\"\n                % (value, \"' '\".join(sorted(self.regex))),\n            )\n        if not self.allow_empty and not value:\n            raise ValidationError(name, \"cannot be empty\")\n        if not self._validate_string_max_length(value):\n            raise ValidationError(\n                name, \"maximum length is %s characters\" % (self.max_length)\n            )\n        if not self._validate_string_min_length(value):\n            raise ValidationError(\n                name, \"minimum length is %s characters\" % (self.min_length)\n            )\n        return value\n\n    def _validate_string_max_length(self, value):\n        \"\"\"\n        Ensures that the length of string `value` is less than or equal to\n        the maximum length\n        \"\"\"\n        if self.max_length is not None:\n            return len(str(value)) <= self.max_length\n        else:\n            return True\n\n    def _validate_string_min_length(self, value):\n        \"\"\"\n        Ensures that the length of string `value` is more than or equal to\n         the minimum length\n        \"\"\"\n        if self.min_length is not None:\n            return len(str(value)) >= self.min_length\n        else:\n            return True\n\n\nclass ArgValidatorRouteTable(ArgValidator):\n    def __init__(\n        self,\n        name,\n        required=False,\n        default_value=None,\n    ):\n        ArgValidator.__init__(self, name, required, default_value)\n\n    def _validate_impl(self, value, name):\n        table = None\n        try:\n            if isinstance(value, bool):\n                # bool can (probably) be converted to integer type,\n                # but here we don't want to accept a boolean value.\n                pass\n            elif isinstance(value, int):\n                table = int(value)\n            elif isinstance(value, Util.STRING_TYPE):\n                try:\n                    table = int(value)\n                except Exception:\n                    table = value\n        except Exception:\n            pass\n        if table is None:\n            raise ValidationError(\n                name,\n                \"route table must be the named or numeric tables but is {0}\".format(\n                    value\n                ),\n            )\n        if isinstance(table, int):\n            if table < 1:\n                raise ValidationError(\n                    name,\n                    \"route table value is {0} but cannot be less than 1\".format(value),\n                )\n            elif table > UINT32_MAX:\n                raise ValidationError(\n                    name,\n                    \"route table value is {0} but cannot be greater than {1}\".format(\n                        value, UINT32_MAX\n                    ),\n                )\n        if isinstance(table, Util.STRING_TYPE):\n            if table == \"\":\n                raise ValidationError(name, \"route table name cannot be empty string\")\n            if not IPRouteUtils.ROUTE_TABLE_NAME_REGEX.match(table):\n                raise ValidationError(\n                    name, \"route table name contains invalid characters\"\n                )\n\n        return table\n\n\nclass ArgValidatorNum(ArgValidator):\n    def __init__(  # pylint: disable=too-many-arguments\n        self,\n        name,\n        required=False,\n        val_min=None,\n        val_max=None,\n        default_value=ArgValidator.DEFAULT,\n        numeric_type=int,\n    ):\n        if default_value is ArgValidator.DEFAULT:\n            default_value = numeric_type(0)\n        ArgValidator.__init__(self, name, required, default_value)\n        self.val_min = val_min\n        self.val_max = val_max\n        self.numeric_type = numeric_type\n\n    def _validate_impl(self, value, name):\n        v = None\n        try:\n            if isinstance(value, bool):\n                # bool can (probably) be converted to self.numeric_type,\n                # but here we don't want to accept a boolean value.\n                pass\n            elif isinstance(value, self.numeric_type):\n                # ArgValidatorNum should normalize the input values to be of type\n                # self.numeric_type, except the default_value\n                v = self.numeric_type(value)\n            else:\n                v2 = self.numeric_type(value)\n                if isinstance(value, Util.STRING_TYPE) or v2 == value:\n                    v = v2\n        except Exception:\n            pass\n        if v is None:\n            raise ValidationError(\n                name, \"must be an integer number but is '%s'\" % (value)\n            )\n        if self.val_min is not None and v < self.val_min:\n            raise ValidationError(\n                name, \"value is %s but cannot be less then %s\" % (value, self.val_min)\n            )\n        if self.val_max is not None and v > self.val_max:\n            raise ValidationError(\n                name,\n                \"value is %s but cannot be greater then %s\" % (value, self.val_max),\n            )\n        return v\n\n\nclass ArgValidatorRange(ArgValidator):\n    def __init__(  # pylint: disable=too-many-arguments\n        self,\n        name,\n        required=False,\n        val_min=None,\n        val_max=None,\n        default_value=None,\n    ):\n        ArgValidator.__init__(self, name, required, default_value)\n        self.val_min = val_min\n        self.val_max = val_max\n\n    def _validate_impl(self, value, name):\n        range = None\n        if isinstance(value, Util.STRING_TYPE):\n            match_group = re.match(r\"^ *([0-9]+) *- *([0-9]+) *$\", value)\n            if match_group:\n                try:\n                    range = (int(match_group.group(1)), int(match_group.group(2)))\n                except Exception:\n                    pass\n            else:\n                try:\n                    range = (int(value), int(value))\n                except Exception:\n                    pass\n        elif isinstance(value, bool):\n            # bool can (probably) be converted to integer type,\n            # but here we don't want to accept a boolean value.\n            pass\n        elif isinstance(value, int):\n            range = (value, value)\n\n        if range is None:\n            raise ValidationError(name, \"the range value {0} is invalid\".format(value))\n        if range[0] > range[1]:\n            raise ValidationError(\n                name,\n                \"the range start cannot be greater than range end\",\n            )\n        if self.val_min is not None:\n            if range[0] < self.val_min:\n                raise ValidationError(\n                    name,\n                    \"lower range value is {0} but cannot be less than {1}\".format(\n                        range[0], self.val_min\n                    ),\n                )\n        if self.val_max is not None:\n            if range[1] > self.val_max:\n                raise ValidationError(\n                    name,\n                    \"upper range value is {0} but cannot be greater than {1}\".format(\n                        range[1], self.val_max\n                    ),\n                )\n\n        return range\n\n\nclass ArgValidatorBool(ArgValidator):\n    def __init__(self, name, required=False, default_value=False):\n        ArgValidator.__init__(self, name, required, default_value)\n\n    def _validate_impl(self, value, name):\n        try:\n            if isinstance(value, bool):\n                return value\n            if isinstance(value, Util.STRING_TYPE) or isinstance(value, int):\n                return Util.boolean(value)\n        except Exception:\n            pass\n        raise ValidationError(name, \"must be an boolean but is '%s'\" % (value))\n\n\nclass ArgValidatorDeprecated(ArgValidator):\n    \"\"\"\n    ArgValidatorDeprecated is only used as a marker to indicate that a setting is deprecated\n    by another setting. The validator that contains a deprecated setting is responsible for\n    processing this and the replacement setting needs to perform the validation.\n    \"\"\"\n\n    def __init__(self, name, deprecated_by):\n        ArgValidator.__init__(self, name, default_value=ArgValidator.MISSING)\n        self.deprecated_by = deprecated_by\n\n    def _validate_impl(self, value, name):\n        raise MyError(\n            \"Deprecated settings need to be validated by the replacement setting.\"\n        )\n\n\nclass ArgValidatorDict(ArgValidator):\n    def __init__(\n        self,\n        name=None,\n        required=False,\n        nested=None,\n        default_value=ArgValidator.DEFAULT,\n        all_missing_during_validate=False,\n    ):\n        if nested is not None:\n            nested = dict([(v.name, v) for v in nested])\n        else:\n            nested = {}\n        if default_value is ArgValidator.DEFAULT:\n            default_value = self.generate_default\n        ArgValidator.__init__(self, name, required, default_value)\n        self.nested = nested\n        self.all_missing_during_validate = all_missing_during_validate\n\n    def _validate_impl(self, value, name):\n        result = {}\n        seen_keys = set()\n        if value is None:\n            # Users might want to use jinja2 templates to set properties. As such,\n            # it's convenient to accept None as an alias for an empty dictionary\n            # e.g. setting like `\"match\": None` will be allowed by the role\n            return {}\n        try:\n            items = list(value.items())\n        except AttributeError:\n            raise ValidationError(name, \"invalid content is not a dictionary\")\n        for setting, value in items:\n            try:\n                validator = self.nested[setting]\n            except KeyError:\n                raise ValidationError(name, \"invalid key '%s'\" % (setting))\n            if isinstance(validator, ArgValidatorDeprecated):\n                setting = validator.deprecated_by\n                validator = self.nested[setting]\n            if setting in seen_keys:\n                raise ValidationError(name, \"duplicate key '%s'\" % (setting))\n            seen_keys.add(setting)\n            try:\n                validated_value = validator._validate(value, name + \".\" + setting)\n            except ValidationError as e:\n                raise ValidationError(e.name, e.error_message)\n            result[setting] = validated_value\n        for setting, validator in self.nested.items():\n            if setting in seen_keys:\n                continue\n            if validator.required:\n                raise ValidationError(name, \"missing required key '%s'\" % (setting))\n            if not self.all_missing_during_validate:\n                default = validator.get_default_value()\n                if default is not ArgValidator.MISSING:\n                    result[setting] = default\n        return result\n\n    @staticmethod\n    def generate_default_from_nested(nested):\n        result = {}\n        for name, validator in nested.items():\n            default = validator.get_default_value()\n            if default is not ArgValidator.MISSING:\n                result[name] = default\n        return result\n\n    def generate_default(self):\n        return ArgValidatorDict.generate_default_from_nested(self.nested)\n\n\nclass ArgValidatorList(ArgValidator):\n    def __init__(\n        self,\n        name,\n        nested,\n        default_value=None,\n        remove_none_or_empty=False,\n    ):\n        ArgValidator.__init__(self, name, required=False, default_value=default_value)\n        self.nested = nested\n        self.remove_none_or_empty = remove_none_or_empty\n\n    def _validate_impl(self, value, name):\n\n        if value is None:\n            # Users might want to use jinja2 templates to set properties. As such,\n            # it's convenient to accept None as an alias for an empty list\n            # e.g. setting like `\"match\": {\"path\": None}` will be allowed by the role\n            value = []\n        elif isinstance(value, Util.STRING_TYPE):\n            # we expect a list. However, for convenience allow to\n            # specify a string, separated by space. Escaping is\n            # not supported. If you need that, define a proper list.\n            value = [s for s in value.split(\" \") if s]\n\n        result = []\n        for idx, v in enumerate(value):\n            if (v is None or v == \"\") and self.remove_none_or_empty:\n                continue\n            try:\n                vv = self.nested._validate(v, name + \"[\" + str(idx) + \"]\")\n            except ValidationError as e:\n                raise ValidationError(e.name, e.error_message)\n            result.append(vv)\n        return result\n\n\nclass ArgValidatorIP(ArgValidatorStr):\n    def __init__(\n        self, name, family=None, required=False, default_value=None, plain_address=True\n    ):\n        ArgValidatorStr.__init__(self, name, required, default_value, None)\n        self.family = family\n        self.plain_address = plain_address\n\n    def _validate_impl(self, value, name):\n        v = ArgValidatorStr._validate_impl(self, value, name)\n        try:\n            addr, family = Util.parse_ip(v, self.family)\n        except Exception:\n            raise ValidationError(\n                name,\n                \"value '%s' is not a valid IP%s address\"\n                % (value, Util.addr_family_to_v(self.family)),\n            )\n        if self.plain_address:\n            return addr\n        return {\"family\": family, \"address\": addr}\n\n\nclass ArgValidatorMac(ArgValidatorStr):\n    def __init__(\n        self, name, force_len=None, required=False, default_value=None, enum_values=None\n    ):\n        ArgValidatorStr.__init__(self, name, required, default_value, None)\n        self.force_len = force_len\n        self.enum_values_mac = enum_values\n\n    def _validate_impl(self, value, name):\n        v = ArgValidatorStr._validate_impl(self, value, name)\n\n        if self.enum_values_mac is not None and value in self.enum_values_mac:\n            return v\n\n        try:\n            addr = Util.mac_aton(v, self.force_len)\n        except MyError:\n            enum_ex = \"\"\n            if self.enum_values_mac is not None:\n                enum_ex = \" nor one of %s\" % (self.enum_values_mac)\n            raise ValidationError(\n                name, \"value '%s' is not a valid MAC address%s\" % (value, enum_ex)\n            )\n        if not addr:\n            enum_ex = \"\"\n            if self.enum_values_mac is not None:\n                enum_ex = \" nor one of %s\" % (self.enum_values_mac)\n            raise ValidationError(\n                name, \"value '%s' is not a valid MAC address%s\" % (value, enum_ex)\n            )\n        return Util.mac_ntoa(addr)\n\n\nclass ArgValidatorIPAddr(ArgValidatorDict):\n    def __init__(self, name, family=None, required=False):\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[\n                ArgValidatorIP(\n                    \"address\", family=family, required=True, plain_address=False\n                ),\n                ArgValidatorNum(\"prefix\", default_value=None, val_min=0),\n            ],\n            default_value=None,\n        )\n        self.family = family\n\n    def _validate_impl(self, value, name):\n        if isinstance(value, Util.STRING_TYPE):\n            v = str(value)\n            if not v:\n                raise ValidationError(name, \"cannot be empty\")\n            try:\n                return Util.parse_address(v, self.family)\n            except Exception:\n                raise ValidationError(\n                    name,\n                    \"value '%s' is not a valid IP%s address with prefix length\"\n                    % (value, Util.addr_family_to_v(self.family)),\n                )\n        v = ArgValidatorDict._validate_impl(self, value, name)\n        return {\n            \"address\": v[\"address\"][\"address\"],\n            \"family\": v[\"address\"][\"family\"],\n            \"prefix\": v[\"prefix\"],\n        }\n\n    def _validate_post(self, value, name, result):\n        family = result[\"family\"]\n        prefix = result[\"prefix\"]\n        if prefix is None:\n            prefix = Util.addr_family_default_prefix(family)\n            result[\"prefix\"] = prefix\n        elif not Util.addr_family_valid_prefix(family, prefix):\n            raise ValidationError(name, \"invalid prefix %s in '%s'\" % (prefix, value))\n        return result\n\n\nclass ArgValidatorIPRoute(ArgValidatorDict):\n    def __init__(self, name, family=None, required=False):\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[\n                ArgValidatorIP(\n                    \"network\", family=family, required=True, plain_address=False\n                ),\n                ArgValidatorNum(\"prefix\", default_value=None, val_min=0),\n                ArgValidatorIP(\n                    \"gateway\", family=family, default_value=None, plain_address=False\n                ),\n                ArgValidatorNum(\n                    \"metric\", default_value=-1, val_min=-1, val_max=UINT32_MAX\n                ),\n                ArgValidatorStr(\n                    \"type\",\n                    default_value=None,\n                    enum_values=[\"blackhole\", \"prohibit\", \"unreachable\"],\n                ),\n                ArgValidatorRouteTable(\"table\"),\n                ArgValidatorIP(\n                    \"src\", family=family, default_value=None, plain_address=False\n                ),\n            ],\n            default_value=None,\n        )\n        self.family = family\n\n    def _validate_post(self, value, name, result):\n        network = result[\"network\"]\n\n        family = network[\"family\"]\n        result[\"network\"] = network[\"address\"]\n        result[\"family\"] = family\n\n        gateway = result[\"gateway\"]\n        route_type = result[\"type\"]\n        if gateway is not None:\n            if family != gateway[\"family\"]:\n                raise ValidationError(\n                    name,\n                    \"conflicting address family between network and gateway '%s'\"\n                    % (gateway[\"address\"]),\n                )\n            if route_type is not None:\n                raise ValidationError(\n                    name,\n                    \"a %s route can not have a gateway '%s'\"\n                    % (route_type, gateway[\"address\"]),\n                )\n            result[\"gateway\"] = gateway[\"address\"]\n\n        prefix = result[\"prefix\"]\n        if prefix is None:\n            prefix = Util.addr_family_default_prefix(family)\n            result[\"prefix\"] = prefix\n        elif not Util.addr_family_valid_prefix(family, prefix):\n            raise ValidationError(name, \"invalid prefix %s in '%s'\" % (prefix, value))\n\n        src = result[\"src\"]\n        if src is not None:\n            if family != src[\"family\"]:\n                raise ValidationError(\n                    name,\n                    \"conflicting address family between network and src \"\n                    \"address {0}\".format(src[\"address\"]),\n                )\n            result[\"src\"] = src[\"address\"]\n\n        return result\n\n\nclass ArgValidatorIPRoutingRule(ArgValidatorDict):\n    def __init__(self, name, required=False):\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[\n                ArgValidatorNum(\n                    \"priority\",\n                    default_value=None,\n                    required=True,\n                    val_min=0,\n                    val_max=UINT32_MAX,\n                ),\n                ArgValidatorStr(\n                    \"action\",\n                    default_value=\"to-table\",\n                    enum_values=[\"to-table\", \"blackhole\", \"prohibit\", \"unreachable\"],\n                ),\n                ArgValidatorRange(\"dport\", val_min=1, val_max=65534),\n                ArgValidatorStr(\n                    \"family\",\n                    default_value=None,\n                    enum_values=[\"ipv4\", \"ipv6\"],\n                ),\n                ArgValidatorIPAddr(\"from\"),\n                ArgValidatorNum(\n                    \"fwmark\", default_value=None, val_min=1, val_max=UINT32_MAX\n                ),\n                ArgValidatorNum(\n                    \"fwmask\", default_value=None, val_min=1, val_max=UINT32_MAX\n                ),\n                ArgValidatorStr(\"iif\", default_value=None),\n                ArgValidatorBool(\"invert\", default_value=False),\n                ArgValidatorNum(\"ipproto\", default_value=None, val_min=1, val_max=255),\n                ArgValidatorStr(\"oif\", default_value=None),\n                ArgValidatorRange(\"sport\", val_min=1, val_max=65534),\n                ArgValidatorNum(\"suppress_prefixlength\", default_value=None, val_min=0),\n                ArgValidatorRouteTable(\"table\"),\n                ArgValidatorIPAddr(\"to\"),\n                ArgValidatorNum(\"tos\", default_value=None, val_min=1, val_max=255),\n                ArgValidatorRange(\"uid\", val_min=0, val_max=UINT32_MAX),\n            ],\n            default_value=None,\n        )\n\n    def _validate_post(self, value, name, result):\n        family = None\n        if result[\"family\"]:\n            family = Util.addr_family_norm(result[\"family\"])\n        elif result[\"from\"]:\n            family = result[\"from\"][\"family\"]\n        elif result[\"to\"]:\n            family = result[\"to\"][\"family\"]\n        if not family:\n            raise ValidationError(name, \"specify the address family 'family'\")\n\n        if result[\"from\"]:\n            if result[\"from\"][\"family\"] != family:\n                raise ValidationError(name, \"invalid address family in 'from'\")\n\n        if result[\"to\"]:\n            if result[\"to\"][\"family\"] != family:\n                raise ValidationError(name, \"invalid address family in 'to'\")\n\n        result[\"family\"] = family\n        if result[\"action\"] == \"to-table\":\n            if result[\"table\"] is None:\n                raise ValidationError(\n                    name,\n                    \"missing 'table' for the routing rule\",\n                )\n        # `from 0.0.0.0/0` means from all IPv4 addresses\n        # `from ::/0` means from all IPv6 addresses\n        # In NM, if `from` property is not specified in a routing rule, NM\n        # still appends `from 0.0.0.0/0` or `from ::/0` to the rule\n        if result[\"from\"] is not None and result[\"from\"][\"address\"] not in [\n            \"0.0.0.0\",\n            \"::\",\n        ]:\n            if result[\"from\"][\"prefix\"] == 0:\n                raise ValidationError(\n                    name,\n                    \"the prefix length for 'from' cannot be zero\",\n                )\n\n        # NM also allows to specify `to 0.0.0.0/0` or `to ::/0` in a routing\n        # rule, but the connection profiles will only show the `from` setting\n        # for the rule\n        if result[\"to\"] is not None and result[\"to\"][\"address\"] not in [\n            \"0.0.0.0\",\n            \"::\",\n        ]:\n            if result[\"to\"][\"prefix\"] == 0:\n                raise ValidationError(\n                    name,\n                    \"the prefix length for 'to' cannot be zero\",\n                )\n\n        if (result[\"fwmask\"] is None) != (result[\"fwmark\"] is None):\n            raise ValidationError(\n                name,\n                \"'fwmask' and 'fwmark' must be set together\",\n            )\n\n        if result[\"iif\"] is not None:\n            if not Util.ifname_valid(result[\"iif\"]):\n                raise ValidationError(\n                    name,\n                    \"the incoming interface '{0}' specified in the routing rule is \"\n                    \"invalid interface_name\".format(result[\"iif\"]),\n                )\n\n        if result[\"oif\"] is not None:\n            if not Util.ifname_valid(result[\"oif\"]):\n                raise ValidationError(\n                    name,\n                    \"the outgoing interface '{0}' specified in the routing rule is \"\n                    \"invalid interface_name\".format(result[\"oif\"]),\n                )\n\n        if result[\"suppress_prefixlength\"] is not None:\n            if not Util.addr_family_valid_prefix(\n                result[\"family\"], result[\"suppress_prefixlength\"]\n            ):\n                raise ValidationError(\n                    name,\n                    \"The specified 'suppress_prefixlength' cannot be greater than \"\n                    \"{0}\".format(Util.addr_family_prefix_length(result[\"family\"])),\n                )\n\n            if result[\"action\"] != \"to-table\":\n                raise ValidationError(\n                    name,\n                    \"'suppress_prefixlength' is only allowed with the to-table action\",\n                )\n        return result\n\n\nclass ArgValidator_DictIP(ArgValidatorDict):\n    REGEX_DNS_OPTIONS = [\n        r\"^attempts:([1-9]\\d*|0)$\",\n        r\"^debug$\",\n        r\"^edns0$\",\n        r\"^inet6$\",\n        r\"^ip6-bytestring$\",\n        r\"^ip6-dotint$\",\n        r\"^ndots:([1-9]\\d*|0)$\",\n        r\"^no-aaaa$\",\n        r\"^no-check-names$\",\n        r\"^no-ip6-dotint$\",\n        r\"^no-reload$\",\n        r\"^no-tld-query$\",\n        r\"^rotate$\",\n        r\"^single-request$\",\n        r\"^single-request-reopen$\",\n        r\"^timeout:([1-9]\\d*|0)$\",\n        r\"^trust-ad$\",\n        r\"^use-vc$\",\n    ]\n\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"ip\",\n            nested=[\n                ArgValidatorBool(\"dhcp4\", default_value=None),\n                ArgValidatorBool(\"dhcp4_send_hostname\", default_value=None),\n                ArgValidatorIP(\"gateway4\", family=socket.AF_INET),\n                ArgValidatorNum(\n                    \"route_metric4\", val_min=-1, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorBool(\"auto6\", default_value=None),\n                ArgValidatorBool(\"ipv4_ignore_auto_dns\", default_value=None),\n                ArgValidatorBool(\"ipv6_ignore_auto_dns\", default_value=None),\n                ArgValidatorStr(\n                    \"wait_ip\",\n                    enum_values=[\"any\", \"ipv4\", \"ipv6\", \"ipv4+ipv6\"],\n                    default_value=\"any\",\n                ),\n                ArgValidatorBool(\"ipv6_disabled\", default_value=None),\n                ArgValidatorIP(\"gateway6\", family=socket.AF_INET6),\n                ArgValidatorNum(\n                    \"route_metric6\", val_min=-1, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorList(\n                    \"address\",\n                    nested=ArgValidatorIPAddr(\"address[?]\"),\n                    default_value=list,\n                ),\n                ArgValidatorBool(\"auto_gateway\", default_value=None),\n                ArgValidatorList(\n                    \"route\", nested=ArgValidatorIPRoute(\"route[?]\"), default_value=list\n                ),\n                ArgValidatorBool(\"route_append_only\"),\n                ArgValidatorBool(\"rule_append_only\"),\n                ArgValidatorList(\n                    \"dns\",\n                    nested=ArgValidatorIP(\"dns[?]\", plain_address=False),\n                    default_value=list,\n                ),\n                ArgValidatorList(\n                    \"dns_search\",\n                    nested=ArgValidatorStr(\"dns_search[?]\"),\n                    default_value=list,\n                ),\n                ArgValidatorList(\n                    \"dns_options\",\n                    nested=ArgValidatorStr(\n                        \"dns_options[?]\", regex=ArgValidator_DictIP.REGEX_DNS_OPTIONS\n                    ),\n                    default_value=list,\n                ),\n                ArgValidatorNum(\n                    \"dns_priority\",\n                    val_min=-2147483648,\n                    val_max=2147483647,\n                    default_value=0,\n                ),\n                ArgValidatorList(\n                    \"routing_rule\",\n                    nested=ArgValidatorIPRoutingRule(\"routing_rule[?]\"),\n                    default_value=list,\n                ),\n            ],\n            default_value=lambda: {\n                \"dhcp4\": True,\n                \"dhcp4_send_hostname\": None,\n                \"gateway4\": None,\n                \"route_metric4\": None,\n                \"auto6\": True,\n                \"ipv4_ignore_auto_dns\": None,\n                \"ipv6_ignore_auto_dns\": None,\n                \"wait_ip\": \"any\",\n                \"ipv6_disabled\": False,\n                \"gateway6\": None,\n                \"route_metric6\": None,\n                \"address\": [],\n                \"auto_gateway\": None,\n                \"route\": [],\n                \"routing_rule\": [],\n                \"route_append_only\": False,\n                \"rule_append_only\": False,\n                \"dns\": [],\n                \"dns_search\": [],\n                \"dns_options\": [],\n                \"dns_priority\": 0,\n            },\n        )\n\n    def _validate_post(self, value, name, result):\n\n        has_ipv6_addresses = any(\n            addr for addr in result[\"address\"] if addr[\"family\"] == socket.AF_INET6\n        )\n\n        if result[\"ipv6_disabled\"] is True:\n            if result[\"auto6\"] is True:\n                raise ValidationError(\n                    name, \"'auto6' and 'ipv6_disabled' are mutually exclusive\"\n                )\n            if has_ipv6_addresses:\n                raise ValidationError(\n                    name,\n                    \"'ipv6_disabled' and static IPv6 addresses are mutually exclusive\",\n                )\n            if result[\"gateway6\"] is not None:\n                raise ValidationError(\n                    name, \"'ipv6_disabled' and 'gateway6' are mutually exclusive\"\n                )\n            if result[\"route_metric6\"] is not None:\n                raise ValidationError(\n                    name, \"'ipv6_disabled' and 'route_metric6' are mutually exclusive\"\n                )\n        elif result[\"ipv6_disabled\"] is None:\n            # \"ipv6_disabled\" is not explicitly set, we always set it to False.\n            # Either \"auto6\" is enabled or static addresses are set, then this\n            # is clearly correct.\n            # Even with \"auto6:False\" and no IPv6 addresses, we at least enable\n            # IPv6 link local addresses.\n            result[\"ipv6_disabled\"] = False\n\n        if result[\"dhcp4\"] is None:\n            result[\"dhcp4\"] = result[\"dhcp4_send_hostname\"] is not None or not any(\n                addr for addr in result[\"address\"] if addr[\"family\"] == socket.AF_INET\n            )\n\n        if result[\"auto6\"] is None:\n            result[\"auto6\"] = not has_ipv6_addresses\n\n        if result[\"dhcp4_send_hostname\"] is not None:\n            if not result[\"dhcp4\"]:\n                raise ValidationError(\n                    name, \"'dhcp4_send_hostname' is only valid if 'dhcp4' is enabled\"\n                )\n\n        ipv4_gw_defined = result[\"gateway4\"] is not None\n        ipv6_gw_defined = result[\"gateway6\"] is not None\n        dhcp_enabled = result[\"dhcp4\"] or result[\"auto6\"]\n\n        if result[\"auto_gateway\"] and not (\n            ipv4_gw_defined or ipv6_gw_defined or dhcp_enabled\n        ):\n            raise ValidationError(\n                name,\n                \"must define 'gateway4', 'gateway6', or use dhcp \"\n                \"if 'auto_gateway' is enabled\",\n            )\n\n        return result\n\n\nclass ArgValidator_DictEthernet(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"ethernet\",\n            nested=[\n                ArgValidatorBool(\"autoneg\", default_value=None),\n                ArgValidatorNum(\n                    \"speed\", val_min=0, val_max=UINT32_MAX, default_value=0\n                ),\n                ArgValidatorStr(\n                    \"duplex\", enum_values=[\"half\", \"full\"], default_value=None\n                ),\n            ],\n            default_value=ArgValidator.MISSING,\n        )\n\n    def get_default_ethernet(self):\n        return dict([(k, v.get_default_value()) for k, v in self.nested.items()])\n\n    def _validate_post(self, value, name, result):\n        has_speed_or_duplex = result[\"speed\"] != 0 or result[\"duplex\"] is not None\n        if result[\"autoneg\"] is None:\n            if has_speed_or_duplex:\n                result[\"autoneg\"] = False\n        elif result[\"autoneg\"]:\n            if has_speed_or_duplex:\n                raise ValidationError(\n                    name,\n                    \"cannot specify '%s' with 'autoneg' enabled\"\n                    % (\"duplex\" if result[\"duplex\"] is not None else \"speed\"),\n                )\n        else:\n            if not has_speed_or_duplex:\n                raise ValidationError(\n                    name, \"need to specify 'duplex' and 'speed' with 'autoneg' enabled\"\n                )\n        if has_speed_or_duplex and (result[\"speed\"] == 0 or result[\"duplex\"] is None):\n            raise ValidationError(\n                name,\n                \"need to specify both 'speed' and 'duplex' with 'autoneg' disabled\",\n            )\n        return result\n\n\nclass ArgValidator_DictEthtool(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"ethtool\",\n            nested=[\n                ArgValidator_DictEthtoolFeatures(),\n                ArgValidator_DictEthtoolCoalesce(),\n                ArgValidator_DictEthtoolRing(),\n            ],\n        )\n\n\nclass ArgValidator_DictEthtoolFeatures(ArgValidatorDict):\n    # List of features created with:\n    # nmcli connection modify \"virbr0\" ethtool.feature- on |& \\\n    #   sed -e 's_[,:]_\\n_g'  | \\ # split output in newlines\n    #   grep ^\\ f | \\ # select only lines starting with \" f\"\n    #   tr -d \" .\" | \\ # remove spaces and fullstops\n    #   sed -e 's,feature-,ArgValidatorBool(\",' \\ # add Python code\n    #       -e 's/$/\", default_value=None)],/'\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"features\",\n            nested=[\n                ArgValidatorBool(\"esp_hw_offload\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"esp-hw-offload\", deprecated_by=\"esp_hw_offload\"\n                ),\n                ArgValidatorBool(\"esp_tx_csum_hw_offload\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"esp-tx-csum-hw-offload\",\n                    deprecated_by=\"esp_tx_csum_hw_offload\",\n                ),\n                ArgValidatorBool(\"fcoe_mtu\", default_value=None),\n                ArgValidatorDeprecated(\"fcoe-mtu\", deprecated_by=\"fcoe_mtu\"),\n                ArgValidatorBool(\"gro\", default_value=None),\n                ArgValidatorBool(\"gso\", default_value=None),\n                ArgValidatorBool(\"highdma\", default_value=None),\n                ArgValidatorBool(\"hw_tc_offload\", default_value=None),\n                ArgValidatorDeprecated(\"hw-tc-offload\", deprecated_by=\"hw_tc_offload\"),\n                ArgValidatorBool(\"l2_fwd_offload\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"l2-fwd-offload\", deprecated_by=\"l2_fwd_offload\"\n                ),\n                ArgValidatorBool(\"loopback\", default_value=None),\n                ArgValidatorBool(\"lro\", default_value=None),\n                ArgValidatorBool(\"ntuple\", default_value=None),\n                ArgValidatorBool(\"rx\", default_value=None),\n                ArgValidatorBool(\"rxhash\", default_value=None),\n                ArgValidatorBool(\"rxvlan\", default_value=None),\n                ArgValidatorBool(\"rx_all\", default_value=None),\n                ArgValidatorDeprecated(\"rx-all\", deprecated_by=\"rx_all\"),\n                ArgValidatorBool(\"rx_fcs\", default_value=None),\n                ArgValidatorDeprecated(\"rx-fcs\", deprecated_by=\"rx_fcs\"),\n                ArgValidatorBool(\"rx_gro_hw\", default_value=None),\n                ArgValidatorDeprecated(\"rx-gro-hw\", deprecated_by=\"rx_gro_hw\"),\n                ArgValidatorBool(\"rx_udp_tunnel_port_offload\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"rx-udp_tunnel-port-offload\",\n                    deprecated_by=\"rx_udp_tunnel_port_offload\",\n                ),\n                ArgValidatorBool(\"rx_vlan_filter\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"rx-vlan-filter\", deprecated_by=\"rx_vlan_filter\"\n                ),\n                ArgValidatorBool(\"rx_vlan_stag_filter\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"rx-vlan-stag-filter\",\n                    deprecated_by=\"rx_vlan_stag_filter\",\n                ),\n                ArgValidatorBool(\"rx_vlan_stag_hw_parse\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"rx-vlan-stag-hw-parse\",\n                    deprecated_by=\"rx_vlan_stag_hw_parse\",\n                ),\n                ArgValidatorBool(\"sg\", default_value=None),\n                ArgValidatorBool(\"tls_hw_record\", default_value=None),\n                ArgValidatorDeprecated(\"tls-hw-record\", deprecated_by=\"tls_hw_record\"),\n                ArgValidatorBool(\"tls_hw_tx_offload\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tls-hw-tx-offload\",\n                    deprecated_by=\"tls_hw_tx_offload\",\n                ),\n                ArgValidatorBool(\"tso\", default_value=None),\n                ArgValidatorBool(\"tx\", default_value=None),\n                ArgValidatorBool(\"txvlan\", default_value=None),\n                ArgValidatorBool(\"tx_checksum_fcoe_crc\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-checksum-fcoe-crc\",\n                    deprecated_by=\"tx_checksum_fcoe_crc\",\n                ),\n                ArgValidatorBool(\"tx_checksum_ipv4\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-checksum-ipv4\",\n                    deprecated_by=\"tx_checksum_ipv4\",\n                ),\n                ArgValidatorBool(\"tx_checksum_ipv6\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-checksum-ipv6\",\n                    deprecated_by=\"tx_checksum_ipv6\",\n                ),\n                ArgValidatorBool(\"tx_checksum_ip_generic\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-checksum-ip-generic\",\n                    deprecated_by=\"tx_checksum_ip_generic\",\n                ),\n                ArgValidatorBool(\"tx_checksum_sctp\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-checksum-sctp\",\n                    deprecated_by=\"tx_checksum_sctp\",\n                ),\n                ArgValidatorBool(\"tx_esp_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-esp-segmentation\",\n                    deprecated_by=\"tx_esp_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_fcoe_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-fcoe-segmentation\",\n                    deprecated_by=\"tx_fcoe_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_gre_csum_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-gre-csum-segmentation\",\n                    deprecated_by=\"tx_gre_csum_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_gre_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-gre-segmentation\",\n                    deprecated_by=\"tx_gre_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_gso_partial\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-gso-partial\", deprecated_by=\"tx_gso_partial\"\n                ),\n                ArgValidatorBool(\"tx_gso_robust\", default_value=None),\n                ArgValidatorDeprecated(\"tx-gso-robust\", deprecated_by=\"tx_gso_robust\"),\n                ArgValidatorBool(\"tx_ipxip4_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-ipxip4-segmentation\",\n                    deprecated_by=\"tx_ipxip4_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_ipxip6_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-ipxip6-segmentation\",\n                    deprecated_by=\"tx_ipxip6_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_nocache_copy\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-nocache-copy\",\n                    deprecated_by=\"tx_nocache_copy\",\n                ),\n                ArgValidatorBool(\"tx_scatter_gather\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-scatter-gather\",\n                    deprecated_by=\"tx_scatter_gather\",\n                ),\n                ArgValidatorBool(\"tx_scatter_gather_fraglist\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-scatter-gather-fraglist\",\n                    deprecated_by=\"tx_scatter_gather_fraglist\",\n                ),\n                ArgValidatorBool(\"tx_sctp_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-sctp-segmentation\",\n                    deprecated_by=\"tx_sctp_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_tcp6_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-tcp6-segmentation\",\n                    deprecated_by=\"tx_tcp6_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_tcp_ecn_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-tcp-ecn-segmentation\",\n                    deprecated_by=\"tx_tcp_ecn_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_tcp_mangleid_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-tcp-mangleid-segmentation\",\n                    deprecated_by=\"tx_tcp_mangleid_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_tcp_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-tcp-segmentation\",\n                    deprecated_by=\"tx_tcp_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_udp_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-udp-segmentation\",\n                    deprecated_by=\"tx_udp_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_udp_tnl_csum_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-udp_tnl-csum-segmentation\",\n                    deprecated_by=\"tx_udp_tnl_csum_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_udp_tnl_segmentation\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-udp_tnl-segmentation\",\n                    deprecated_by=\"tx_udp_tnl_segmentation\",\n                ),\n                ArgValidatorBool(\"tx_vlan_stag_hw_insert\", default_value=None),\n                ArgValidatorDeprecated(\n                    \"tx-vlan-stag-hw-insert\",\n                    deprecated_by=\"tx_vlan_stag_hw_insert\",\n                ),\n            ],\n        )\n\n\nclass ArgValidator_DictEthtoolCoalesce(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"coalesce\",\n            nested=[\n                ArgValidatorBool(\"adaptive_rx\", default_value=None),\n                ArgValidatorBool(\"adaptive_tx\", default_value=None),\n                ArgValidatorNum(\n                    \"pkt_rate_high\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"pkt_rate_low\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_frames\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_frames_high\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_frames_irq\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_frames_low\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_usecs\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_usecs_high\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_usecs_irq\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_usecs_low\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"sample_interval\",\n                    val_min=0,\n                    val_max=UINT32_MAX,\n                    default_value=None,\n                ),\n                ArgValidatorNum(\n                    \"stats_block_usecs\",\n                    val_min=0,\n                    val_max=UINT32_MAX,\n                    default_value=None,\n                ),\n                ArgValidatorNum(\n                    \"tx_frames\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_frames_high\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_frames_irq\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_frames_low\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_usecs\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_usecs_high\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_usecs_irq\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx_usecs_low\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n            ],\n        )\n\n\nclass ArgValidator_DictEthtoolRing(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"ring\",\n            nested=[\n                ArgValidatorNum(\n                    \"rx\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_jumbo\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"rx_mini\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"tx\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n            ],\n        )\n\n\nclass ArgValidator_DictBond(ArgValidatorDict):\n\n    VALID_MODES = [\n        \"balance-rr\",\n        \"active-backup\",\n        \"balance-xor\",\n        \"broadcast\",\n        \"802.3ad\",\n        \"balance-tlb\",\n        \"balance-alb\",\n    ]\n\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"bond\",\n            nested=[\n                ArgValidatorStr(\"mode\", enum_values=ArgValidator_DictBond.VALID_MODES),\n                ArgValidatorNum(\n                    \"ad_actor_sys_prio\", val_min=1, val_max=65535, default_value=None\n                ),\n                ArgValidatorMac(\"ad_actor_system\"),\n                ArgValidatorStr(\n                    \"ad_select\", enum_values=[\"stable\", \"bandwidth\", \"count\"]\n                ),\n                ArgValidatorNum(\n                    \"ad_user_port_key\", val_min=0, val_max=1023, default_value=None\n                ),\n                ArgValidatorBool(\"all_ports_active\", default_value=None),\n                ArgValidatorStr(\"arp_all_targets\", enum_values=[\"any\", \"all\"]),\n                ArgValidatorNum(\n                    \"arp_interval\", val_min=0, val_max=1000000, default_value=None\n                ),\n                ArgValidatorStr(\n                    \"arp_validate\",\n                    enum_values=[\n                        \"none\",\n                        \"active\",\n                        \"backup\",\n                        \"all\",\n                        \"filter\",\n                        \"filter_active\",\n                        \"filter_backup\",\n                    ],\n                ),\n                ArgValidatorStr(\"arp_ip_target\"),\n                ArgValidatorNum(\n                    \"downdelay\", val_min=0, val_max=1000000, default_value=None\n                ),\n                ArgValidatorStr(\n                    \"fail_over_mac\", enum_values=[\"none\", \"active\", \"follow\"]\n                ),\n                ArgValidatorStr(\"lacp_rate\", enum_values=[\"slow\", \"fast\"]),\n                ArgValidatorNum(\n                    \"lp_interval\", val_min=1, val_max=1000000, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"miimon\", val_min=0, val_max=1000000, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"min_links\", val_min=0, val_max=1000000, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"num_grat_arp\", val_min=0, val_max=255, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"packets_per_port\", val_min=0, val_max=65535, default_value=None\n                ),\n                ArgValidatorNum(\n                    \"peer_notif_delay\", val_min=0, val_max=1000000, default_value=None\n                ),\n                ArgValidatorStr(\"primary\"),\n                ArgValidatorStr(\n                    \"primary_reselect\", enum_values=[\"always\", \"better\", \"failure\"]\n                ),\n                ArgValidatorNum(\n                    \"resend_igmp\", val_min=0, val_max=255, default_value=None\n                ),\n                ArgValidatorBool(\"tlb_dynamic_lb\", default_value=None),\n                ArgValidatorNum(\n                    \"updelay\", val_min=0, val_max=1000000, default_value=None\n                ),\n                ArgValidatorBool(\"use_carrier\", default_value=None),\n                ArgValidatorStr(\n                    \"xmit_hash_policy\",\n                    enum_values=[\n                        \"layer2\",\n                        \"layer3+4\",\n                        \"layer2+3\",\n                        \"encap2+3\",\n                        \"encap3+4\",\n                        \"vlan+srcmac\",\n                    ],\n                ),\n            ],\n            default_value=ArgValidator.MISSING,\n        )\n\n    def _validate_post(self, value, name, result):\n        AD_OPTIONS = [\n            \"ad_actor_sys_prio\",\n            \"ad_actor_system\",\n            \"ad_user_port_key\",\n            \"lacp_rate\",\n        ]\n        ARP_OPTIONS = [\"arp_interval\", \"arp_ip_target\", \"arp_validate\"]\n        ARP_ONLY_MODE = [\"balance-rr\", \"active-backup\", \"balance-xor\", \"broadcast\"]\n\n        if result[\"mode\"] != \"802.3ad\":\n            for option in AD_OPTIONS:\n                if result[option] is not None:\n                    raise ValidationError(\n                        name,\n                        \"the bond option {0} is only valid with mode 802.3ad\".format(\n                            option\n                        ),\n                    )\n\n        if result[\"packets_per_port\"] is not None and result[\"mode\"] != \"balance-rr\":\n            raise ValidationError(\n                name,\n                \"the bond option packets_per_port is only valid with mode balance-rr\",\n            )\n\n        if result[\"mode\"] not in ARP_ONLY_MODE:\n            for option in ARP_OPTIONS:\n                if result[option] is not None:\n                    raise ValidationError(\n                        name,\n                        \"the bond option {0} is only valid with mode balance-rr, active-backup, balance-xor or broadcast\".format(\n                            option\n                        ),\n                    )\n\n        if result[\"tlb_dynamic_lb\"] is not None and result[\"mode\"] not in [\n            \"balance-tlb\",\n            \"balance-alb\",\n        ]:\n            raise ValidationError(\n                name,\n                \"the bond option tlb_dynamic_lb is only valid with mode balance-tlb or balance-alb\",\n            )\n\n        if result[\"primary\"] is not None and result[\"mode\"] not in [\n            \"active-backup\",\n            \"balance-tlb\",\n            \"balance-alb\",\n        ]:\n            raise ValidationError(\n                name,\n                \"the bond option primary is only valid with mode active-backup, balance-tlb, balance-alb\",\n            )\n\n        if (\n            result[\"updelay\"] is not None or result[\"downdelay\"] is not None\n        ) and not result[\"miimon\"]:\n            raise ValidationError(\n                name,\n                \"the bond option downdelay or updelay is only valid with miimon enabled\",\n            )\n        if result[\"peer_notif_delay\"]:\n            if not result[\"miimon\"] or result[\"peer_notif_delay\"] % result[\"miimon\"]:\n                raise ValidationError(\n                    name,\n                    \"the bond option peer_notif_delay needs miimon enabled and must be miimon multiple\",\n                )\n            if result[\"arp_interval\"]:\n                raise ValidationError(\n                    name,\n                    \"the bond option peer_notif_delay needs arp_interval disabled\",\n                )\n        if result[\"arp_ip_target\"]:\n            if not result[\"arp_interval\"]:\n                raise ValidationError(\n                    name,\n                    \"the bond option arp_ip_target requires arp_interval to be set\",\n                )\n\n        if result[\"arp_interval\"]:\n            if not result[\"arp_ip_target\"]:\n                raise ValidationError(\n                    name,\n                    \"the bond option arp_interval requires arp_ip_target to be set\",\n                )\n\n        return result\n\n    def get_default_bond(self):\n        return {\n            \"mode\": ArgValidator_DictBond.VALID_MODES[0],\n            \"ad_actor_sys_prio\": None,\n            \"ad_actor_system\": None,\n            \"ad_select\": None,\n            \"ad_user_port_key\": None,\n            \"all_ports_active\": None,\n            \"arp_all_targets\": None,\n            \"arp_interval\": None,\n            \"arp_ip_target\": None,\n            \"arp_validate\": None,\n            \"downdelay\": None,\n            \"fail_over_mac\": None,\n            \"lacp_rate\": None,\n            \"lp_interval\": None,\n            \"miimon\": None,\n            \"min_links\": None,\n            \"num_grat_arp\": None,\n            \"packets_per_port\": None,\n            \"peer_notif_delay\": None,\n            \"primary\": None,\n            \"primary_reselect\": None,\n            \"resend_igmp\": None,\n            \"tlb_dynamic_lb\": None,\n            \"updelay\": None,\n            \"use_carrier\": None,\n            \"xmit_hash_policy\": None,\n        }\n\n\nclass ArgValidator_DictInfiniband(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"infiniband\",\n            nested=[\n                ArgValidatorStr(\n                    \"transport_mode\", enum_values=[\"datagram\", \"connected\"]\n                ),\n                ArgValidatorNum(\n                    \"p_key\", val_min=-1, val_max=0xFFFF, default_value=None\n                ),\n            ],\n            default_value=ArgValidator.MISSING,\n        )\n\n    def get_default_infiniband(self):\n        return {\"transport_mode\": \"datagram\", \"p_key\": None}\n\n\nclass ArgValidator_DictVlan(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"vlan\",\n            nested=[ArgValidatorNum(\"id\", val_min=0, val_max=4094, required=True)],\n            default_value=ArgValidator.MISSING,\n        )\n\n    def get_default_vlan(self):\n        return {\"id\": None}\n\n\nclass ArgValidator_DictMacvlan(ArgValidatorDict):\n\n    VALID_MODES = [\"vepa\", \"bridge\", \"private\", \"passthru\", \"source\"]\n\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"macvlan\",\n            nested=[\n                ArgValidatorStr(\n                    \"mode\",\n                    enum_values=ArgValidator_DictMacvlan.VALID_MODES,\n                    default_value=\"bridge\",\n                ),\n                ArgValidatorBool(\"promiscuous\", default_value=True),\n                ArgValidatorBool(\"tap\", default_value=False),\n            ],\n            default_value=ArgValidator.MISSING,\n        )\n\n    def get_default_macvlan(self):\n        return {\"mode\": \"bridge\", \"promiscuous\": True, \"tap\": False}\n\n    def _validate_post(self, value, name, result):\n        if result[\"promiscuous\"] is False and result[\"mode\"] != \"passthru\":\n            raise ValidationError(\n                name, \"non promiscuous operation is allowed only in passthru mode\"\n            )\n        return result\n\n\nclass ArgValidatorPath(ArgValidatorStr):\n    \"\"\"\n    Validates that the value is a valid posix absolute path\n    \"\"\"\n\n    def __init__(self, name, required=False, default_value=None):\n        ArgValidatorStr.__init__(self, name, required, default_value, None)\n\n    def _validate_impl(self, value, name):\n        ArgValidatorStr._validate_impl(self, value, name)\n\n        if posixpath.isabs(value) is False:\n            raise ValidationError(\n                name,\n                \"value '%s' is not a valid posix absolute path\" % (value),\n            )\n        return value\n\n\nclass ArgValidator_Dict802_1X(ArgValidatorDict):\n\n    VALID_EAP_TYPES = [\"tls\"]\n\n    VALID_PRIVATE_KEY_FLAGS = [\"none\", \"agent-owned\", \"not-saved\", \"not-required\"]\n\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"ieee802_1x\",\n            nested=[\n                ArgValidatorStr(\n                    \"eap\",\n                    enum_values=ArgValidator_Dict802_1X.VALID_EAP_TYPES,\n                    default_value=\"tls\",\n                ),\n                ArgValidatorStr(\"identity\", required=True),\n                ArgValidatorPath(\"private_key\", required=True),\n                ArgValidatorStr(\"private_key_password\"),\n                ArgValidatorList(\n                    \"private_key_password_flags\",\n                    nested=ArgValidatorStr(\n                        \"private_key_password_flags[?]\",\n                        enum_values=ArgValidator_Dict802_1X.VALID_PRIVATE_KEY_FLAGS,\n                    ),\n                    default_value=None,\n                ),\n                ArgValidatorPath(\"client_cert\", required=True),\n                ArgValidatorPath(\"ca_cert\"),\n                ArgValidatorPath(\"ca_path\"),\n                ArgValidatorBool(\"system_ca_certs\", default_value=False),\n                ArgValidatorStr(\"domain_suffix_match\", required=False),\n            ],\n            default_value=None,\n        )\n\n    def _validate_post(self, value, name, result):\n        if result[\"system_ca_certs\"] is True and result[\"ca_path\"] is not None:\n            raise ValidationError(\n                name,\n                \"ca_path will be ignored by NetworkManager if system_ca_certs is used\",\n            )\n        return result\n\n\nclass ArgValidator_DictWireless(ArgValidatorDict):\n\n    VALID_KEY_MGMT = [\n        \"owe\",\n        \"sae\",\n        \"wpa-eap\",\n        \"wpa-psk\",\n    ]\n\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"wireless\",\n            nested=[\n                ArgValidatorStr(\"ssid\", max_length=32),\n                ArgValidatorStr(\n                    \"key_mgmt\", enum_values=ArgValidator_DictWireless.VALID_KEY_MGMT\n                ),\n                ArgValidatorStr(\"password\", default_value=None, max_length=63),\n            ],\n            default_value=None,\n        )\n\n    def _validate_post(self, value, name, result):\n        if result[\"key_mgmt\"] == \"wpa-psk\" or result[\"key_mgmt\"] == \"sae\":\n            if result[\"password\"] is None:\n                raise ValidationError(\n                    name,\n                    \"must supply a password if using {0} key management\".format(\n                        result[\"key_mgmt\"]\n                    ),\n                )\n        else:\n            if result[\"password\"] is not None:\n                raise ValidationError(\n                    name,\n                    \"password only allowed if using 'wpa-psk' or 'sae' key management\",\n                )\n\n        return result\n\n\nclass ArgValidatorListMatchPath(ArgValidatorList):\n    def __init__(self, name, nested, default_value, remove_none_or_empty):\n        ArgValidatorList.__init__(\n            self,\n            name,\n            nested,\n            default_value,\n            remove_none_or_empty,\n        )\n\n    def _validate_impl(self, value, name):\n        result = ArgValidatorList._validate_impl(self, value, name)\n        if result == [\"|\"] or result == [\"&\"]:\n            raise ValidationError(\n                name,\n                \"value '%s' is not a valid 'match.path' setting, after \"\n                \"normalization, '%s' will only match the devices that have no PCI \"\n                \"path\" % (value, result),\n            )\n        return result\n\n\nclass ArgValidator_DictMatch(ArgValidatorDict):\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"match\",\n            nested=[\n                ArgValidatorListMatchPath(\n                    \"path\",\n                    nested=ArgValidatorStr(\"path[?]\", allow_empty=True),\n                    default_value=None,\n                    remove_none_or_empty=True,\n                ),\n            ],\n            default_value={},\n        )\n\n\nclass ArgValidator_DictConnection(ArgValidatorDict):\n\n    VALID_PERSISTENT_STATES = [\"absent\", \"present\"]\n    VALID_STATES = VALID_PERSISTENT_STATES + [\"up\", \"down\"]\n    VALID_TYPES = [\n        \"ethernet\",\n        \"infiniband\",\n        \"bridge\",\n        \"team\",\n        \"bond\",\n        \"vlan\",\n        \"macvlan\",\n        \"wireless\",\n        # wokeignore:rule=dummy\n        \"dummy\",\n    ]\n    VALID_PORT_TYPES = [\"bridge\", \"bond\", \"team\"]\n\n    def __init__(self):\n        ArgValidatorDict.__init__(\n            self,\n            name=\"connection\",\n            nested=[\n                ArgValidatorStr(\"name\"),\n                ArgValidatorStr(\n                    \"state\", enum_values=ArgValidator_DictConnection.VALID_STATES\n                ),\n                ArgValidatorStr(\n                    \"persistent_state\",\n                    enum_values=ArgValidator_DictConnection.VALID_PERSISTENT_STATES,\n                ),\n                ArgValidatorBool(\"force_state_change\", default_value=None),\n                ArgValidatorNum(\n                    \"wait\",\n                    val_min=0,\n                    val_max=3600,\n                    numeric_type=float,\n                    default_value=None,\n                ),\n                ArgValidatorStr(\n                    \"type\", enum_values=ArgValidator_DictConnection.VALID_TYPES\n                ),\n                ArgValidatorBool(\"autoconnect\", default_value=True),\n                ArgValidatorNum(\n                    \"autoconnect_retries\",\n                    val_min=0,\n                    val_max=UINT32_MAX,\n                    default_value=-1,\n                ),\n                ArgValidatorStr(\n                    \"port_type\",\n                    enum_values=ArgValidator_DictConnection.VALID_PORT_TYPES,\n                ),\n                ArgValidatorDeprecated(\n                    # wokeignore:rule=slave\n                    \"slave_type\",\n                    deprecated_by=\"port_type\",\n                ),\n                ArgValidatorStr(\"controller\"),\n                # wokeignore:rule=master\n                ArgValidatorDeprecated(\"master\", deprecated_by=\"controller\"),\n                ArgValidatorStr(\"interface_name\", allow_empty=True),\n                ArgValidatorMac(\"mac\"),\n                ArgValidatorMac(\n                    \"cloned_mac\",\n                    enum_values=[\n                        \"default\",\n                        \"preserve\",\n                        \"permanent\",\n                        \"random\",\n                        \"stable\",\n                    ],\n                    default_value=\"default\",\n                ),\n                ArgValidatorNum(\n                    \"mtu\", val_min=0, val_max=UINT32_MAX, default_value=None\n                ),\n                ArgValidatorStr(\"zone\"),\n                ArgValidatorBool(\"check_iface_exists\", default_value=True),\n                ArgValidatorStr(\"parent\"),\n                ArgValidatorBool(\"ignore_errors\", default_value=None),\n                ArgValidator_DictIP(),\n                ArgValidator_DictEthernet(),\n                ArgValidator_DictEthtool(),\n                ArgValidator_DictBond(),\n                ArgValidator_DictInfiniband(),\n                ArgValidator_DictVlan(),\n                ArgValidator_DictMacvlan(),\n                ArgValidator_Dict802_1X(),\n                ArgValidator_DictWireless(),\n                ArgValidator_DictMatch(),\n                # deprecated options:\n                ArgValidatorStr(\n                    \"infiniband_transport_mode\",\n                    enum_values=[\"datagram\", \"connected\"],\n                    default_value=ArgValidator.MISSING,\n                ),\n                ArgValidatorNum(\n                    \"infiniband_p_key\",\n                    val_min=-1,\n                    val_max=0xFFFF,\n                    default_value=ArgValidator.MISSING,\n                ),\n                ArgValidatorNum(\n                    \"vlan_id\",\n                    val_min=0,\n                    val_max=4094,\n                    default_value=ArgValidator.MISSING,\n                ),\n            ],\n            default_value=dict,\n            all_missing_during_validate=True,\n        )\n\n        # valid field based on specified state, used to set defaults and reject\n        # bad values\n        self.VALID_FIELDS = []\n\n    def _validate_post_state(self, value, name, result):\n        \"\"\"\n        Validate state definitions and create a corresponding list of actions.\n        \"\"\"\n        actions = []\n        state = result.get(\"state\")\n        persistent_state = result.get(\"persistent_state\")\n\n        if state in self.VALID_PERSISTENT_STATES:\n            if persistent_state:\n                raise ValidationError(\n                    name,\n                    \"State cannot be '{0}' if persistent_state is specified\".format(\n                        state\n                    ),\n                )\n            persistent_state = state\n            state = None\n\n        # default persistent_state to present (not done via default_value in the\n        # ArgValidatorStr, the value will only be set at the end of\n        # _validate_post()\n        if not persistent_state:\n            persistent_state = \"present\"\n\n        # If the profile should be absent at the end, it needs to be present in\n        # the meantime to allow to (de)activate it. This is only possible if it\n        # is completely defined, for which `type` needs to be specified.\n        # Otherwise, downing is happening on a best-effort basis\n        if persistent_state == \"absent\" and state and result.get(\"type\"):\n            actions.append(\"present\")\n\n        actions.append(persistent_state)\n\n        # Change the runtime state if necessary\n        if state:\n            actions.append(state)\n\n        result[\"state\"] = state\n        result[\"persistent_state\"] = persistent_state\n        result[\"actions\"] = actions\n\n        return result\n\n    def _validate_post_fields(self, value, name, result):\n        \"\"\"\n        Validate the allowed fields (settings depending on the requested state).\n        FIXME: Maybe it should check whether \"up\"/\"down\" is present in the\n        actions instead of checking the runtime state from \"state\" to switch\n        from state to actions after the state parsing is done.\n        \"\"\"\n        state = result.get(\"state\")\n        persistent_state = result.get(\"persistent_state\")\n\n        # minimal settings not related to runtime changes\n        valid_fields = [\"actions\", \"ignore_errors\", \"name\", \"persistent_state\", \"state\"]\n\n        # when type is present, a profile is completely specified (using\n        # defaults or other settings)\n        if \"type\" in result:\n            valid_fields += list(self.nested.keys())\n\n        # If there are no runtime changes, \"wait\" and \"force_state_change\" do\n        # not make sense\n        # FIXME: Maybe this restriction can be removed. Need to make sure that\n        # defaults for wait or force_state_change do not interfere\n        if not state:\n            while \"wait\" in valid_fields:\n                valid_fields.remove(\"wait\")\n            while \"force_state_change\" in valid_fields:\n                valid_fields.remove(\"force_state_change\")\n        else:\n            valid_fields += [\"force_state_change\", \"wait\"]\n\n        # FIXME: Maybe just accept all values, even if they are not\n        # needed/meaningful in the respective context\n        valid_fields = set(valid_fields)\n        for key in result:\n            if key not in valid_fields:\n                raise ValidationError(\n                    name + \".\" + key,\n                    \"property is not allowed for state '%s' and persistent_state '%s'\"\n                    % (state, persistent_state),\n                )\n\n        if \"name\" not in result:\n            if persistent_state == \"absent\":\n                result[\"name\"] = \"\"  # set to empty string to mean *absent all others*\n            else:\n                raise ValidationError(name, \"missing 'name'\")\n\n        # FIXME: Seems to be a duplicate check since \"wait\" will be removed from\n        # valid_keys when state is considered to be not True\n        if \"wait\" in result and not state:\n            raise ValidationError(\n                name + \".wait\",\n                \"'wait' is not allowed for state '%s'\" % (result[\"state\"]),\n            )\n\n        result[\"state\"] = state\n        result[\"persistent_state\"] = persistent_state\n\n        self.VALID_FIELDS = valid_fields\n        return result\n\n    def _validate_post_wireless(self, value, name, result):\n        \"\"\"\n        Validate wireless settings\n        \"\"\"\n        if \"type\" in result:\n            if result[\"type\"] == \"wireless\":\n                if \"wireless\" in result:\n                    if (\n                        result[\"wireless\"][\"key_mgmt\"] == \"wpa-eap\"\n                        and \"ieee802_1x\" not in result\n                    ):\n                        raise ValidationError(\n                            name + \".wireless\",\n                            \"key management set to wpa-eap but no \"\n                            \"'ieee802_1x' settings defined\",\n                        )\n                else:\n                    raise ValidationError(\n                        name + \".wireless\",\n                        \"must define 'wireless' settings for 'type' 'wireless'\",\n                    )\n\n            else:\n                if \"wireless\" in result:\n                    raise ValidationError(\n                        name + \".wireless\",\n                        \"'wireless' settings are not allowed for 'type' '%s'\"\n                        % (result[\"type\"]),\n                    )\n\n        return result\n\n    def _validate_post(self, value, name, result):\n        result = self._validate_post_state(value, name, result)\n        result = self._validate_post_fields(value, name, result)\n        result = self._validate_post_wireless(value, name, result)\n\n        if \"type\" in result:\n\n            if \"controller\" in result:\n                if \"port_type\" not in result:\n                    result[\"port_type\"] = None\n                if result[\"controller\"] == result[\"name\"]:\n                    raise ValidationError(\n                        name + \".controller\", '\"controller\" cannot refer to itself'\n                    )\n            else:\n                if \"port_type\" in result:\n                    raise ValidationError(\n                        name + \".port_type\",\n                        \"'port_type' requires a 'controller' property\",\n                    )\n\n            if \"ip\" in result:\n                if \"controller\" in result:\n                    raise ValidationError(\n                        name + \".ip\", 'a port cannot have an \"ip\" property'\n                    )\n            else:\n                if \"controller\" not in result:\n                    result[\"ip\"] = self.nested[\"ip\"].get_default_value()\n\n            if \"zone\" in result:\n                if \"controller\" in result:\n                    raise ValidationError(\n                        name + \".zone\", '\"zone\" cannot be configured for port types'\n                    )\n            else:\n                result[\"zone\"] = None\n\n            if \"mac\" in result:\n                if result[\"type\"] not in [\"ethernet\", \"infiniband\"]:\n                    raise ValidationError(\n                        name + \".mac\",\n                        \"a 'mac' address is only allowed for type 'ethernet' \"\n                        \"or 'infiniband'\",\n                    )\n                maclen = len(Util.mac_aton(result[\"mac\"]))\n                if result[\"type\"] == \"ethernet\" and maclen != 6:\n                    raise ValidationError(\n                        name + \".mac\",\n                        \"a 'mac' address for type ethernet requires 6 octets \"\n                        \"but is '%s'\" % result[\"mac\"],\n                    )\n                if result[\"type\"] == \"infiniband\" and maclen != 20:\n                    raise ValidationError(\n                        name + \".mac\",\n                        \"a 'mac' address for type ethernet requires 20 octets \"\n                        \"but is '%s'\" % result[\"mac\"],\n                    )\n\n            if result.get(\"match\"):\n                if \"path\" in result[\"match\"]:\n                    if result[\"type\"] not in [\"ethernet\", \"infiniband\"]:\n                        raise ValidationError(\n                            name + \".match.path\",\n                            \"'match.path' settings are only supported for type \"\n                            \"'ethernet' or 'infiniband'\",\n                        )\n\n            if result[\"type\"] == \"infiniband\":\n                if \"infiniband\" not in result:\n                    result[\"infiniband\"] = self.nested[\n                        \"infiniband\"\n                    ].get_default_infiniband()\n                    if \"infiniband_transport_mode\" in result:\n                        result[\"infiniband\"][\"transport_mode\"] = result[\n                            \"infiniband_transport_mode\"\n                        ]\n                        del result[\"infiniband_transport_mode\"]\n                    if \"infiniband_p_key\" in result:\n                        result[\"infiniband\"][\"p_key\"] = result[\"infiniband_p_key\"]\n                        del result[\"infiniband_p_key\"]\n                else:\n                    if \"infiniband_transport_mode\" in result:\n                        raise ValidationError(\n                            name + \".infiniband_transport_mode\",\n                            \"cannot mix deprecated 'infiniband_transport_mode' \"\n                            \"property with 'infiniband' settings\",\n                        )\n                    if \"infiniband_p_key\" in result:\n                        raise ValidationError(\n                            name + \".infiniband_p_key\",\n                            \"cannot mix deprecated 'infiniband_p_key' property \"\n                            \"with 'infiniband' settings\",\n                        )\n                    if result[\"infiniband\"][\"transport_mode\"] is None:\n                        result[\"infiniband\"][\"transport_mode\"] = \"datagram\"\n                # For the compatibility with NetworkManager API and the initial\n                # infiniband support in the role (the user may get used to set the\n                # `p_key` into `-1` to make the connection created on the physical\n                # infiniband interface), normalize the `p_key` setting as follows\n                if result[\"infiniband\"][\"p_key\"] == -1:\n                    result[\"infiniband\"][\"p_key\"] = None\n                if result[\"infiniband\"][\"p_key\"] is not None:\n                    if (\n                        result[\"infiniband\"][\"p_key\"] == 0x0000\n                        or result[\"infiniband\"][\"p_key\"] == 0x8000\n                    ):\n                        raise ValidationError(\n                            name,\n                            \"the pkey value {0} is not allowed as such a pkey value is not \"\n                            \"supported by kernel\".format(result[\"infiniband\"][\"p_key\"]),\n                        )\n                    if \"mac\" not in result and \"parent\" not in result:\n                        raise ValidationError(\n                            name + \".infiniband.p_key\",\n                            \"a infiniband device with 'infiniband.p_key' \"\n                            \"property also needs 'mac' or 'parent' property\",\n                        )\n                    if \"interface_name\" in result:\n                        raise ValidationError(\n                            name + \".interface_name\",\n                            \"the 'interface_name' must be unset for the ipoib \"\n                            \"connection, instead it is {0}\".format(\n                                result[\"interface_name\"]\n                            ),\n                        )\n            else:\n                if \"infiniband\" in result:\n                    raise ValidationError(\n                        name + \".infiniband\",\n                        \"'infiniband' settings are only allowed for type 'infiniband'\",\n                    )\n                if \"infiniband_transport_mode\" in result:\n                    raise ValidationError(\n                        name + \".infiniband_transport_mode\",\n                        \"a 'infiniband_transport_mode' property is only \"\n                        \"allowed for type 'infiniband'\",\n                    )\n                if \"infiniband_p_key\" in result:\n                    raise ValidationError(\n                        name + \".infiniband_p_key\",\n                        \"a 'infiniband_p_key' property is only allowed for \"\n                        \"type 'infiniband'\",\n                    )\n\n            if \"interface_name\" in result:\n                # Ignore empty interface_name\n                if result[\"interface_name\"] == \"\":\n                    del result[\"interface_name\"]\n                elif not Util.ifname_valid(result[\"interface_name\"]):\n                    raise ValidationError(\n                        name + \".interface_name\",\n                        \"invalid 'interface_name' '%s'\" % (result[\"interface_name\"]),\n                    )\n            else:\n                if (\n                    not result.get(\"mac\")\n                    and (not result.get(\"match\") or not result[\"match\"].get(\"path\"))\n                    and not (\n                        result[\"type\"] == \"infiniband\"\n                        and result[\"infiniband\"][\"p_key\"] is not None\n                    )\n                ):\n                    if not Util.ifname_valid(result[\"name\"]):\n                        raise ValidationError(\n                            name + \".interface_name\",\n                            \"'interface_name' as 'name' '%s' is not valid\"\n                            % (result[\"name\"]),\n                        )\n                    result[\"interface_name\"] = result[\"name\"]\n\n            if \"interface_name\" not in result and result[\"type\"] in [\n                \"bond\",\n                \"bridge\",\n                \"macvlan\",\n                \"team\",\n                \"vlan\",\n            ]:\n                raise ValidationError(\n                    name + \".interface_name\",\n                    \"type '%s' requires 'interface_name'\" % (result[\"type\"]),\n                )\n\n            if result[\"type\"] == \"vlan\":\n                if \"vlan\" not in result:\n                    if \"vlan_id\" not in result:\n                        raise ValidationError(\n                            name + \".vlan\", 'missing \"vlan\" settings for \"type\" \"vlan\"'\n                        )\n                    result[\"vlan\"] = self.nested[\"vlan\"].get_default_vlan()\n                    result[\"vlan\"][\"id\"] = result[\"vlan_id\"]\n                    del result[\"vlan_id\"]\n                else:\n                    if \"vlan_id\" in result:\n                        raise ValidationError(\n                            name + \".vlan_id\",\n                            \"don't use the deprecated 'vlan_id' together with the \"\n                            \"'vlan' settings'\",\n                        )\n                if \"parent\" not in result:\n                    raise ValidationError(\n                        name + \".parent\", 'missing \"parent\" for \"type\" \"vlan\"'\n                    )\n            else:\n                if \"vlan\" in result:\n                    raise ValidationError(\n                        name + \".vlan\", '\"vlan\" is only allowed for \"type\" \"vlan\"'\n                    )\n                if \"vlan_id\" in result:\n                    raise ValidationError(\n                        name + \".vlan_id\", '\"vlan_id\" is only allowed for \"type\" \"vlan\"'\n                    )\n\n            if \"parent\" in result:\n                if result[\"type\"] not in [\"vlan\", \"macvlan\", \"infiniband\"]:\n                    raise ValidationError(\n                        name + \".parent\",\n                        \"'parent' is only allowed for type 'vlan', 'macvlan' or \"\n                        \"'infiniband'\",\n                    )\n                if result[\"parent\"] == result[\"name\"]:\n                    raise ValidationError(\n                        name + \".parent\", '\"parent\" cannot refer to itself'\n                    )\n\n            if result[\"type\"] == \"bond\":\n                if \"bond\" not in result:\n                    result[\"bond\"] = self.nested[\"bond\"].get_default_bond()\n            else:\n                if \"bond\" in result:\n                    raise ValidationError(\n                        name + \".bond\",\n                        \"'bond' settings are not allowed for 'type' '%s'\"\n                        % (result[\"type\"]),\n                    )\n\n            if result[\"type\"] in [\"ethernet\", \"vlan\", \"bridge\", \"bond\", \"team\"]:\n                if \"ethernet\" not in result:\n                    result[\"ethernet\"] = self.nested[\"ethernet\"].get_default_ethernet()\n            else:\n                if \"ethernet\" in result:\n                    raise ValidationError(\n                        name + \".ethernet\",\n                        \"'ethernet' settings are not allowed for 'type' '%s'\"\n                        % (result[\"type\"]),\n                    )\n\n            if result[\"type\"] == \"macvlan\":\n                if \"macvlan\" not in result:\n                    result[\"macvlan\"] = self.nested[\"macvlan\"].get_default_macvlan()\n            else:\n                if \"macvlan\" in result:\n                    raise ValidationError(\n                        name + \".macvlan\",\n                        \"'macvlan' settings are not allowed for 'type' '%s'\"\n                        % (result[\"type\"]),\n                    )\n\n            if \"ieee802_1x\" in result and result[\"type\"] not in [\n                \"ethernet\",\n                \"wireless\",\n            ]:\n                raise ValidationError(\n                    name + \".ieee802_1x\",\n                    \"802.1x settings only allowed for ethernet or wireless interfaces.\",\n                )\n\n        for name in self.VALID_FIELDS:\n            if name in result:\n                continue\n            value = self.nested[name].get_default_value()\n            if value is not ArgValidator.MISSING:\n                result[name] = value\n\n        return result\n\n\nclass ArgValidator_ListConnections(ArgValidatorList):\n    def __init__(self):\n        ArgValidatorList.__init__(\n            self,\n            name=\"connections\",\n            nested=ArgValidator_DictConnection(),\n            default_value=list,\n        )\n\n    def _validate_post(self, value, name, result):\n        for idx, connection in enumerate(result):\n            if \"type\" in connection:\n                if connection[\"controller\"]:\n                    c = ArgUtil.connection_find_by_name(\n                        connection[\"controller\"], result, idx\n                    )\n                    if not c:\n                        raise ValidationError(\n                            name + \"[\" + str(idx) + \"].controller\",\n                            \"references non-existing 'controller' connection '%s'\"\n                            % (connection[\"controller\"]),\n                        )\n                    if c[\"type\"] not in ArgValidator_DictConnection.VALID_PORT_TYPES:\n                        raise ValidationError(\n                            name + \"[\" + str(idx) + \"].controller\",\n                            \"references 'controller' connection '%s' which is \"\n                            \"not a controller \"\n                            \"type by '%s'\" % (connection[\"controller\"], c[\"type\"]),\n                        )\n                    if connection[\"type\"] == \"infiniband\":\n                        if c[\"type\"] == \"bond\" and c[\"bond\"][\"mode\"] != \"active-backup\":\n                            raise ValidationError(\n                                name + \"[\" + str(idx) + \"].controller\",\n                                \"bond only supports infiniband ports in active-backup mode\",\n                            )\n                    if connection[\"port_type\"] is None:\n                        connection[\"port_type\"] = c[\"type\"]\n                    elif connection[\"port_type\"] != c[\"type\"]:\n                        raise ValidationError(\n                            name + \"[\" + str(idx) + \"].controller\",\n                            \"references 'controller' connection '%s' which is \"\n                            \"of type '%s' instead of port_type '%s'\"\n                            % (\n                                connection[\"controller\"],\n                                c[\"type\"],\n                                connection[\"port_type\"],\n                            ),\n                        )\n                if connection[\"parent\"]:\n                    if not ArgUtil.connection_find_by_name(\n                        connection[\"parent\"], result, idx\n                    ):\n                        raise ValidationError(\n                            name + \"[\" + str(idx) + \"].parent\",\n                            \"references non-existing 'parent' connection '%s'\"\n                            % (connection[\"parent\"]),\n                        )\n        return result\n\n    VALIDATE_ONE_MODE_NM = \"nm\"\n    VALIDATE_ONE_MODE_INITSCRIPTS = \"initscripts\"\n\n    def validate_route_tables(self, connection, idx):\n        rule_route_combined_list = (\n            connection[\"ip\"][\"route\"] + connection[\"ip\"][\"routing_rule\"]\n        )\n        for r in rule_route_combined_list:\n            if isinstance(r[\"table\"], Util.STRING_TYPE):\n                mapping = IPRouteUtils.get_route_tables_mapping()\n                if r[\"table\"] in mapping:\n                    r[\"table\"] = mapping[r[\"table\"]]\n                else:\n                    raise ValidationError.from_connection(\n                        idx,\n                        \"cannot find route table {0} in `/etc/iproute2/rt_tables` or \"\n                        \"`/etc/iproute2/rt_tables.d/`\".format(r[\"table\"]),\n                    )\n\n    def validate_connection_one(self, mode, connections, idx):\n        def _ipv4_enabled(connection):\n            has_addrs4 = any(\n                address[\"family\"] == socket.AF_INET\n                for address in connection[\"ip\"][\"address\"]\n            )\n            return connection[\"ip\"][\"dhcp4\"] or has_addrs4\n\n        def _ipv6_is_not_configured(connection):\n            has_addrs6 = any(\n                address[\"family\"] == socket.AF_INET6\n                for address in connection[\"ip\"][\"address\"]\n            )\n            return (\n                not connection[\"ip\"][\"ipv6_disabled\"]\n                and not connection[\"ip\"][\"auto6\"]\n                and not has_addrs6\n            )\n\n        connection = connections[idx]\n        if \"type\" not in connection:\n            return\n\n        if (connection[\"parent\"]) and (\n            (\n                (mode == self.VALIDATE_ONE_MODE_INITSCRIPTS)\n                and (connection[\"type\"] == \"vlan\")\n            )\n            or (\n                (connection[\"type\"] == \"infiniband\")\n                and (connection[\"infiniband\"][\"p_key\"] is not None)\n            )\n        ):\n            try:\n                ArgUtil.connection_find_controller(\n                    connection[\"parent\"], connections, idx\n                )\n            except MyError:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"profile references a parent '%s' which has 'interface_name' \"\n                    \"missing\" % (connection[\"parent\"]),\n                )\n\n        if (connection[\"controller\"]) and (mode == self.VALIDATE_ONE_MODE_INITSCRIPTS):\n            try:\n                ArgUtil.connection_find_controller(\n                    connection[\"controller\"], connections, idx\n                )\n            except MyError:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"profile references a controller '%s' which has 'interface_name' \"\n                    \"missing\" % (connection[\"controller\"]),\n                )\n\n        # check if 802.1x connection is valid\n        if connection[\"ieee802_1x\"]:\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"802.1x authentication is not supported by initscripts. \"\n                    \"Configure 802.1x in /etc/wpa_supplicant.conf \"\n                    \"if you need to use initscripts.\",\n                )\n\n        # check if wireless connection is valid\n        if connection[\"type\"] == \"wireless\":\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"Wireless WPA auth is not supported by initscripts. \"\n                    \"Configure wireless connection in /etc/wpa_supplicant.conf \"\n                    \"if you need to use initscripts.\",\n                )\n\n        # initscripts does not support ip.ipv4_ignore_auto_dns or\n        # ip.ipv6_ignore_auto_dns, so raise errors when network\n        # provider is initscripts\n        if (\n            connection[\"ip\"][\"ipv4_ignore_auto_dns\"] is not None\n            or connection[\"ip\"][\"ipv6_ignore_auto_dns\"] is not None\n        ):\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"ip.ipv4_ignore_auto_dns or ip.ipv6_ignore_auto_dns is not \"\n                    \"supported by initscripts.\",\n                )\n        # initscripts does not support ip.wait_ip,\n        # so raise errors when network provider is initscripts\n        if connection[\"ip\"][\"wait_ip\"] != \"any\":\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"ip.wait_ip is not supported by initscripts.\",\n                )\n        # initscripts does not support ip.dns_options, so raise errors when network\n        # provider is initscripts\n        if connection[\"ip\"][\"dns_options\"]:\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"ip.dns_options is not supported by initscripts.\",\n                )\n        # initscripts does not support ip.ipv6_disabled, so raise errors when network\n        # provider is initscripts\n        if connection[\"ip\"][\"ipv6_disabled\"]:\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"ip.ipv6_disabled is not supported by initscripts.\",\n                )\n            if not hasattr(Util.NM(), \"SETTING_IP6_CONFIG_METHOD_DISABLED\"):\n                raise ValidationError.from_connection(\n                    idx,\n                    \"ip.ipv6_disabled is not supported by the running version of \"\n                    \"NetworkManager, it requires at least version 1.20. But you can \"\n                    \"disable IPv6 auto configuration by setting ip.auto6 to False. \"\n                    \"Then NetworkManager will ignore IPv6 for this connection. This \"\n                    \"will still leave the sysctl value 'disable_ipv6' unchanged, but \"\n                    \"setting ip.ipv6_disabled to True in the role will set the sysctl \"\n                    \"value 'disable_ipv6' to True \",\n                )\n        # Setting ip.dns is not allowed when corresponding IP method for that\n        # nameserver is disabled\n        for nameserver in connection[\"ip\"][\"dns\"]:\n            if nameserver[\"family\"] == socket.AF_INET and not _ipv4_enabled(connection):\n                raise ValidationError.from_connection(\n                    idx,\n                    \"IPv4 needs to be enabled to support IPv4 nameservers.\",\n                )\n            if nameserver[\"family\"] == socket.AF_INET6 and (\n                connection[\"ip\"][\"ipv6_disabled\"] or _ipv6_is_not_configured(connection)\n            ):\n                raise ValidationError.from_connection(\n                    idx,\n                    \"IPv6 needs to be enabled to support IPv6 nameservers.\",\n                )\n        # when IPv4 and IPv6 are disabled, setting ip.dns_options or\n        # ip.dns_search or ip.dns_priority is not allowed\n        if (\n            connection[\"ip\"][\"dns_search\"]\n            or connection[\"ip\"][\"dns_options\"]\n            or connection[\"ip\"][\"dns_priority\"]\n        ):\n            if not _ipv4_enabled(connection) and connection[\"ip\"][\"ipv6_disabled\"]:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"Setting 'dns_search', 'dns_options' and 'dns_priority' are not \"\n                    \"allowed when both IPv4 and IPv6 are disabled.\",\n                )\n            elif not _ipv4_enabled(connection) and _ipv6_is_not_configured(connection):\n                raise ValidationError.from_connection(\n                    idx,\n                    \"Setting 'dns_search', 'dns_options' and 'dns_priority' are not \"\n                    \"allowed when IPv4 is disabled and IPv6 is not configured.\",\n                )\n        # DNS options 'inet6', 'ip6-bytestring', 'ip6-dotint', 'no-ip6-dotint' are only\n        # supported for IPv6 configuration, so raise errors when IPv6 is disabled\n        if any(\n            option in connection[\"ip\"][\"dns_options\"]\n            for option in [\n                \"inet6\",\n                \"ip6-bytestring\",\n                \"ip6-dotint\",\n                \"no-ip6-dotint\",\n            ]\n        ):\n            if connection[\"ip\"][\"ipv6_disabled\"]:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"Setting DNS options 'inet6', 'ip6-bytestring', 'ip6-dotint', \"\n                    \"'no-ip6-dotint' is not allowed when IPv6 is disabled.\",\n                )\n\n        if connection[\"match\"]:\n            if connection[\"match\"][\"path\"]:\n                if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                    raise ValidationError.from_connection(\n                        idx,\n                        \"match.path is not supported by initscripts.\",\n                    )\n                else:\n                    if not hasattr(Util.NM(), \"SETTING_MATCH_PATH\"):\n                        raise ValidationError.from_connection(\n                            idx,\n                            \"match.path is not supported by the running version of \"\n                            \"NetworkManger.\",\n                        )\n\n        if \"bond\" in connection:\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                for option in connection[\"bond\"]:\n                    if connection[\"bond\"][option] is not None and option not in [\n                        \"mode\",\n                        \"miimon\",\n                    ]:\n                        raise ValidationError.from_connection(\n                            idx,\n                            \"initscripts only supports the mode and miimon bond \"\n                            \"options. All the other bond options are not supported by \"\n                            \"initscripts.\",\n                        )\n            # the `peer_notif_delay` bond option was supported in NM since NM 1.30\n            if connection[\"bond\"][\"peer_notif_delay\"]:\n                if not hasattr(Util.NM(), \"SETTING_BOND_OPTION_PEER_NOTIF_DELAY\"):\n                    raise ValidationError.from_connection(\n                        idx,\n                        \"the bond option peer_notif_delay is not supported in \"\n                        \"NetworkManger until NM 1.30\",\n                    )\n\n        if connection[\"ip\"][\"route\"]:\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                for route in connection[\"ip\"][\"route\"]:\n                    if route[\"type\"] is not None:\n                        raise ValidationError.from_connection(\n                            idx,\n                            \"type is not supported by initscripts\",\n                        )\n                    if route[\"src\"] is not None:\n                        raise ValidationError.from_connection(\n                            idx,\n                            \"configuring the route source is not supported by initscripts\",\n                        )\n\n        if connection[\"ip\"][\"routing_rule\"]:\n            if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS:\n                raise ValidationError.from_connection(\n                    idx,\n                    \"ip.routing_rule is not supported by initscripts\",\n                )\n            for routing_rule in connection[\"ip\"][\"routing_rule\"]:\n                if routing_rule[\"suppress_prefixlength\"] is not None:\n                    if not hasattr(\n                        Util.NM().IPRoutingRule, \"set_suppress_prefixlength\"\n                    ):\n                        raise ValidationError.from_connection(\n                            idx,\n                            \"the routing rule selector 'suppress_prefixlength' is not \"\n                            \"supported in NetworkManger until NM 1.20\",\n                        )\n            for routing_rule in connection[\"ip\"][\"routing_rule\"]:\n                if routing_rule[\"uid\"] is not None:\n                    if not hasattr(Util.NM().IPRoutingRule, \"set_uid_range\"):\n                        raise ValidationError.from_connection(\n                            idx,\n                            \"the routing rule selector 'uid' is not supported in \"\n                            \"NetworkManger until NM 1.34\",\n                        )\n\n        if mode == self.VALIDATE_ONE_MODE_INITSCRIPTS and connection[\"cloned_mac\"] in [\n            \"preserve\",\n            \"permanent\",\n            \"random\",\n            \"stable\",\n        ]:\n            raise ValidationError.from_connection(\n                idx,\n                \"Non-MAC argument is not supported by initscripts.\",\n            )\n\n        self.validate_route_tables(connection, idx)\n\n\nclass IPRouteUtils(object):\n\n    # iproute2 does not care much about the valid characters of a\n    # table alias (it doesn't even require UTF-8 encoding, the only\n    # forbidden parts are whitespace).\n    #\n    # We don't allow such flexibility. Aliases must only contain a\n    # certain set of ASCII characters. These aliases are what we accept\n    # as input (in the playbook), and there is no need to accept\n    # user input with unusual characters or non-ASCII names.\n    _ROUTE_TABLE_NAME_PATTERN = \"[a-zA-Z0-9_.-]+\"\n    ROUTE_TABLE_NAME_REGEX = re.compile(\"^\" + _ROUTE_TABLE_NAME_PATTERN + \"$\")\n\n    @classmethod\n    def _parse_route_tables_mapping(cls, file_content, mapping):\n\n        # This parses the /etc/iproute2/rt_tables file and constructs\n        # the mapping from table aliases the table numeric IDs.\n        #\n        # It is thus similar to rtnl_rttable_a2n(), from here:\n        # https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/tree/lib/rt_names.c?id=11e41a635cfab54e8e02fbff2a03715467e77ae9#n447\n        regex = re.compile(\n            b\"^\\\\s*\"  # optional leading whitespace\n            b\"(0x[0-9a-fA-F]+|[0-9]+)\"  # table ID in hex or decimal (non negative)\n            b\"\\\\s+\"  # whitespace\n            b\"(\"  # make a pattern group for the table name\n            + cls._ROUTE_TABLE_NAME_PATTERN.encode(\"ascii\")\n            + b\")\"  # close pattern group\n            b\"(\\\\s*|\\\\s+#.*)$\"  # trailing whitespace or comment\n        )\n        for line in file_content.split(b\"\\n\"):\n\n            rmatch = regex.match(line)\n            if not rmatch:\n                continue\n\n            table = rmatch.group(1)\n            name = rmatch.group(2).decode(\"ascii\")\n\n            if table.startswith(b\"0x\"):\n                tableid = int(table, 16)\n            else:\n                tableid = int(table)\n            if tableid > UINT32_MAX:\n                continue\n\n            # In case of duplicates, the latter wins. That is unlike iproute2's\n            # rtnl_rttable_a2n(), which does a linear search over the\n            # hash table (thus, the first found name depends on the content\n            # of the hash table and the result in face of duplicates is\n            # not well defined).\n            mapping[name] = tableid\n\n    @classmethod\n    def _parse_route_tables_mapping_from_file(cls, filename, mapping):\n        try:\n            with open(filename, \"rb\") as f:\n                file_content = f.read()\n        except Exception:\n            return\n        cls._parse_route_tables_mapping(file_content, mapping)\n\n    @classmethod\n    def get_route_tables_mapping(cls):\n        if not hasattr(cls, \"_cached_rt_tables\"):\n            mapping = {}\n            cls._parse_route_tables_mapping_from_file(\n                \"/etc/iproute2/rt_tables\", mapping\n            )\n            # In iproute2, the directory `/etc/iproute2/rt_tables/rt_tables.d`\n            # is also iterated when get the mapping between the route table name\n            # and route table id,\n            # https://git.kernel.org/pub/scm/network/iproute2/iproute2.git/tree/lib/rt_names.c?id=ade99e208c1843ed3b6eb9d138aa15a6a5eb5219#n391\n            try:\n                fnames = os.listdir(\"/etc/iproute2/rt_tables.d\")\n            except Exception:\n                fnames = []\n            for f in fnames:\n                if f.endswith(\".conf\") and f[0] != \".\":\n                    cls._parse_route_tables_mapping_from_file(\n                        \"/etc/iproute2/rt_tables.d/\" + f, mapping\n                    )\n            cls._cached_rt_tables = mapping\n        return cls._cached_rt_tables",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==library.network_connections:[6:2903]\n==library.network_connections:[6:2903]\n__metaclass__ = type\n\nDOCUMENTATION = \"\"\"\n---\nmodule: network_connections\nauthor: Thomas Haller (@thom311)\nshort_description: module for network role to manage connection profiles\nrequirements: [pygobject, dbus, NetworkManager]\nversion_added: \"2.13.0\"\ndescription:\n  - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n  - |\n    Manage networking profiles (connections) for NetworkManager and\n    initscripts networking providers. Documentation needs to be written. Note\n    that the network_connections module tightly integrates with the network\n    role and currently it is not expected to use this module outside the role.\n    Thus, consult README.md for examples for the role.  The requirements are\n    only for the NetworkManager (nm) provider.\noptions:\n    __debug_flags:\n        description: Flags to use for debugging\n        required: false\n        type: str\n        default: ''\n    force_state_change:\n        description: Force a state change\n        required: false\n        type: bool\n        default: False\n    ignore_errors:\n        description: Ignore errors\n        required: false\n        type: bool\n        default: False\n    __header:\n        description: Header to use in generated files\n        required: true\n        type: str\n    provider:\n        description: Network provider to use - initscripts or nm\n        required: true\n        type: str\n    connections:\n        description: Network configuration options\n        required: false\n        default: []\n        type: list\n        elements: dict\n\"\"\"\n\nEXAMPLES = \"\"\"\nnetwork_connections:\n  connections:\n    - name: eth0\n      state: up\n\"\"\"\n\nimport errno\nimport functools\nimport os\nimport re\nimport shlex\nimport socket\nimport subprocess\nimport time\nimport traceback\nimport logging\n\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network_lsr import ethtool  # noqa:E501\nfrom ansible.module_utils.network_lsr.myerror import MyError  # noqa:E501\n\nfrom ansible.module_utils.network_lsr.argument_validator import (  # noqa:E501\n    ArgUtil,\n    ArgValidator_ListConnections,\n    ValidationError,\n)\n\nfrom ansible.module_utils.network_lsr.utils import Util  # noqa:E501\nfrom ansible.module_utils.network_lsr import nm_provider  # noqa:E501\n\n# pylint: enable=import-error, no-name-in-module\n\n\n###############################################################################\nPERSISTENT_STATE = \"persistent_state\"\nABSENT_STATE = \"absent\"\n\nDEFAULT_ACTIVATION_TIMEOUT = 90\nDEFAULT_TIMEOUT = 10\nNULL_MAC = \"00:00:00:00:00:00\"\n\n\nclass CheckMode:\n    PREPARE = \"prepare\"\n    DRY_RUN = \"dry-run\"\n    PRE_RUN = \"pre-run\"\n    REAL_RUN = \"real-run\"\n    DONE = \"done\"\n\n\nclass LogLevel:\n    ERROR = \"error\"\n    WARN = \"warn\"\n    INFO = \"info\"\n    DEBUG = \"debug\"\n\n    _LOGGING_LEVEL_MAP = {\n        logging.DEBUG: DEBUG,\n        logging.INFO: INFO,\n        logging.WARN: WARN,\n        logging.ERROR: ERROR,\n    }\n\n    @staticmethod\n    def from_logging_level(logging_level):\n        return LogLevel._LOGGING_LEVEL_MAP.get(logging_level, LogLevel.ERROR)\n\n    @staticmethod\n    def fmt(level):\n        return \"<%-6s\" % (str(level) + \">\")\n\n\n# cmp() is not available in python 3 anymore\nif \"cmp\" not in dir(__builtins__):\n\n    def cmp(x, y):\n        \"\"\"\n        Replacement for built-in function cmp that was removed in Python 3\n\n        Compare the two objects x and y and return an integer according to\n        the outcome. The return value is negative if x < y, zero if x == y\n        and strictly positive if x > y.\n        \"\"\"\n\n        return (x > y) - (x < y)\n\n\nclass SysUtil:\n    @staticmethod\n    def _sysctl_read(filename):\n        try_count = 0\n        while True:\n            try_count += 1\n            try:\n                with open(filename, \"r\") as f:\n                    return f.read()\n            except Exception:\n                if try_count < 5:\n                    continue\n                raise\n\n    @staticmethod\n    def _link_read_ifindex(ifname):\n        c = SysUtil._sysctl_read(\"/sys/class/net/\" + ifname + \"/ifindex\")\n        return int(c.strip())\n\n    @staticmethod\n    def _link_read_address(ifname):\n        c = SysUtil._sysctl_read(\"/sys/class/net/\" + ifname + \"/address\")\n        return Util.mac_norm(c.strip())\n\n    @staticmethod\n    def _link_read_bond_port_perm_hwaddr(ifname):\n        filename = os.path.join(\n            \"/sys/class/net\",\n            ifname,\n            # wokeignore:rule=slave\n            \"bonding_slave\",\n            \"perm_hwaddr\",\n        )\n        if not os.path.exists(filename):\n            return None\n        c = SysUtil._sysctl_read(filename)\n        return Util.mac_norm(c.strip())\n\n    @staticmethod\n    def _link_read_permaddress(ifname):\n        return ethtool.get_perm_addr(ifname)\n\n    @staticmethod\n    def _link_infos_fetch():\n        links = {}\n        for ifname in os.listdir(\"/sys/class/net/\"):\n            if not os.path.islink(\"/sys/class/net/\" + ifname):\n                # /sys/class/net may contain certain entries\n                # that are not interface names, like\n                # wokeignore:rule=master\n                # 'bonding_master'.\n                # Skip over files that are not links.\n                continue\n            links[ifname] = {\n                \"ifindex\": SysUtil._link_read_ifindex(ifname),\n                \"ifname\": ifname,\n                \"address\": SysUtil._link_read_address(ifname),\n                \"perm-address\": SysUtil._link_read_permaddress(ifname),\n                # When an interface is added as a port of a bonding device, its MAC\n                # address might change, we need to retrieve and preserve the original\n                # MAC address to ensure the user-provided interface name and MAC match\n                # correctly.\n                \"bond-port-perm-hwaddr\": SysUtil._link_read_bond_port_perm_hwaddr(\n                    ifname\n                ),\n            }\n        return links\n\n    @classmethod\n    def link_infos(cls, refresh=False):\n        if refresh:\n            linkinfos = None\n        else:\n            linkinfos = getattr(cls, \"_link_infos\", None)\n        if linkinfos is None:\n            try_count = 0\n            last_fetch_linkinfos = None\n            while True:\n                try_count += 1\n                try:\n                    # there is a race in that we lookup properties by ifname\n                    # and interfaces can be renamed. Try to avoid that by\n                    # fetching the info twice and repeat until we get the same\n                    # result.\n                    if last_fetch_linkinfos is None:\n                        last_fetch_linkinfos = SysUtil._link_infos_fetch()\n                    linkinfos = SysUtil._link_infos_fetch()\n                    if linkinfos != last_fetch_linkinfos:\n                        last_fetch_linkinfos = linkinfos\n                        raise Exception(\n                            \"cannot read stable link-infos. They keep changing\"\n                        )\n                except Exception:\n                    if try_count < 50:\n                        raise\n                    continue\n                break\n            cls._link_infos = linkinfos\n        return linkinfos\n\n    @classmethod\n    def link_info_find(cls, ifname):\n        result = None\n\n        for linkinfo in cls.link_infos().values():\n            if ifname == linkinfo[\"ifname\"]:\n                result = linkinfo\n                break\n\n        return result\n\n\n###############################################################################\n\n\n###############################################################################\n\n\nclass IfcfgUtil:\n\n    FILE_TYPES = [\"ifcfg\", \"keys\", \"route\", \"route6\", \"rule\", \"rule6\"]\n\n    @classmethod\n    def _file_types(cls, file_type):\n        if file_type is None:\n            return cls.FILE_TYPES\n        else:\n            return [file_type]\n\n    @classmethod\n    def ifcfg_paths(cls, name, file_types=None):\n        paths = []\n        if file_types is None:\n            file_types = cls.FILE_TYPES\n        for f in file_types:\n            paths.append(cls.ifcfg_path(name, f))\n        return paths\n\n    @classmethod\n    def ifcfg_path(cls, name, file_type=None):\n        n = str(name)\n        if not name or n == \".\" or n == \"..\" or n.find(\"/\") != -1:\n            raise MyError(\"invalid ifcfg-name %s\" % (name))\n        if file_type is None:\n            file_type = \"ifcfg\"\n        if file_type not in cls.FILE_TYPES:\n            raise MyError(\"invalid file-type %s\" % (file_type))\n        return \"/etc/sysconfig/network-scripts/\" + file_type + \"-\" + n\n\n    @classmethod\n    def KeyValid(cls, name):\n        r = getattr(cls, \"_CHECKSTR_VALID_KEY\", None)\n        if r is None:\n            r = re.compile(\"^[a-zA-Z][a-zA-Z0-9_]*$\")\n            cls._CHECKSTR_VALID_KEY = r\n        return bool(r.match(name))\n\n    @classmethod\n    def ValueEscape(cls, value):\n\n        r = getattr(cls, \"_re_ValueEscape\", None)\n        if r is None:\n            r = re.compile(\"^[a-zA-Z_0-9-.]*$\")\n            cls._re_ValueEscape = r\n\n        if r.match(value):\n            return value\n\n        if any(ord(c) < ord(\" \") for c in value):\n            # needs ansic escaping due to ANSI control characters (newline)\n            s = \"$'\"\n            for c in value:\n                if ord(c) < ord(c):\n                    s += \"\\\\\" + str(ord(c))\n                elif c == \"\\\\\" or c == \"'\":\n                    s += \"\\\\\" + c\n                else:\n                    # non-unicode chars are fine too to take literally\n                    # as utf8\n                    s += c\n            s += \"'\"\n        else:\n            # double quoting\n            s = '\"'\n            for c in value:\n                if c == '\"' or c == \"\\\\\" or c == \"$\" or c == \"`\":\n                    s += \"\\\\\" + c\n                else:\n                    # non-unicode chars are fine too to take literally\n                    # as utf8\n                    s += c\n            s += '\"'\n        return s\n\n    @classmethod\n    def _ifcfg_route_merge(cls, route, append_only, current):\n        if not append_only or current is None:\n            if not route:\n                return None\n            return \"\\n\".join(route) + \"\\n\"\n\n        if route:\n            # the 'route' file is processed line by line by initscripts'\n            # ifup-route. Hence, the order of the route matters.\n            # _ifcfg_route_merge() is not sophisticated enough to understand\n            # pre-existing lines. It will only append lines that don't exist\n            # yet, which hopefully is correct. It's better to always rewrite\n            # the entire file with route_append_only=False.\n            changed = False\n            c_lines = list(current.split(\"\\n\"))\n            for r in route:\n                if r not in c_lines:\n                    changed = True\n                    c_lines.append(r)\n            if changed:\n                return \"\\n\".join(c_lines) + \"\\n\"\n\n        return current\n\n    @classmethod\n    def ifcfg_create(\n        cls, connections, idx, warn_fcn=lambda msg: None, content_current=None\n    ):\n        connection = connections[idx]\n        ip = connection[\"ip\"]\n\n        ifcfg = {}\n        keys_file = None\n        route4_file = None\n        route6_file = None\n        rule4_file = None\n        rule6_file = None\n\n        if ip[\"dhcp4_send_hostname\"] is not None:\n            warn_fcn(\"ip.dhcp4_send_hostname is not supported by initscripts provider\")\n        if ip[\"route_metric6\"] is not None and ip[\"route_metric6\"] >= 0:\n            warn_fcn(\"ip.route_metric6 is not supported by initscripts provider\")\n\n        ifcfg[\"NM_CONTROLLED\"] = \"no\"\n\n        if connection[\"autoconnect\"]:\n            ifcfg[\"ONBOOT\"] = \"yes\"\n        else:\n            ifcfg[\"ONBOOT\"] = \"no\"\n\n        ifcfg[\"DEVICE\"] = connection[\"interface_name\"]\n        if connection[\"cloned_mac\"] != \"default\":\n            ifcfg[\"MACADDR\"] = connection[\"cloned_mac\"]\n\n        if connection[\"type\"] == \"ethernet\":\n            ifcfg[\"TYPE\"] = \"Ethernet\"\n            ifcfg[\"HWADDR\"] = connection[\"mac\"]\n        elif connection[\"type\"] == \"infiniband\":\n            ifcfg[\"TYPE\"] = \"InfiniBand\"\n            ifcfg[\"HWADDR\"] = connection[\"mac\"]\n            ifcfg[\"CONNECTED_MODE\"] = (\n                \"yes\"\n                if (connection[\"infiniband\"][\"transport_mode\"] == \"connected\")\n                else \"no\"\n            )\n            if connection[\"infiniband\"][\"p_key\"] is not None:\n                ifcfg[\"PKEY\"] = \"yes\"\n                ifcfg[\"PKEY_ID\"] = str(connection[\"infiniband\"][\"p_key\"])\n                if connection[\"parent\"]:\n                    ifcfg[\"PHYSDEV\"] = ArgUtil.connection_find_controller(\n                        connection[\"parent\"], connections, idx\n                    )\n        elif connection[\"type\"] == \"bridge\":\n            ifcfg[\"TYPE\"] = \"Bridge\"\n        elif connection[\"type\"] == \"bond\":\n            ifcfg[\"TYPE\"] = \"Bond\"\n            # wokeignore:rule=master\n            ifcfg[\"BONDING_MASTER\"] = \"yes\"\n            opts = [\"mode=%s\" % (connection[\"bond\"][\"mode\"])]\n            if connection[\"bond\"][\"miimon\"] is not None:\n                opts.append(\" miimon=%s\" % (connection[\"bond\"][\"miimon\"]))\n            ifcfg[\"BONDING_OPTS\"] = \" \".join(opts)\n        elif connection[\"type\"] == \"team\":\n            ifcfg[\"DEVICETYPE\"] = \"Team\"\n        elif connection[\"type\"] == \"vlan\":\n            ifcfg[\"VLAN\"] = \"yes\"\n            ifcfg[\"TYPE\"] = \"Vlan\"\n            ifcfg[\"PHYSDEV\"] = ArgUtil.connection_find_controller(\n                connection[\"parent\"], connections, idx\n            )\n            ifcfg[\"VID\"] = str(connection[\"vlan\"][\"id\"])\n        else:\n            raise MyError(\"unsupported type %s\" % (connection[\"type\"]))\n\n        if connection[\"mtu\"]:\n            ifcfg[\"MTU\"] = str(connection[\"mtu\"])\n\n        ethtool_options = \"\"\n        if \"ethernet\" in connection:\n            if connection[\"ethernet\"][\"autoneg\"] is not None:\n                if connection[\"ethernet\"][\"autoneg\"]:\n                    ethtool_options = \"autoneg on\"\n                else:\n                    ethtool_options = \"autoneg off speed %s duplex %s\" % (\n                        connection[\"ethernet\"][\"speed\"],\n                        connection[\"ethernet\"][\"duplex\"],\n                    )\n\n        ethtool_features = connection[\"ethtool\"][\"features\"]\n        configured_features = []\n        for feature, setting in ethtool_features.items():\n            feature = feature.replace(\"_\", \"-\")\n            value = \"\"\n            if setting:\n                value = \"on\"\n            elif setting is not None:\n                value = \"off\"\n\n            if value:\n                configured_features.append(\"%s %s\" % (feature, value))\n\n        if configured_features:\n            if ethtool_options:\n                ethtool_options += \" ; \"\n            ethtool_options += \"-K %s %s\" % (\n                connection[\"interface_name\"],\n                \" \".join(configured_features),\n            )\n\n        ethtool_coalesce = connection[\"ethtool\"][\"coalesce\"]\n        configured_coalesce = []\n        for coalesce, setting in ethtool_coalesce.items():\n            if setting is not None:\n                if isinstance(setting, bool):\n                    setting = int(setting)\n                configured_coalesce.append(\n                    \"%s %s\" % (coalesce.replace(\"_\", \"-\"), setting)\n                )\n\n        if configured_coalesce:\n            if ethtool_options:\n                ethtool_options += \" ; \"\n            ethtool_options += \"-C %s %s\" % (\n                connection[\"interface_name\"],\n                \" \".join(configured_coalesce),\n            )\n        ethtool_ring = connection[\"ethtool\"][\"ring\"]\n        configured_ring = []\n        for ring, setting in ethtool_ring.items():\n            if setting is not None:\n                configured_ring.append(\"%s %s\" % (ring.replace(\"_\", \"-\"), setting))\n\n        if configured_ring:\n            if ethtool_options:\n                ethtool_options += \" ; \"\n            ethtool_options += \"-G %s %s\" % (\n                connection[\"interface_name\"],\n                \" \".join(configured_ring),\n            )\n\n        if ethtool_options:\n            ifcfg[\"ETHTOOL_OPTS\"] = ethtool_options\n\n        if connection[\"controller\"] is not None:\n            controller = ArgUtil.connection_find_controller(\n                connection[\"controller\"], connections, idx\n            )\n            if connection[\"port_type\"] == \"bridge\":\n                ifcfg[\"BRIDGE\"] = controller\n            elif connection[\"port_type\"] == \"bond\":\n                # wokeignore:rule=master\n                ifcfg[\"MASTER\"] = controller\n                # wokeignore:rule=slave\n                ifcfg[\"SLAVE\"] = \"yes\"\n            elif connection[\"port_type\"] == \"team\":\n                # wokeignore:rule=master\n                ifcfg[\"TEAM_MASTER\"] = controller\n                if \"TYPE\" in ifcfg:\n                    del ifcfg[\"TYPE\"]\n                if connection[\"type\"] != \"team\":\n                    ifcfg[\"DEVICETYPE\"] = \"TeamPort\"\n            else:\n                raise MyError(\"invalid port_type '%s'\" % (connection[\"port_type\"]))\n\n            if ip[\"route_append_only\"] and content_current:\n                route4_file = content_current[\"route\"]\n                route6_file = content_current[\"route6\"]\n        else:\n            if connection[\"zone\"]:\n                ifcfg[\"ZONE\"] = connection[\"zone\"]\n\n            addrs4 = [\n                addr for addr in ip[\"address\"] if addr[\"family\"] == socket.AF_INET\n            ]\n            addrs6 = [\n                addr for addr in ip[\"address\"] if addr[\"family\"] == socket.AF_INET6\n            ]\n\n            if ip[\"dhcp4\"]:\n                ifcfg[\"BOOTPROTO\"] = \"dhcp\"\n            elif addrs4:\n                ifcfg[\"BOOTPROTO\"] = \"static\"\n            else:\n                ifcfg[\"BOOTPROTO\"] = \"none\"\n            for i in range(0, len(addrs4)):\n                addr = addrs4[i]\n                ifcfg[\"IPADDR\" + (\"\" if i == 0 else str(i))] = addr[\"address\"]\n                ifcfg[\"PREFIX\" + (\"\" if i == 0 else str(i))] = str(addr[\"prefix\"])\n            if ip[\"gateway4\"] is not None:\n                ifcfg[\"GATEWAY\"] = ip[\"gateway4\"]\n\n            for idx, dns in enumerate(ip[\"dns\"]):\n                ifcfg[\"DNS\" + str(idx + 1)] = dns[\"address\"]\n            if ip[\"dns_search\"]:\n                ifcfg[\"DOMAIN\"] = \" \".join(ip[\"dns_search\"])\n\n            if ip[\"auto6\"]:\n                ifcfg[\"IPV6INIT\"] = \"yes\"\n                ifcfg[\"IPV6_AUTOCONF\"] = \"yes\"\n            elif addrs6:\n                ifcfg[\"IPV6INIT\"] = \"yes\"\n                ifcfg[\"IPV6_AUTOCONF\"] = \"no\"\n            else:\n                ifcfg[\"IPV6INIT\"] = \"no\"\n            if addrs6:\n                ifcfg[\"IPV6ADDR\"] = (\n                    addrs6[0][\"address\"] + \"/\" + str(addrs6[0][\"prefix\"])\n                )\n                if len(addrs6) > 1:\n                    ifcfg[\"IPV6ADDR_SECONDARIES\"] = \" \".join(\n                        [\n                            addr[\"address\"] + \"/\" + str(addr[\"prefix\"])\n                            for addr in addrs6[1:]\n                        ]\n                    )\n            if ip[\"gateway6\"] is not None:\n                ifcfg[\"IPV6_DEFAULTGW\"] = ip[\"gateway6\"]\n\n            if ip[\"auto_gateway\"] is not None:\n                if ip[\"auto_gateway\"]:\n                    ifcfg[\"DEFROUTE\"] = \"yes\"\n                else:\n                    ifcfg[\"DEFROUTE\"] = \"no\"\n\n            if ip[\"route_metric4\"] is not None and ip[\"route_metric4\"] >= 0:\n                ifcfg[\"METRIC\"] = str(ip[\"route_metric4\"])\n\n            route4 = []\n            route6 = []\n            for r in ip[\"route\"]:\n                line = r[\"network\"] + \"/\" + str(r[\"prefix\"])\n                if r[\"gateway\"]:\n                    line += \" via \" + r[\"gateway\"]\n                if connection[\"interface_name\"]:\n                    line += \" dev \" + connection[\"interface_name\"]\n                else:\n                    warn_fcn(\n                        \"The connection {0} does not specify an interface name. \"\n                        \"Therefore, the route to {1}/{2} will be configured without \"\n                        \"the output device and the kernel will choose it \"\n                        \"automatically which might result in an unwanted device being \"\n                        \"used. To avoid this, specify `interface_name` in the \"\n                        \"connection appropriately.\".format(\n                            connection[\"name\"], r[\"network\"], r[\"prefix\"]\n                        ),\n                    )\n                if r[\"metric\"] != -1:\n                    line += \" metric \" + str(r[\"metric\"])\n\n                if r[\"family\"] == socket.AF_INET:\n                    route4.append(line)\n                else:\n                    route6.append(line)\n\n            route4_file = cls._ifcfg_route_merge(\n                route4,\n                ip[\"route_append_only\"] and content_current,\n                content_current[\"route\"] if content_current else None,\n            )\n            route6_file = cls._ifcfg_route_merge(\n                route6,\n                ip[\"route_append_only\"] and content_current,\n                content_current[\"route6\"] if content_current else None,\n            )\n\n        if ip[\"rule_append_only\"] and content_current:\n            rule4_file = content_current[\"rule\"]\n            rule6_file = content_current[\"rule6\"]\n\n        for key in list(ifcfg.keys()):\n            v = ifcfg[key]\n            if v is None:\n                del ifcfg[key]\n                continue\n            if isinstance(v, bool):\n                ifcfg[key] = \"yes\" if v else \"no\"\n\n        return {\n            \"ifcfg\": ifcfg,\n            \"keys\": keys_file,\n            \"route\": route4_file,\n            \"route6\": route6_file,\n            \"rule\": rule4_file,\n            \"rule6\": rule6_file,\n        }\n\n    @classmethod\n    def ifcfg_parse_line(cls, line):\n        r1 = getattr(cls, \"_re_parse_line1\", None)\n        if r1 is None:\n            r1 = re.compile(\"^[ \\t]*([a-zA-Z_][a-zA-Z_0-9]*)=(.*)$\")\n            cls._re_parse_line1 = r1\n            cls._shlex = shlex\n        m = r1.match(line)\n        if not m:\n            return None\n        key = m.group(1)\n        val = m.group(2)\n        val = val.rstrip()\n\n        # shlex isn't up to the task of parsing shell. Whatever,\n        # we can only parse shell to a certain degree and this is\n        # good enough for now.\n        try:\n            c = list(cls._shlex.split(val, comments=True, posix=True))\n        except Exception:\n            return None\n        if len(c) != 1:\n            return None\n        return (key, c[0])\n\n    @classmethod\n    def ifcfg_parse(cls, content):\n        if content is None:\n            return None\n        ifcfg = {}\n        for line in content.splitlines():\n            val = cls.ifcfg_parse_line(line)\n            if val:\n                ifcfg[val[0]] = val[1]\n        return ifcfg\n\n    @classmethod\n    def content_from_dict(cls, ifcfg_all, file_type=None, header=None):\n        content = {}\n        for file_type in cls._file_types(file_type):\n            h = ifcfg_all[file_type]\n            if file_type == \"ifcfg\":\n                if header is not None:\n                    s = header + \"\\n\"\n                else:\n                    s = \"\"\n                for key in sorted(h.keys()):\n                    value = h[key]\n                    if not cls.KeyValid(key):\n                        raise MyError(\"invalid ifcfg key %s\" % (key))\n                    if value is not None:\n                        s += key + \"=\" + cls.ValueEscape(value) + \"\\n\"\n                content[file_type] = s\n            else:\n                content[file_type] = h\n\n        return content\n\n    @classmethod\n    def content_to_dict(cls, content, file_type=None):\n        ifcfg_all = {}\n        for file_type in cls._file_types(file_type):\n            ifcfg_all[file_type] = cls.ifcfg_parse(content[file_type])\n        return ifcfg_all\n\n    @classmethod\n    def content_from_file(cls, name, file_type=None):\n        \"\"\"\n        Return dictionary with all file contents for an initscripts profile\n        \"\"\"\n        content = {}\n        for file_type in cls._file_types(file_type):\n            path = cls.ifcfg_path(name, file_type)\n            try:\n                with open(path, \"r\") as content_file:\n                    i_content = content_file.read()\n            except Exception:\n                i_content = None\n            content[file_type] = i_content\n        return content\n\n    @classmethod\n    def content_to_file(cls, name, content, file_type=None):\n        for file_type in cls._file_types(file_type):\n            path = cls.ifcfg_path(name, file_type)\n            h = content[file_type]\n            if h is None:\n                try:\n                    os.unlink(path)\n                except OSError as e:\n                    if e.errno != errno.ENOENT:\n                        raise\n            else:\n                with open(path, \"w\") as text_file:\n                    text_file.write(h)\n\n    @classmethod\n    def connection_seems_active(cls, name, run_env):\n        # we don't know whether a ifcfg file is currently active,\n        # and we also don't know which.\n        #\n        # Do a very basic guess based on whether the interface\n        # is in operstate \"up\".\n        #\n        # But first we need to find the interface name. Do\n        # some naive parsing and check for DEVICE setting.\n        content = cls.content_from_file(name, \"ifcfg\")\n        if content[\"ifcfg\"] is not None:\n            content = cls.ifcfg_parse(content[\"ifcfg\"])\n        else:\n            content = {}\n        if \"DEVICE\" not in content:\n            return None\n        path = \"/sys/class/net/\" + content[\"DEVICE\"] + \"/operstate\"\n        try:\n            with open(path, \"r\") as content_file:\n                i_content = str(content_file.read())\n        except Exception:\n            return None\n\n        if i_content.strip() != \"up\":\n            # For the active bonding/bridge connection, when all the port connection\n            # profiles are brought down firstly, then the operstate of the controller\n            # device will change into \"down\" automatically, which denotes missing the\n            # carrier for the controller device. However, the connection for the\n            # controller device stays active in such a situation.\n            try:\n                _unused_, out, _ignored_ = run_env.run_command(\n                    [\"ip\", \"address\", \"show\", content[\"DEVICE\"]],\n                    \"utf-8\",\n                )\n            except Exception:\n                return None\n            if \"inet\" in out:\n                if out.count(\"inet\") == 1 and \"inet6 fe80\" in out:\n                    return False\n                else:\n                    return True\n            else:\n                return False\n\n        return True\n\n\n###############################################################################\n\n\nclass NMUtil:\n    def __init__(self, nmclient=None):\n        if nmclient is None:\n            nmclient = Util.NM().Client.new(None)\n        self.nmclient = nmclient\n\n    def setting_ip_config_get_routes(self, s_ip):\n        if s_ip is not None:\n            for i in range(0, s_ip.get_num_routes()):\n                yield s_ip.get_route(i)\n\n    def connection_ensure_setting(self, connection, setting_type):\n        setting = connection.get_setting(setting_type)\n        if not setting:\n            setting = setting_type()\n            connection.add_setting(setting)\n        return setting\n\n    def device_is_controller_type(self, dev):\n        if dev:\n            NM = Util.NM()\n            GObject = Util.GObject()\n            if (\n                GObject.type_is_a(dev, NM.DeviceBond)\n                or GObject.type_is_a(dev, NM.DeviceBridge)\n                or GObject.type_is_a(dev, NM.DeviceTeam)\n            ):\n                return True\n        return False\n\n    def active_connection_list(self, connections=None, black_list=None):\n        active_cons = self.nmclient.get_active_connections()\n        if connections:\n            connections = set(connections)\n            active_cons = [\n                ac for ac in active_cons if ac.get_connection() in connections\n            ]\n        if black_list:\n            active_cons = [ac for ac in active_cons if ac not in black_list]\n        return list(active_cons)\n\n    def connection_list(\n        self,\n        name=None,\n        uuid=None,\n        black_list=None,\n        black_list_names=None,\n        black_list_uuids=None,\n    ):\n        cons = self.nmclient.get_connections()\n        if name is not None:\n            cons = [c for c in cons if c.get_id() == name]\n        if uuid is not None:\n            cons = [c for c in cons if c.get_uuid() == uuid]\n\n        if black_list:\n            cons = [c for c in cons if c not in black_list]\n        if black_list_uuids:\n            cons = [c for c in cons if c.get_uuid() not in black_list_uuids]\n        if black_list_names:\n            cons = [c for c in cons if c.get_id() not in black_list_names]\n\n        cons = list(cons)\n\n        def _cmp(a, b):\n            s_a = a.get_setting_connection()\n            s_b = b.get_setting_connection()\n            if not s_a and not s_b:\n                return 0\n            if not s_a:\n                return 1\n            if not s_b:\n                return -1\n            t_a = s_a.get_timestamp()\n            t_b = s_b.get_timestamp()\n            if t_a == t_b:\n                return 0\n            if t_a <= 0:\n                return 1\n            if t_b <= 0:\n                return -1\n            return cmp(t_a, t_b)\n\n        if Util.PY3:\n            # functools.cmp_to_key does not exist in Python 2.6\n            cons.sort(key=functools.cmp_to_key(_cmp))\n        else:\n            cons.sort(cmp=_cmp)\n        return cons\n\n    def connection_compare(\n        self, con_a, con_b, normalize_a=False, normalize_b=False, compare_flags=None\n    ):\n        NM = Util.NM()\n\n        if normalize_a:\n            con_a = NM.SimpleConnection.new_clone(con_a)\n            try:\n                con_a.normalize()\n            except Exception:\n                pass\n        if normalize_b:\n            con_b = NM.SimpleConnection.new_clone(con_b)\n            try:\n                con_b.normalize()\n            except Exception:\n                pass\n        if compare_flags is None:\n            compare_flags = NM.SettingCompareFlags.IGNORE_TIMESTAMP\n\n        return con_a.compare(con_b, compare_flags)\n\n    def connection_is_active(self, con):\n        NM = Util.NM()\n        for ac in self.active_connection_list(connections=[con]):\n            if (\n                ac.get_state() >= NM.ActiveConnectionState.ACTIVATING\n                and ac.get_state() <= NM.ActiveConnectionState.ACTIVATED\n            ):\n                return True\n        return False\n\n    def connection_create(self, connections, idx, connection_current=None):\n        NM = Util.NM()\n\n        connection = connections[idx]\n\n        con = NM.SimpleConnection.new()\n        s_con = self.connection_ensure_setting(con, NM.SettingConnection)\n\n        s_con.set_property(NM.SETTING_CONNECTION_ID, connection[\"name\"])\n        s_con.set_property(NM.SETTING_CONNECTION_UUID, connection[\"nm.uuid\"])\n        s_con.set_property(NM.SETTING_CONNECTION_AUTOCONNECT, connection[\"autoconnect\"])\n        s_con.set_property(\n            NM.SETTING_CONNECTION_AUTOCONNECT_RETRIES, connection[\"autoconnect_retries\"]\n        )\n        s_con.set_property(\n            NM.SETTING_CONNECTION_INTERFACE_NAME, connection[\"interface_name\"]\n        )\n\n        if connection[\"type\"] == \"ethernet\":\n            s_con.set_property(\n                NM.SETTING_CONNECTION_TYPE, NM.SETTING_WIRED_SETTING_NAME\n            )\n            s_wired = self.connection_ensure_setting(con, NM.SettingWired)\n            s_wired.set_property(NM.SETTING_WIRED_MAC_ADDRESS, connection[\"mac\"])\n        elif connection[\"type\"] == \"infiniband\":\n            s_con.set_property(\n                NM.SETTING_CONNECTION_TYPE, NM.SETTING_INFINIBAND_SETTING_NAME\n            )\n            s_infiniband = self.connection_ensure_setting(con, NM.SettingInfiniband)\n            s_infiniband.set_property(\n                NM.SETTING_INFINIBAND_MAC_ADDRESS, connection[\"mac\"]\n            )\n            s_infiniband.set_property(\n                NM.SETTING_INFINIBAND_TRANSPORT_MODE,\n                connection[\"infiniband\"][\"transport_mode\"],\n            )\n            if connection[\"infiniband\"][\"p_key\"] is not None:\n                s_infiniband.set_property(\n                    NM.SETTING_INFINIBAND_P_KEY, connection[\"infiniband\"][\"p_key\"]\n                )\n                if connection[\"parent\"]:\n                    s_infiniband.set_property(\n                        NM.SETTING_INFINIBAND_PARENT,\n                        ArgUtil.connection_find_controller(\n                            connection[\"parent\"], connections, idx\n                        ),\n                    )\n        elif connection[\"type\"] == \"bridge\":\n            s_con.set_property(\n                NM.SETTING_CONNECTION_TYPE, NM.SETTING_BRIDGE_SETTING_NAME\n            )\n            s_bridge = self.connection_ensure_setting(con, NM.SettingBridge)\n            s_bridge.set_property(NM.SETTING_BRIDGE_STP, False)\n        elif connection[\"type\"] == \"bond\":\n            s_con.set_property(NM.SETTING_CONNECTION_TYPE, NM.SETTING_BOND_SETTING_NAME)\n            s_bond = self.connection_ensure_setting(con, NM.SettingBond)\n            s_bond.add_option(\"mode\", connection[\"bond\"][\"mode\"])\n            for option, value in connection[\"bond\"].items():\n                if value is None:\n                    continue\n                if option in [\"all_ports_active\", \"use_carrier\", \"tlb_dynamic_lb\"]:\n                    value = int(value)\n                if option in [\"all_ports_active\", \"packets_per_port\"]:\n                    # wokeignore:rule=slave\n                    option = option.replace(\"port\", \"slave\")\n                s_bond.add_option(option, str(value))\n        elif connection[\"type\"] == \"team\":\n            s_con.set_property(NM.SETTING_CONNECTION_TYPE, NM.SETTING_TEAM_SETTING_NAME)\n        # wokeignore:rule=dummy\n        elif connection[\"type\"] == \"dummy\":\n            s_con.set_property(\n                # wokeignore:rule=dummy\n                NM.SETTING_CONNECTION_TYPE,\n                NM.SETTING_DUMMY_SETTING_NAME,\n            )\n        elif connection[\"type\"] == \"vlan\":\n            s_con.set_property(NM.SETTING_CONNECTION_TYPE, NM.SETTING_VLAN_SETTING_NAME)\n            s_vlan = self.connection_ensure_setting(con, NM.SettingVlan)\n            s_vlan.set_property(NM.SETTING_VLAN_ID, connection[\"vlan\"][\"id\"])\n            s_vlan.set_property(\n                NM.SETTING_VLAN_PARENT,\n                ArgUtil.connection_find_controller_uuid(\n                    connection[\"parent\"], connections, idx\n                ),\n            )\n        elif connection[\"type\"] == \"macvlan\":\n            s_con.set_property(\n                NM.SETTING_CONNECTION_TYPE, NM.SETTING_MACVLAN_SETTING_NAME\n            )\n            # convert mode name to a number (which is actually expected by nm)\n            mode = connection[\"macvlan\"][\"mode\"]\n            try:\n                mode_id = int(getattr(NM.SettingMacvlanMode, mode.upper()))\n            except AttributeError:\n                raise MyError(\"Macvlan mode '%s' is not recognized\" % (mode))\n            s_macvlan = self.connection_ensure_setting(con, NM.SettingMacvlan)\n            s_macvlan.set_property(NM.SETTING_MACVLAN_MODE, mode_id)\n            s_macvlan.set_property(\n                NM.SETTING_MACVLAN_PROMISCUOUS, connection[\"macvlan\"][\"promiscuous\"]\n            )\n            s_macvlan.set_property(NM.SETTING_MACVLAN_TAP, connection[\"macvlan\"][\"tap\"])\n            s_macvlan.set_property(\n                NM.SETTING_MACVLAN_PARENT,\n                ArgUtil.connection_find_controller(\n                    connection[\"parent\"], connections, idx\n                ),\n            )\n        elif connection[\"type\"] == \"wireless\":\n            s_con.set_property(\n                NM.SETTING_CONNECTION_TYPE, NM.SETTING_WIRELESS_SETTING_NAME\n            )\n            s_wireless = self.connection_ensure_setting(con, NM.SettingWireless)\n            s_wireless.set_property(\n                NM.SETTING_WIRELESS_SSID,\n                Util.GLib().Bytes.new(connection[\"wireless\"][\"ssid\"].encode(\"utf-8\")),\n            )\n\n            s_wireless_sec = self.connection_ensure_setting(\n                con, NM.SettingWirelessSecurity\n            )\n            s_wireless_sec.set_property(\n                NM.SETTING_WIRELESS_SECURITY_KEY_MGMT,\n                connection[\"wireless\"][\"key_mgmt\"],\n            )\n\n            if (\n                connection[\"wireless\"][\"key_mgmt\"] == \"wpa-psk\"\n                or connection[\"wireless\"][\"key_mgmt\"] == \"sae\"\n            ):\n                s_wireless_sec.set_property(\n                    NM.SETTING_WIRELESS_SECURITY_PSK, connection[\"wireless\"][\"password\"]\n                )\n        else:\n            raise MyError(\"unsupported type %s\" % (connection[\"type\"]))\n\n        if connection[\"cloned_mac\"] != \"default\":\n            if connection[\"type\"] == \"wireless\":\n                s_wireless = self.connection_ensure_setting(con, NM.SettingWireless)\n                s_wireless.set_property(\n                    NM.SETTING_WIRELESS_CLONED_MAC_ADDRESS, connection[\"cloned_mac\"]\n                )\n            else:\n                s_wired = self.connection_ensure_setting(con, NM.SettingWired)\n                s_wired.set_property(\n                    NM.SETTING_WIRED_CLONED_MAC_ADDRESS, connection[\"cloned_mac\"]\n                )\n\n        if \"ethernet\" in connection:\n            if connection[\"ethernet\"][\"autoneg\"] is not None:\n                s_wired = self.connection_ensure_setting(con, NM.SettingWired)\n                s_wired.set_property(\n                    NM.SETTING_WIRED_AUTO_NEGOTIATE, connection[\"ethernet\"][\"autoneg\"]\n                )\n                s_wired.set_property(\n                    NM.SETTING_WIRED_DUPLEX, connection[\"ethernet\"][\"duplex\"]\n                )\n                s_wired.set_property(\n                    NM.SETTING_WIRED_SPEED, connection[\"ethernet\"][\"speed\"]\n                )\n\n        if hasattr(NM, \"SettingEthtool\"):\n            s_ethtool = self.connection_ensure_setting(con, NM.SettingEthtool)\n\n            for feature, setting in connection[\"ethtool\"][\"features\"].items():\n                nm_feature = nm_provider.get_nm_ethtool_feature(feature)\n\n                if setting is None:\n                    if not nm_feature:\n                        continue\n                    val = NM.Ternary.DEFAULT\n                elif setting:\n                    val = NM.Ternary.TRUE\n                else:\n                    val = NM.Ternary.FALSE\n                if not hasattr(s_ethtool, \"option_set\"):\n                    s_ethtool.set_feature(nm_feature, val)\n                elif val == NM.Ternary.DEFAULT:\n                    s_ethtool.option_set(nm_feature, None)\n                else:\n                    s_ethtool.option_set_boolean(nm_feature, val)\n\n            for coalesce, setting in connection[\"ethtool\"][\"coalesce\"].items():\n                nm_coalesce = nm_provider.get_nm_ethtool_coalesce(coalesce)\n\n                if nm_coalesce:\n                    if setting is None:\n                        s_ethtool.option_set(nm_coalesce, None)\n                    else:\n                        s_ethtool.option_set_uint32(nm_coalesce, int(setting))\n            for ring, setting in connection[\"ethtool\"][\"ring\"].items():\n                nm_ring = nm_provider.get_nm_ethtool_ring(ring)\n\n                if nm_ring:\n                    if setting is None:\n                        s_ethtool.option_set(nm_ring, None)\n                    else:\n                        s_ethtool.option_set_uint32(nm_ring, setting)\n\n            # * When users did not specify any ethtool configuration, this module\n            #   will generate an default `NM.SettingEthtool` object and pass it to\n            #   NetworkManager. But NetworkManager cannot serialize this when using the\n            #   ifcfg plugin but treats this as no `NM.SettingEthtool` object.\n            # * The following `NM.SimpleConnection.compare()` will therefore identify a\n            #   difference in the configuration.\n            # * To workaround this, remove the default NM.SettingEthtool object.\n            if s_ethtool.compare(NM.SettingEthtool.new(), NM.SettingCompareFlags.EXACT):\n                con.remove_setting(NM.SettingEthtool)\n\n        if connection[\"mtu\"]:\n            if connection[\"type\"] == \"infiniband\":\n                s_infiniband = self.connection_ensure_setting(con, NM.SettingInfiniband)\n                s_infiniband.set_property(NM.SETTING_INFINIBAND_MTU, connection[\"mtu\"])\n            else:\n                s_wired = self.connection_ensure_setting(con, NM.SettingWired)\n                s_wired.set_property(NM.SETTING_WIRED_MTU, connection[\"mtu\"])\n\n        if connection[\"controller\"] is not None:\n            s_con.set_property(\n                # wokeignore:rule=slave\n                NM.SETTING_CONNECTION_SLAVE_TYPE,\n                connection[\"port_type\"],\n            )\n            s_con.set_property(\n                # wokeignore:rule=master\n                NM.SETTING_CONNECTION_MASTER,\n                ArgUtil.connection_find_controller_uuid(\n                    connection[\"controller\"], connections, idx\n                ),\n            )\n        else:\n            if connection[\"zone\"]:\n                s_con.set_property(NM.SETTING_CONNECTION_ZONE, connection[\"zone\"])\n\n            ip = connection[\"ip\"]\n\n            s_ip4 = self.connection_ensure_setting(con, NM.SettingIP4Config)\n            s_ip6 = self.connection_ensure_setting(con, NM.SettingIP6Config)\n\n            s_ip4.set_property(NM.SETTING_IP_CONFIG_METHOD, \"auto\")\n            s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, \"auto\")\n\n            addrs4 = [a for a in ip[\"address\"] if a[\"family\"] == socket.AF_INET]\n            addrs6 = [a for a in ip[\"address\"] if a[\"family\"] == socket.AF_INET6]\n\n            is_ipv4_configured = False\n            if ip[\"dhcp4\"]:\n                s_ip4.set_property(NM.SETTING_IP_CONFIG_METHOD, \"auto\")\n                s_ip4.set_property(\n                    NM.SETTING_IP_CONFIG_DHCP_SEND_HOSTNAME,\n                    ip[\"dhcp4_send_hostname\"] is not False,\n                )\n                is_ipv4_configured = True\n            elif addrs4:\n                s_ip4.set_property(NM.SETTING_IP_CONFIG_METHOD, \"manual\")\n                is_ipv4_configured = True\n            else:\n                s_ip4.set_property(NM.SETTING_IP_CONFIG_METHOD, \"disabled\")\n            for a in addrs4:\n                s_ip4.add_address(\n                    NM.IPAddress.new(a[\"family\"], a[\"address\"], a[\"prefix\"])\n                )\n            if ip[\"gateway4\"] is not None:\n                s_ip4.set_property(NM.SETTING_IP_CONFIG_GATEWAY, ip[\"gateway4\"])\n            if ip[\"route_metric4\"] is not None and ip[\"route_metric4\"] >= 0:\n                s_ip4.set_property(\n                    NM.SETTING_IP_CONFIG_ROUTE_METRIC, ip[\"route_metric4\"]\n                )\n            for nameserver in ip[\"dns\"]:\n                if nameserver[\"family\"] == socket.AF_INET:\n                    s_ip4.add_dns(nameserver[\"address\"])\n            # NetworkManager only allows to configure `ipv4.dns-search` setting when\n            # IPv4 is enabled\n            if is_ipv4_configured:\n                for search_domain in ip[\"dns_search\"]:\n                    s_ip4.add_dns_search(search_domain)\n            # NetworkManager ifcfg plguin will discard empty dns option which\n            # cause follow up NM.Connection.compare() raise false alarm\n            # Use False here to ask NetworkManager remove dns option completely instead\n            # of keeping an empty list\n            s_ip4.clear_dns_options(False)\n            for option in ip[\"dns_options\"]:\n                s_ip4.add_dns_option(option)\n            if ip[\"dns_priority\"] is not None:\n                s_ip4.set_property(\n                    NM.SETTING_IP_CONFIG_DNS_PRIORITY, ip[\"dns_priority\"]\n                )\n\n            is_ipv6_configured = False\n            if ip[\"ipv6_disabled\"]:\n                s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, \"disabled\")\n            elif ip[\"auto6\"]:\n                s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, \"auto\")\n                is_ipv6_configured = True\n            elif addrs6:\n                s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, \"manual\")\n                is_ipv6_configured = True\n            else:\n                # we should not set \"ipv6.method=ignore\". \"ignore\" is a legacy mode\n                # and not really useful. Instead, we should set \"link-local\" here.\n                #\n                # But that fix is a change in behavior for the role, so it needs special\n                # care.\n                s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, \"ignore\")\n\n            for a in addrs6:\n                s_ip6.add_address(\n                    NM.IPAddress.new(a[\"family\"], a[\"address\"], a[\"prefix\"])\n                )\n            if ip[\"gateway6\"] is not None:\n                s_ip6.set_property(NM.SETTING_IP_CONFIG_GATEWAY, ip[\"gateway6\"])\n\n            # Mapping of wait_ip values to the may-fail settings for IPv4 and IPv6\n            may_fail_mapping = {\n                \"any\": (True, True),\n                \"ipv4\": (False, True),\n                \"ipv6\": (True, False),\n                \"ipv4+ipv6\": (False, False),\n            }\n\n            may_fail_ipv4, may_fail_ipv6 = may_fail_mapping.get(\n                ip[\"wait_ip\"], (True, True)\n            )\n\n            s_ip4.set_property(NM.SETTING_IP_CONFIG_MAY_FAIL, may_fail_ipv4)\n            s_ip6.set_property(NM.SETTING_IP_CONFIG_MAY_FAIL, may_fail_ipv6)\n\n            if ip[\"route_metric6\"] is not None and ip[\"route_metric6\"] >= 0:\n                s_ip6.set_property(\n                    NM.SETTING_IP_CONFIG_ROUTE_METRIC, ip[\"route_metric6\"]\n                )\n\n            if ip[\"auto_gateway\"] is not None:\n                if ip[\"auto_gateway\"]:\n                    s_ip6.set_property(NM.SETTING_IP_CONFIG_NEVER_DEFAULT, False)\n                    s_ip4.set_property(NM.SETTING_IP_CONFIG_NEVER_DEFAULT, False)\n                else:\n                    s_ip6.set_property(NM.SETTING_IP_CONFIG_NEVER_DEFAULT, True)\n                    s_ip4.set_property(NM.SETTING_IP_CONFIG_NEVER_DEFAULT, True)\n\n            s_ip4.set_property(\n                NM.SETTING_IP_CONFIG_IGNORE_AUTO_DNS, bool(ip[\"ipv4_ignore_auto_dns\"])\n            )\n            s_ip6.set_property(\n                NM.SETTING_IP_CONFIG_IGNORE_AUTO_DNS, bool(ip[\"ipv6_ignore_auto_dns\"])\n            )\n\n            for nameserver in ip[\"dns\"]:\n                if nameserver[\"family\"] == socket.AF_INET6:\n                    s_ip6.add_dns(nameserver[\"address\"])\n            # NetworkManager only allows to configure `ipv6.dns-search` setting when\n            # IPv6 is enabled\n            if is_ipv6_configured:\n                for search_domain in ip[\"dns_search\"]:\n                    s_ip6.add_dns_search(search_domain)\n            # NetworkManager ifcfg plguin will discard empty dns option which\n            # cause follow up NM.Connection.compare() raise false alarm\n            # Use False here to ask NetworkManager remove dns option completely instead\n            # of keeping an empty list\n            s_ip6.clear_dns_options(False)\n            for option in ip[\"dns_options\"]:\n                s_ip6.add_dns_option(option)\n            if ip[\"dns_priority\"] is not None:\n                s_ip6.set_property(\n                    NM.SETTING_IP_CONFIG_DNS_PRIORITY, ip[\"dns_priority\"]\n                )\n\n            if ip[\"route_append_only\"] and connection_current:\n                for r in self.setting_ip_config_get_routes(\n                    connection_current.get_setting(NM.SettingIP4Config)\n                ):\n                    s_ip4.add_route(r)\n                for r in self.setting_ip_config_get_routes(\n                    connection_current.get_setting(NM.SettingIP6Config)\n                ):\n                    s_ip6.add_route(r)\n            for r in ip[\"route\"]:\n                new_route = NM.IPRoute.new(\n                    r[\"family\"], r[\"network\"], r[\"prefix\"], r[\"gateway\"], r[\"metric\"]\n                )\n                if r[\"type\"]:\n                    NM.IPRoute.set_attribute(\n                        new_route, \"type\", Util.GLib().Variant(\"s\", r[\"type\"])\n                    )\n                if r[\"table\"]:\n                    NM.IPRoute.set_attribute(\n                        new_route, \"table\", Util.GLib().Variant.new_uint32(r[\"table\"])\n                    )\n                if r[\"src\"]:\n                    NM.IPRoute.set_attribute(\n                        new_route, \"src\", Util.GLib().Variant.new_string(r[\"src\"])\n                    )\n\n                if r[\"family\"] == socket.AF_INET:\n                    s_ip4.add_route(new_route)\n                else:\n                    s_ip6.add_route(new_route)\n            for routing_rule in ip[\"routing_rule\"]:\n                nm_routing_rule = NM.IPRoutingRule.new(routing_rule[\"family\"])\n                NM.IPRoutingRule.set_priority(nm_routing_rule, routing_rule[\"priority\"])\n\n                # check the link below for the enum value of supported action\n                # https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/fib_rules.h?id=f443e374ae131c168a065ea1748feac6b2e76613#n88\n                action_ids = {\n                    \"to-table\": 1,\n                    \"blackhole\": 6,\n                    \"prohibit\": 7,\n                    \"unreachable\": 8,\n                }\n                NM.IPRoutingRule.set_action(\n                    nm_routing_rule, action_ids[routing_rule[\"action\"]]\n                )\n                if routing_rule[\"dport\"]:\n                    NM.IPRoutingRule.set_destination_port(\n                        nm_routing_rule,\n                        routing_rule[\"dport\"][0],\n                        routing_rule[\"dport\"][1],\n                    )\n                # In NM, when user specifies `from 0.0.0.0/0`` or `from ::/0` in a\n                # routing rule, NM treats it as if the `from` setting is not specified.\n                if routing_rule[\"from\"] and routing_rule[\"from\"][\"prefix\"]:\n                    NM.IPRoutingRule.set_from(\n                        nm_routing_rule,\n                        routing_rule[\"from\"][\"address\"],\n                        routing_rule[\"from\"][\"prefix\"],\n                    )\n                if routing_rule[\"fwmark\"]:\n                    NM.IPRoutingRule.set_fwmark(\n                        nm_routing_rule, routing_rule[\"fwmark\"], routing_rule[\"fwmask\"]\n                    )\n                if routing_rule[\"iif\"]:\n                    NM.IPRoutingRule.set_iifname(nm_routing_rule, routing_rule[\"iif\"])\n                NM.IPRoutingRule.set_invert(nm_routing_rule, routing_rule[\"invert\"])\n                if routing_rule[\"ipproto\"]:\n                    NM.IPRoutingRule.set_ipproto(\n                        nm_routing_rule, routing_rule[\"ipproto\"]\n                    )\n                if routing_rule[\"oif\"]:\n                    NM.IPRoutingRule.set_oifname(nm_routing_rule, routing_rule[\"oif\"])\n                if routing_rule[\"sport\"]:\n                    NM.IPRoutingRule.set_source_port(\n                        nm_routing_rule,\n                        routing_rule[\"sport\"][0],\n                        routing_rule[\"sport\"][1],\n                    )\n                if routing_rule[\"suppress_prefixlength\"] is not None:\n                    NM.IPRoutingRule.set_suppress_prefixlength(\n                        nm_routing_rule, routing_rule[\"suppress_prefixlength\"]\n                    )\n                if routing_rule[\"table\"]:\n                    NM.IPRoutingRule.set_table(nm_routing_rule, routing_rule[\"table\"])\n                # In NM, when user specifies `to 0.0.0.0/0`` or `to ::/0` in a\n                # routing rule, NM treats it as if the `to` setting is not specified.\n                if routing_rule[\"to\"] and routing_rule[\"to\"][\"prefix\"]:\n                    NM.IPRoutingRule.set_to(\n                        nm_routing_rule,\n                        routing_rule[\"to\"][\"address\"],\n                        routing_rule[\"to\"][\"prefix\"],\n                    )\n                if routing_rule[\"tos\"]:\n                    NM.IPRoutingRule.set_tos(nm_routing_rule, routing_rule[\"tos\"])\n                if routing_rule[\"uid\"]:\n                    NM.IPRoutingRule.set_uid_range(\n                        nm_routing_rule,\n                        routing_rule[\"uid\"][0],\n                        routing_rule[\"uid\"][1],\n                    )\n                if routing_rule[\"family\"] == socket.AF_INET:\n                    s_ip4.add_routing_rule(nm_routing_rule)\n                else:\n                    s_ip6.add_routing_rule(nm_routing_rule)\n\n        if connection[\"ieee802_1x\"]:\n            s_8021x = self.connection_ensure_setting(con, NM.Setting8021x)\n\n            s_8021x.set_property(\n                NM.SETTING_802_1X_EAP, [connection[\"ieee802_1x\"][\"eap\"]]\n            )\n            s_8021x.set_property(\n                NM.SETTING_802_1X_IDENTITY, connection[\"ieee802_1x\"][\"identity\"]\n            )\n\n            s_8021x.set_property(\n                NM.SETTING_802_1X_PRIVATE_KEY,\n                Util.path_to_glib_bytes(connection[\"ieee802_1x\"][\"private_key\"]),\n            )\n\n            if connection[\"ieee802_1x\"][\"private_key_password\"]:\n                s_8021x.set_property(\n                    NM.SETTING_802_1X_PRIVATE_KEY_PASSWORD,\n                    connection[\"ieee802_1x\"][\"private_key_password\"],\n                )\n\n            if connection[\"ieee802_1x\"][\"private_key_password_flags\"]:\n                s_8021x.set_secret_flags(\n                    NM.SETTING_802_1X_PRIVATE_KEY_PASSWORD,\n                    Util.NM().SettingSecretFlags(\n                        Util.convert_passwd_flags_nm(\n                            connection[\"ieee802_1x\"][\"private_key_password_flags\"]\n                        ),\n                    ),\n                )\n\n            s_8021x.set_property(\n                NM.SETTING_802_1X_CLIENT_CERT,\n                Util.path_to_glib_bytes(connection[\"ieee802_1x\"][\"client_cert\"]),\n            )\n\n            if connection[\"ieee802_1x\"][\"ca_cert\"]:\n                s_8021x.set_property(\n                    NM.SETTING_802_1X_CA_CERT,\n                    Util.path_to_glib_bytes(connection[\"ieee802_1x\"][\"ca_cert\"]),\n                )\n\n            if connection[\"ieee802_1x\"][\"ca_path\"]:\n                s_8021x.set_property(\n                    NM.SETTING_802_1X_CA_PATH,\n                    connection[\"ieee802_1x\"][\"ca_path\"],\n                )\n\n            s_8021x.set_property(\n                NM.SETTING_802_1X_SYSTEM_CA_CERTS,\n                connection[\"ieee802_1x\"][\"system_ca_certs\"],\n            )\n\n            if connection[\"ieee802_1x\"][\"domain_suffix_match\"]:\n                s_8021x.set_property(\n                    NM.SETTING_802_1X_DOMAIN_SUFFIX_MATCH,\n                    connection[\"ieee802_1x\"][\"domain_suffix_match\"],\n                )\n        if connection[\"match\"]:\n            s_match = self.connection_ensure_setting(con, NM.SettingMatch)\n            s_match.set_property(NM.SETTING_MATCH_PATH, connection[\"match\"][\"path\"])\n        try:\n            con.normalize()\n        except Exception as e:\n            raise MyError(\"created connection failed to normalize: %s\" % (e))\n        return con\n\n    def connection_add(self, con, timeout=10):\n        def add_cb(client, result, cb_args):\n            con = None\n            try:\n                con = client.add_connection_finish(result)\n            except Exception as e:\n                if Util.error_is_cancelled(e):\n                    return\n                cb_args[\"error\"] = str(e)\n            cb_args[\"con\"] = con\n            Util.GMainLoop().quit()\n\n        cancellable = Util.create_cancellable()\n        cb_args = {}\n        self.nmclient.add_connection_async(con, True, cancellable, add_cb, cb_args)\n        if not Util.GMainLoop_run(timeout):\n            cancellable.cancel()\n            raise MyError(\"failure to add connection: %s\" % (\"timeout\"))\n        if not cb_args.get(\"con\", None):\n            raise MyError(\n                \"failure to add connection: %s\"\n                % (cb_args.get(\"error\", \"unknown error\"))\n            )\n        return cb_args[\"con\"]\n\n    def connection_update(self, con, con_new, timeout=10):\n        con.replace_settings_from_connection(con_new)\n\n        def update_cb(connection, result, cb_args):\n            success = False\n            try:\n                success = connection.commit_changes_finish(result)\n            except Exception as e:\n                if Util.error_is_cancelled(e):\n                    return\n                cb_args[\"error\"] = str(e)\n            cb_args[\"success\"] = success\n            Util.GMainLoop().quit()\n\n        cancellable = Util.create_cancellable()\n        cb_args = {}\n        con.commit_changes_async(True, cancellable, update_cb, cb_args)\n        if not Util.GMainLoop_run(timeout):\n            cancellable.cancel()\n            raise MyError(\"failure to update connection: %s\" % (\"timeout\"))\n        if not cb_args.get(\"success\", False):\n            raise MyError(\n                \"failure to update connection: %s\"\n                % (cb_args.get(\"error\", \"unknown error\"))\n            )\n        return True\n\n    def create_checkpoint(self, timeout):\n        \"\"\"Create a new checkpoint\"\"\"\n        checkpoint = Util.call_async_method(\n            self.nmclient,\n            \"checkpoint_create\",\n            [\n                [],  # devices, empty list is all devices\n                timeout,\n                Util.NM().CheckpointCreateFlags.DELETE_NEW_CONNECTIONS\n                | Util.NM().CheckpointCreateFlags.DISCONNECT_NEW_DEVICES,\n            ],\n        )\n\n        if checkpoint:\n            return checkpoint.get_path()\n        return None\n\n    def destroy_checkpoint(self, path):\n        \"\"\"Destroy the specified checkpoint\"\"\"\n        Util.call_async_method(self.nmclient, \"checkpoint_destroy\", [path])\n\n    def rollback_checkpoint(self, path):\n        \"\"\"Rollback the specified checkpoint\"\"\"\n        Util.call_async_method(\n            self.nmclient,\n            \"checkpoint_rollback\",\n            [path],\n            mainloop_timeout=DEFAULT_ACTIVATION_TIMEOUT,\n        )\n\n    def connection_activate(self, connection, timeout=15, wait_time=None):\n        already_retried = False\n\n        while True:\n\n            def activate_cb(client, result, cb_args):\n                active_connection = None\n                try:\n                    active_connection = client.activate_connection_finish(result)\n                except Exception as e:\n                    if Util.error_is_cancelled(e):\n                        return\n                    cb_args[\"error\"] = str(e)\n                cb_args[\"active_connection\"] = active_connection\n                Util.GMainLoop().quit()\n\n            cancellable = Util.create_cancellable()\n            cb_args = {}\n            self.nmclient.activate_connection_async(\n                connection, None, None, cancellable, activate_cb, cb_args\n            )\n            if not Util.GMainLoop_run(timeout):\n                cancellable.cancel()\n                raise MyError(\"failure to activate connection: %s\" % (\"timeout\"))\n\n            if cb_args.get(\"active_connection\", None):\n                ac = cb_args[\"active_connection\"]\n                self.connection_activate_wait(ac, wait_time)\n                return ac\n\n            # there is a bug in NetworkManager, that the connection\n            # might already be in the process of activating. In that\n            # case, NM would reject the activation request with\n            # \"Connection '$PROFILE' is not available on the device $DEV\n            # at this time.\"\n            #\n            # Try to work around it by waiting a bit and retrying.\n            if already_retried:\n                raise MyError(\n                    \"failure to activate connection: %s\"\n                    % (cb_args.get(\"error\", \"unknown error\"))\n                )\n\n            already_retried = True\n\n            time.sleep(1)\n\n    def connection_activate_wait(self, ac, wait_time):\n\n        if not wait_time:\n            return\n\n        NM = Util.NM()\n\n        state = ac.get_state()\n        if state == NM.ActiveConnectionState.ACTIVATED:\n            return\n        if state != NM.ActiveConnectionState.ACTIVATING:\n            raise MyError(\"activation is in unexpected state '%s'\" % (state))\n\n        def check_activated(ac, dev):\n            ac_state = ac.get_state()\n\n            # the state reason was for active-connection was introduced\n            # in NM 1.8 API. Work around for older library version.\n            try:\n                ac_reason = ac.get_state_reason()\n            except AttributeError:\n                ac_reason = None\n\n            if dev:\n                dev_state = dev.get_state()\n\n            if ac_state == NM.ActiveConnectionState.ACTIVATING:\n                if (\n                    self.device_is_controller_type(dev)\n                    and dev_state >= NM.DeviceState.IP_CONFIG\n                    and dev_state <= NM.DeviceState.ACTIVATED\n                ):\n                    # controller connections qualify as activated once they\n                    # reach IP-Config state. That is because they may\n                    # wait for port devices to attach\n                    return True, None\n                # fall through\n            elif ac_state == NM.ActiveConnectionState.ACTIVATED:\n                return True, None\n            elif ac_state == NM.ActiveConnectionState.DEACTIVATED:\n                if (\n                    not dev\n                    or (\n                        ac_reason is not None\n                        and ac_reason\n                        != NM.ActiveConnectionStateReason.DEVICE_DISCONNECTED\n                    )\n                    or dev.get_active_connection() is not ac\n                ):\n                    return (\n                        True,\n                        (\n                            (ac_reason.value_nick if ac_reason else None)\n                            or \"unknown reason\"\n                        ),\n                    )\n                # the state of the active connection is not very helpful.\n                # see if the device-state is better.\n                if (\n                    dev_state <= NM.DeviceState.DISCONNECTED\n                    or dev_state > NM.DeviceState.DEACTIVATING\n                ):\n                    return (\n                        True,\n                        (\n                            dev.get_state_reason().value_nick\n                            or (ac_reason.value_nick if ac_reason else None)\n                            or \"unknown reason\"\n                        ),\n                    )\n                # fall through, wait longer for a better state reason.\n\n            # wait longer.\n            return False, None\n\n        dev = Util.first(ac.get_devices())\n\n        complete, failure_reason = check_activated(ac, dev)\n\n        if not complete:\n\n            cb_out = []\n\n            def check_activated_cb():\n                complete, failure_reason = check_activated(ac, dev)\n                if complete:\n                    cb_out.append(failure_reason)\n                    Util.GMainLoop().quit()\n\n            try:\n                # 'state-changed' signal is 1.8 API. Workaround for\n                # older libnm API version\n                ac_id = ac.connect(\n                    \"state-changed\", lambda source, state, reason: check_activated_cb()\n                )\n            except Exception:\n                ac_id = None\n            if dev:\n                dev_id = dev.connect(\n                    \"notify::state\", lambda source, pspec: check_activated_cb()\n                )\n\n            try:\n                if not Util.GMainLoop_run(wait_time):\n                    raise MyError(\"connection not fully activated after timeout\")\n            finally:\n                if dev:\n                    dev.handler_disconnect(dev_id)\n                if ac_id is not None:\n                    ac.handler_disconnect(ac_id)\n\n            failure_reason = cb_out[0]\n\n        if failure_reason:\n            raise MyError(\"connection not activated: %s\" % (failure_reason))\n\n    def reapply(self, device, connection=None):\n        version_id = 0\n        flags = 0\n        return Util.call_async_method(\n            device, \"reapply\", [connection, version_id, flags]\n        )\n\n\n###############################################################################\n\n\nclass RunEnvironment(object):\n    def __init__(self):\n        self._check_mode = None\n\n    @property\n    def ifcfg_header(self):\n        return None\n\n    def log(\n        self,\n        connections,\n        idx,\n        severity,\n        msg,\n        is_changed=False,\n        ignore_errors=False,\n        warn_traceback=False,\n        force_fail=False,\n    ):\n        raise NotImplementedError()\n\n    def run_command(self, argv, encoding=None):\n        raise NotImplementedError()\n\n    def _check_mode_changed(self, old_check_mode, new_check_mode, connections):\n        raise NotImplementedError()\n\n    def check_mode_set(self, check_mode, connections=None):\n        c = self._check_mode\n        self._check_mode = check_mode\n        if not (\n            (c is None and check_mode in [CheckMode.PREPARE])\n            or (\n                c == CheckMode.PREPARE\n                and check_mode in [CheckMode.PRE_RUN, CheckMode.DRY_RUN]\n            )\n            or (c == CheckMode.PRE_RUN and check_mode in [CheckMode.REAL_RUN])\n            or (c == CheckMode.REAL_RUN and check_mode in [CheckMode.DONE])\n            or (c == CheckMode.DRY_RUN and check_mode in [CheckMode.DONE])\n        ):\n            raise AssertionError(\n                \"updating check_mode value from {0} into {1} is incorrect\".format(\n                    c, check_mode\n                )\n            )\n        self._check_mode_changed(c, check_mode, connections)\n\n\nclass RunEnvironmentAnsible(RunEnvironment):\n\n    ARGS = {\n        \"ignore_errors\": {\"required\": False, \"default\": False, \"type\": \"bool\"},\n        \"force_state_change\": {\"required\": False, \"default\": False, \"type\": \"bool\"},\n        \"provider\": {\"required\": True, \"type\": \"str\"},\n        \"connections\": {\n            \"required\": False,\n            \"default\": [],\n            \"type\": \"list\",\n            \"elements\": \"dict\",\n        },\n        \"__header\": {\"required\": True, \"type\": \"str\"},\n        \"__debug_flags\": {\"required\": False, \"default\": \"\", \"type\": \"str\"},\n    }\n\n    def __init__(self):\n        RunEnvironment.__init__(self)\n        self._run_results = []\n        self._log_idx = 0\n        self.on_failure = None\n        module = AnsibleModule(argument_spec=self.ARGS, supports_check_mode=True)\n        self.module = module\n\n    @property\n    def ifcfg_header(self):\n        return self.module.params[\"__header\"]\n\n    def run_command(self, argv, encoding=None):\n        return self.module.run_command(argv, encoding=encoding)\n\n    def _run_results_push(self, n_connections):\n        c = []\n        for cc in range(0, n_connections + 1):\n            c.append({\"log\": []})\n        self._run_results.append(c)\n\n    @property\n    def run_results(self):\n        return self._run_results[-1]\n\n    def _check_mode_changed(self, old_check_mode, new_check_mode, connections):\n        if old_check_mode is None:\n            self._run_results_push(len(connections))\n        elif old_check_mode == CheckMode.PREPARE:\n            self._run_results_push(len(self.run_results) - 1)\n        elif old_check_mode == CheckMode.PRE_RUN:\n            # when switching from RRE_RUN to REAL_RUN, we drop the run-results\n            # we just collected and reset to empty. The PRE_RUN succeeded.\n            n_connections = len(self.run_results) - 1\n            del self._run_results[-1]\n            self._run_results_push(n_connections)\n\n    def log(\n        self,\n        connections,\n        idx,\n        severity,\n        msg,\n        is_changed=False,\n        ignore_errors=False,\n        warn_traceback=False,\n        force_fail=False,\n    ):\n        if not idx >= -1:\n            raise AssertionError(\"idx {0} is less than -1\".format(idx))\n        self._log_idx += 1\n        self.run_results[idx][\"log\"].append((severity, msg, self._log_idx))\n        if severity == LogLevel.ERROR:\n            if force_fail or not ignore_errors:\n                self.fail_json(\n                    connections,\n                    \"error: %s\" % (msg),\n                    changed=is_changed,\n                    warn_traceback=warn_traceback,\n                )\n\n    def _complete_kwargs_loglines(self, rr, connections, idx):\n        if idx == len(connections):\n            prefix = \"#\"\n        else:\n            c = connections[idx]\n            prefix = \"#%s, state:%s persistent_state:%s\" % (\n                idx,\n                c[\"state\"],\n                c[\"persistent_state\"],\n            )\n            prefix = prefix + (\", '%s'\" % (c[\"name\"]))\n        for severity, msg, idx in rr[\"log\"]:\n            yield (\n                idx,\n                \"[%03d] %s %s: %s\" % (idx, LogLevel.fmt(severity), prefix, msg),\n                severity,\n            )\n\n    def _complete_kwargs(self, connections, kwargs, traceback_msg=None, fail=False):\n        warning_logs = kwargs.get(\"warnings\", [])\n        debug_logs = []\n        loglines = []\n        for res in self._run_results:\n            for idx, rr in enumerate(res):\n                loglines.extend(self._complete_kwargs_loglines(rr, connections, idx))\n        loglines.sort(key=lambda log_line: log_line[0])\n        for idx, log_line, severity in loglines:\n            debug_logs.append(log_line)\n            if fail:\n                warning_logs.append(log_line)\n            elif severity >= LogLevel.WARN:\n                warning_logs.append(log_line)\n        if traceback_msg is not None:\n            warning_logs.append(traceback_msg)\n        kwargs[\"warnings\"] = warning_logs\n        stderr = \"\\n\".join(debug_logs) + \"\\n\"\n        kwargs[\"stderr\"] = stderr\n        kwargs[\"_invocation\"] = {\"module_args\": self.module.params}\n        return kwargs\n\n    def exit_json(self, connections, changed=False, **kwargs):\n        kwargs[\"changed\"] = changed\n        self.module.exit_json(**self._complete_kwargs(connections, kwargs))\n\n    def fail_json(\n        self, connections, msg, changed=False, warn_traceback=False, **kwargs\n    ):\n        if self.on_failure:\n            self.on_failure()\n\n        traceback_msg = None\n        if warn_traceback:\n            traceback_msg = \"exception: %s\" % (traceback.format_exc())\n        kwargs[\"msg\"] = msg\n        kwargs[\"changed\"] = changed\n        self.module.fail_json(\n            **self._complete_kwargs(connections, kwargs, traceback_msg, fail=True)\n        )\n\n\n###############################################################################\n\n\nclass NmLogHandler(logging.Handler):\n    def __init__(self, log_func, idx):\n        self._log = log_func\n        self._idx = idx\n        super(NmLogHandler, self).__init__()\n\n    def filter(self, record):\n        return True\n\n    def emit(self, record):\n        self._log(\n            self._idx, LogLevel.from_logging_level(record.levelno), record.getMessage()\n        )\n\n\nclass Cmd(object):\n    def __init__(\n        self,\n        run_env,\n        connections_unvalidated,\n        connection_validator,\n        is_check_mode=False,\n        ignore_errors=False,\n        force_state_change=False,\n        debug_flags=\"\",\n    ):\n        self.run_env = run_env\n        self.validate_one_type = None\n        self._connections_unvalidated = connections_unvalidated\n        self._connection_validator = connection_validator\n        self._is_check_mode = is_check_mode\n        self._ignore_errors = Util.boolean(ignore_errors)\n        self._force_state_change = Util.boolean(force_state_change)\n\n        self._connections = None\n        self._connections_data = None\n        self._check_mode = CheckMode.PREPARE\n        self._is_changed_modified_system = False\n        self._debug_flags = debug_flags\n\n    def run_command(self, argv, encoding=None):\n        return self.run_env.run_command(argv, encoding=encoding)\n\n    @property\n    def is_changed_modified_system(self):\n        return self._is_changed_modified_system\n\n    @property\n    def connections(self):\n        c = self._connections\n        if c is None:\n            try:\n                c = self._connection_validator.validate(self._connections_unvalidated)\n            except ValidationError as e:\n                raise MyError(\"configuration error: %s\" % (e))\n            self._connections = c\n        return c\n\n    @property\n    def connections_data(self):\n        c = self._connections_data\n        if c is None:\n            if self.check_mode not in [\n                CheckMode.DRY_RUN,\n                CheckMode.PRE_RUN,\n                CheckMode.REAL_RUN,\n            ]:\n                raise AssertionError(\n                    \"invalid value {0} for self.check_mode\".format(self.check_mode)\n                )\n            c = [{\"changed\": False}] * len(self.connections)\n            self._connections_data = c\n        return c\n\n    def connections_data_reset(self):\n        for c in self.connections_data:\n            c[\"changed\"] = False\n\n    def connections_data_set_changed(self, idx, changed=True):\n        if self._check_mode not in [\n            CheckMode.PRE_RUN,\n            CheckMode.DRY_RUN,\n            CheckMode.REAL_RUN,\n        ]:\n            raise AssertionError(\n                \"invalid value {0} for self._check_mode\".format(self._check_mode)\n            )\n        if not changed:\n            return\n        self.connections_data[idx][\"changed\"] = changed\n        if changed and self._check_mode in [CheckMode.DRY_RUN, CheckMode.REAL_RUN]:\n            # we only do actual modifications during the REAL_RUN step.\n            # And as a special exception, during the DRY_RUN step, which\n            # is like REAL_RUN, except not not actually changing anything.\n            self._is_changed_modified_system = True\n\n    def log_debug(self, idx, msg):\n        self.log(idx, LogLevel.DEBUG, msg)\n\n    def log_info(self, idx, msg):\n        self.log(idx, LogLevel.INFO, msg)\n\n    def log_warn(self, idx, msg):\n        self.log(idx, LogLevel.WARN, msg)\n\n    def log_error(self, idx, msg, warn_traceback=False, force_fail=False):\n        self.log(\n            idx,\n            LogLevel.ERROR,\n            msg,\n            warn_traceback=warn_traceback,\n            force_fail=force_fail,\n        )\n\n    def log_fatal(self, idx, msg, warn_traceback=False):\n        self.log(\n            idx, LogLevel.ERROR, msg, warn_traceback=warn_traceback, force_fail=True\n        )\n\n    def log(self, idx, severity, msg, warn_traceback=False, force_fail=False):\n        self.run_env.log(\n            self.connections,\n            idx,\n            severity,\n            msg,\n            is_changed=self.is_changed_modified_system,\n            ignore_errors=self.connection_ignore_errors(self.connections[idx]),\n            warn_traceback=warn_traceback,\n            force_fail=force_fail,\n        )\n\n    @staticmethod\n    def create(provider, **kwargs):\n        if provider == \"nm\":\n            return Cmd_nm(**kwargs)\n        elif provider == \"initscripts\":\n            return Cmd_initscripts(**kwargs)\n        raise MyError(\"unsupported provider %s\" % (provider))\n\n    def connection_force_state_change(self, connection):\n        v = connection[\"force_state_change\"]\n        if v is not None:\n            return v\n        return self._force_state_change\n\n    def connection_ignore_errors(self, connection):\n        v = connection[\"ignore_errors\"]\n        if v is not None:\n            return v\n        return self._ignore_errors\n\n    def connection_modified_earlier(self, idx):\n        # for index @idx, check if any of the previous profiles [0..idx[\n        # modify the connection.\n\n        con = self.connections[idx]\n        if con[\"state\"] not in [\"up\", \"down\"]:\n            raise AssertionError(\n                \"connection state {0} not 'up' or 'down'\".format(con[\"state\"])\n            )\n\n        # also check, if the current profile is 'up' with a 'type' (which\n        # possibly modifies the connection as well)\n        if (\n            con[\"state\"] == \"up\"\n            and \"type\" in con\n            and self.connections_data[idx][\"changed\"]\n        ):\n            return True\n\n        for i in reversed(range(idx)):\n            c = self.connections[i]\n            if \"name\" not in c:\n                continue\n            if c[\"name\"] != con[\"name\"]:\n                continue\n\n            c_state = c[\"state\"]\n            c_pstate = c[\"persistent_state\"]\n            if c_state == \"up\" and \"type\" not in c:\n                pass\n            elif c_state == \"down\":\n                return True\n            elif c_pstate == \"absent\":\n                return True\n            elif c_state == \"up\" or c_pstate == \"present\":\n                if self.connections_data[idx][\"changed\"]:\n                    return True\n\n        return False\n\n    @property\n    def check_mode(self):\n        return self._check_mode\n\n    def check_mode_next(self):\n        if self._check_mode == CheckMode.PREPARE:\n            if self._is_check_mode:\n                c = CheckMode.DRY_RUN\n            else:\n                c = CheckMode.PRE_RUN\n        elif self.check_mode == CheckMode.PRE_RUN:\n            self.connections_data_reset()\n            c = CheckMode.REAL_RUN\n        elif self._check_mode != CheckMode.DONE:\n            c = CheckMode.DONE\n        else:\n            raise AssertionError(\n                \"invalid value {0} for self._check_mode\".format(self._check_mode)\n            )\n        self._check_mode = c\n        self.run_env.check_mode_set(c)\n        return c\n\n    def run(self):\n        self.run_env.check_mode_set(CheckMode.PREPARE, self.connections)\n        for idx, connection in enumerate(self.connections):\n            try:\n                self._connection_validator.validate_connection_one(\n                    self.validate_one_type, self.connections, idx\n                )\n            except ValidationError as e:\n                self.log_fatal(idx, str(e))\n        self.run_prepare()\n        while self.check_mode_next() != CheckMode.DONE:\n            if self.check_mode == CheckMode.REAL_RUN:\n                self.start_transaction()\n\n            # Reasoning for this order:\n            # For down/up profiles might need to be present, so do this first\n            # Put profile down before removing it if necessary\n            # To ensure up does not depend on anything that might be removed,\n            # do it last\n            for action in (\"present\", \"down\", \"absent\", \"up\"):\n                for idx, connection in enumerate(self.connections):\n                    try:\n                        if action in connection[\"actions\"]:\n                            if action == \"absent\":\n                                self.run_action_absent(idx)\n                            elif action == \"present\":\n                                self.run_action_present(idx)\n                            elif action == \"up\":\n                                self.run_action_up(idx)\n                            elif action == \"down\":\n                                self.run_action_down(idx)\n                    except Exception as error:\n                        if self.check_mode == CheckMode.REAL_RUN:\n                            self.rollback_transaction(idx, action, error)\n                        raise\n\n            if self.check_mode == CheckMode.REAL_RUN:\n                self.finish_transaction()\n\n    def run_prepare(self):\n        for idx, connection in enumerate(self.connections):\n            if \"type\" in connection and connection[\"check_iface_exists\"]:\n                # when the profile is tied to a certain interface via\n                # 'interface_name' and 'mac', check that such an interface\n                # exists.\n                #\n                # This check has many flaws, as we don't check whether the\n                # existing interface has the right device type. Also, there is\n                # some ambiguity between the current MAC address and the\n                # permanent MAC address.\n                li_ifname = None\n                if connection[\"interface_name\"]:\n                    li_ifname = SysUtil.link_info_find(connection[\"interface_name\"])\n                    if not li_ifname:\n                        if connection[\"type\"] == \"ethernet\":\n                            self.log_fatal(\n                                idx,\n                                \"profile specifies interface_name '%s' but no such \"\n                                \"interface exists\" % (connection[\"interface_name\"]),\n                            )\n                        elif connection[\"type\"] == \"infiniband\":\n                            if connection[\"infiniband\"][\"p_key\"] is None:\n                                self.log_fatal(\n                                    idx,\n                                    \"profile specifies interface_name '%s' but no such \"\n                                    \"infiniband interface exists\"\n                                    % (connection[\"interface_name\"]),\n                                )\n                    elif connection[\"mac\"]:\n                        perm_address = li_ifname.get(\"perm-address\", NULL_MAC)\n                        current_address = li_ifname.get(\"address\", NULL_MAC)\n                        bond_port_perm_hwaddr = li_ifname.get(\n                            \"bond-port-perm-hwaddr\", NULL_MAC\n                        )\n                        if (perm_address not in (NULL_MAC, connection[\"mac\"])) or (\n                            perm_address == NULL_MAC\n                            and connection[\"mac\"]\n                            not in (current_address, bond_port_perm_hwaddr)\n                        ):\n                            self.log_fatal(\n                                idx,\n                                \"profile specifies interface_name '%s' and mac '%s' \"\n                                \"but no such interface exists\"\n                                % (connection[\"interface_name\"], connection[\"mac\"]),\n                            )\n\n    def start_transaction(self):\n        \"\"\"Hook before making changes\"\"\"\n\n    def finish_transaction(self):\n        \"\"\"Hook for after all changes where made successfully\"\"\"\n\n    def rollback_transaction(self, idx, action, error):\n        \"\"\"Hook if configuring a profile results in an error\n\n        :param idx: Index of the connection that triggered the error\n        :param action: Action that triggered the error\n        :param error: The error\n\n        :type idx: int\n        :type action: str\n        :type error: Exception\n\n        \"\"\"\n        self.log_warn(\n            idx, \"failure: %s (%s) [[%s]]\" % (error, action, traceback.format_exc())\n        )\n\n    def on_failure(self):\n        \"\"\"Hook to do any cleanup on failure before exiting\"\"\"\n        pass\n\n    def run_action_absent(self, idx):\n        raise NotImplementedError()\n\n    def run_action_present(self, idx):\n        raise NotImplementedError()\n\n    def run_action_down(self, idx):\n        raise NotImplementedError()\n\n    def run_action_up(self, idx):\n        raise NotImplementedError()\n\n\n###############################################################################\n\n\ndef version_to_tuple(version):\n    \"\"\"\n    Translates the dot-separated version string to a tuple\n\n    :param version: The dot-separated version string\n    :return: the version tuple\n    \"\"\"\n    version_list = version.split(\".\")\n    version_tuple = tuple(map(int, version_list))\n    return version_tuple\n\n\nclass Cmd_nm(Cmd):\n    def __init__(self, **kwargs):\n        Cmd.__init__(self, **kwargs)\n        self._nmutil = None\n        self.validate_one_type = ArgValidator_ListConnections.VALIDATE_ONE_MODE_NM\n        self._checkpoint = None\n        # pylint: disable=import-error, no-name-in-module\n        from ansible.module_utils.network_lsr.nm import provider  # noqa:E501\n\n        # pylint: enable=import-error, no-name-in-module\n\n        self._nm_provider = provider.NetworkManagerProvider()\n\n    @property\n    def nmutil(self):\n        if self._nmutil is None:\n            try:\n                nmclient = Util.NM().Client.new(None)\n            except Exception as e:\n                raise MyError(\"failure loading libnm library: %s\" % (e))\n            self._nmutil = NMUtil(nmclient)\n        return self._nmutil\n\n    def run_prepare(self):\n        Cmd.run_prepare(self)\n\n        names = {}\n        for idx, connection in enumerate(self.connections):\n            self._check_ethtool_setting_support(idx, connection)\n            if connection.get(\"ip\", {}):\n                for route in connection[\"ip\"][\"route\"]:\n                    if route[\"type\"]:\n                        # The special route type prohibit, blackhole and unreachable\n                        # are only supported in NM since version 1.36.0\n                        nm_client_version = self._nm_provider.get_client_version()\n                        if version_to_tuple(nm_client_version) < (1, 36, 0):\n                            self.log_fatal(\n                                idx,\n                                \"route type {0} is only supported in NM since 1.36.0 \"\n                                \"but the NM client version is {1}\".format(\n                                    route[\"type\"],\n                                    nm_client_version,\n                                ),\n                            )\n            name = connection[\"name\"]\n            if not name:\n                if not connection[\"persistent_state\"] == \"absent\":\n                    raise AssertionError(\n                        \"persistent_state must be 'absent' not {0} when there is no connection 'name'\".format(\n                            connection[\"persistent_state\"]\n                        )\n                    )\n                continue\n            if name in names:\n                exists = names[name][\"nm.exists\"]\n                uuid = names[name][\"nm.uuid\"]\n            else:\n                c = Util.first(self.nmutil.connection_list(name=name))\n\n                exists = c is not None\n                if c is not None:\n                    uuid = c.get_uuid()\n                else:\n                    uuid = Util.create_uuid()\n                names[name] = {\"nm.exists\": exists, \"nm.uuid\": uuid}\n            connection[\"nm.exists\"] = exists\n            connection[\"nm.uuid\"] = uuid\n\n    def start_transaction(self):\n        Cmd.start_transaction(self)\n        if \"disable-checkpoints\" in self._debug_flags:\n            pass\n        else:\n            self._checkpoint = self.nmutil.create_checkpoint(\n                len(self.connections) * DEFAULT_ACTIVATION_TIMEOUT\n            )\n\n        # On NetworkManger 1.18, If user switch from initscripts provider where\n        # NM_CONTROLLED=no defined in ifcfg-ethX file, NetworkManager daemon will treat\n        # that interface as strictly unmanaged, even the follow up deletion of\n        # ifcfg-ethX file cannot change the NetworManager's unmanaged state of this\n        # interface. This will prevent any follow up \"nm\" provider action on this\n        # interface.  To solve that, we instruct NetworkManager to reload the\n        # configuration.\n        if self._nm_provider.get_client_version().startswith(\"1.18.\"):\n            self._nm_provider.reload_configuration()\n\n    def rollback_transaction(self, idx, action, error):\n        Cmd.rollback_transaction(self, idx, action, error)\n        self.on_failure()\n\n    def finish_transaction(self):\n        Cmd.finish_transaction(self)\n        if self._checkpoint:\n            try:\n                self.nmutil.destroy_checkpoint(self._checkpoint)\n            finally:\n                self._checkpoint = None\n\n    def on_failure(self):\n        if self._checkpoint:\n            try:\n                self.nmutil.rollback_checkpoint(self._checkpoint)\n            finally:\n                self._checkpoint = None\n\n    def _check_ethtool_setting_support(self, idx, connection):\n        \"\"\"Check if SettingEthtool support is needed and available\n\n        If any ethtool setting is specified, the SettingEthtool\n        setting needs to be available. Also NM needs to know about each\n        specified setting. Do not check if NM knows about any defaults\n\n        \"\"\"\n        NM = Util.NM()\n\n        # If the profile is not completely specified, for example if only the\n        # runtime change is specified, the ethtool subtree might be missing.\n        # Then no checks are required.\n        if \"ethtool\" not in connection:\n            return\n\n        ethtool_dict = {\n            \"features\": nm_provider.get_nm_ethtool_feature,\n            \"coalesce\": nm_provider.get_nm_ethtool_coalesce,\n            \"ring\": nm_provider.get_nm_ethtool_ring,\n        }\n\n        for ethtool_key, nm_get_name_fcnt in ethtool_dict.items():\n            ethtool_settings = connection[\"ethtool\"][ethtool_key]\n            specified = dict(\n                [(k, v) for k, v in ethtool_settings.items() if v is not None]\n            )\n\n            if specified and not hasattr(NM, \"SettingEthtool\"):\n                self.log_fatal(\n                    idx, \"ethtool.%s specified but not supported by NM\", specified\n                )\n\n            for option in specified.keys():\n                nm_name = nm_get_name_fcnt(option)\n                if not nm_name:\n                    self.log_fatal(\n                        idx,\n                        \"ethtool %s setting %s specified \"\n                        \"but not supported by NM\" % (ethtool_key, option),\n                    )\n\n    def run_action_absent(self, idx):\n        name = self.connections[idx][\"name\"]\n        profile_uuids = set()\n\n        if name:\n            black_list_names = []\n        else:\n            # Delete all profiles except explicitly included\n            black_list_names = ArgUtil.connection_get_non_absent_names(self.connections)\n\n        for nm_profile in self._nm_provider.get_connections():\n            if name and nm_profile.get_id() != name:\n                continue\n            if nm_profile.get_id() not in black_list_names:\n                profile_uuids.add(nm_profile.get_uuid())\n\n        if not profile_uuids:\n            self.log_info(idx, \"no connection matches '%s' to delete\" % (name))\n            return\n\n        logger = logging.getLogger()\n        log_handler = NmLogHandler(self.log, idx)\n        logger.addHandler(log_handler)\n        timeout = self.connections[idx].get(\"wait\")\n        changed = False\n        for profile_uuid in profile_uuids:\n            changed |= self._nm_provider.volatilize_connection_by_uuid(\n                profile_uuid,\n                DEFAULT_TIMEOUT if timeout is None else timeout,\n                self.check_mode != CheckMode.REAL_RUN,\n            )\n        if changed:\n            self.connections_data_set_changed(idx)\n        logger.removeHandler(log_handler)\n\n    def run_action_present(self, idx):\n        connection = self.connections[idx]\n        con_cur = Util.first(\n            self.nmutil.connection_list(\n                name=connection[\"name\"], uuid=connection[\"nm.uuid\"]\n            )\n        )\n\n        if not connection.get(\"type\"):\n            # if the type is not specified, just check that the connection was\n            # found\n            if not con_cur:\n                self.log_error(\n                    idx, \"Connection not found on system and 'type' not specified\"\n                )\n            return\n\n        con_new = self.nmutil.connection_create(self.connections, idx, con_cur)\n        if con_cur is None:\n            self.log_info(\n                idx,\n                \"add connection %s, %s\" % (connection[\"name\"], connection[\"nm.uuid\"]),\n            )\n            self.connections_data_set_changed(idx)\n            if self.check_mode == CheckMode.REAL_RUN:\n                try:\n                    con_cur = self.nmutil.connection_add(con_new)\n                except MyError as e:\n                    self.log_error(idx, \"adding connection failed: %s\" % (e))\n        elif not self.nmutil.connection_compare(con_cur, con_new, normalize_a=True):\n            self.log_info(\n                idx, \"update connection %s, %s\" % (con_cur.get_id(), con_cur.get_uuid())\n            )\n            self.connections_data_set_changed(idx)\n            if self.check_mode == CheckMode.REAL_RUN:\n                try:\n                    self.nmutil.connection_update(con_cur, con_new)\n                except MyError as e:\n                    self.log_error(idx, \"updating connection failed: %s\" % (e))\n        else:\n            self.log_info(\n                idx,\n                \"connection %s, %s already up to date\"\n                % (con_cur.get_id(), con_cur.get_uuid()),\n            )\n\n        if (\n            self.check_mode == CheckMode.REAL_RUN\n            and connection[\"ieee802_1x\"] is not None\n            and connection[\"ieee802_1x\"].get(\"ca_path\")\n        ):\n            # It seems that NM on Fedora 31\n            # (NetworkManager-1.20.4-1.fc31.x86_64) does need some time so that\n            # the D-Bus information is actually up-to-date.\n            time.sleep(0.1)\n            Util.GMainLoop_iterate_all()\n            updated_connection = Util.first(\n                self.nmutil.connection_list(\n                    name=connection[\"name\"], uuid=connection[\"nm.uuid\"]\n                )\n            )\n            ca_path = updated_connection.get_setting_802_1x().props.ca_path\n            if not ca_path:\n                self.log_fatal(\n                    idx,\n                    \"ieee802_1x.ca_path specified but not supported by \"\n                    \"NetworkManager. Please update NetworkManager or use \"\n                    \"ieee802_1x.ca_cert.\",\n                )\n        if con_cur is not None:\n            self._remove_duplicate_profile(idx, con_cur, connection.get(\"timeout\"))\n\n    def _remove_duplicate_profile(self, idx, cur_nm_profile, timeout):\n        logger = logging.getLogger()\n        log_handler = NmLogHandler(self.log, idx)\n        logger.addHandler(log_handler)\n\n        for nm_profile in self._nm_provider.get_connections():\n            if (\n                nm_profile.get_id() == cur_nm_profile.get_id()\n                and nm_profile.get_uuid() != cur_nm_profile.get_uuid()\n            ):\n                if self.check_mode == CheckMode.REAL_RUN:\n                    self._nm_provider.volatilize_connection_by_uuid(\n                        uuid=nm_profile.get_uuid(),\n                        timeout=(DEFAULT_TIMEOUT if timeout is None else timeout),\n                        check_mode=True,\n                    )\n                self.connections_data_set_changed(idx)\n        logger.removeHandler(log_handler)\n\n    def run_action_up(self, idx):\n        connection = self.connections[idx]\n\n        con = Util.first(\n            self.nmutil.connection_list(\n                name=connection[\"name\"], uuid=connection[\"nm.uuid\"]\n            )\n        )\n        if not con:\n            if self.check_mode == CheckMode.REAL_RUN:\n                self.log_error(\n                    idx,\n                    \"up connection %s, %s failed: no connection\"\n                    % (connection[\"name\"], connection[\"nm.uuid\"]),\n                )\n            else:\n                self.log_info(\n                    idx,\n                    \"up connection %s, %s\"\n                    % (connection[\"name\"], connection[\"nm.uuid\"]),\n                )\n            return\n\n        is_active = self.nmutil.connection_is_active(con)\n        is_modified = self.connection_modified_earlier(idx)\n        force_state_change = self.connection_force_state_change(connection)\n\n        if is_active and not force_state_change and not is_modified:\n            self.log_info(\n                idx,\n                \"up connection %s, %s skipped because already active\"\n                % (con.get_id(), con.get_uuid()),\n            )\n            return\n\n        self.log_info(\n            idx,\n            \"up connection %s, %s (%s)\"\n            % (\n                con.get_id(),\n                con.get_uuid(),\n                (\n                    \"not-active\"\n                    if not is_active\n                    else \"is-modified\" if is_modified else \"force-state-change\"\n                ),\n            ),\n        )\n        self.connections_data_set_changed(idx)\n        if self.check_mode == CheckMode.REAL_RUN:\n            if self._try_reapply(idx, con):\n                return\n\n            try:\n                ac = self.nmutil.connection_activate(con)\n            except MyError as e:\n                self.log_error(idx, \"up connection failed: %s\" % (e))\n\n            wait_time = connection[\"wait\"]\n            if wait_time is None:\n                wait_time = DEFAULT_ACTIVATION_TIMEOUT\n\n            try:\n                self.nmutil.connection_activate_wait(ac, wait_time)\n            except MyError as e:\n                self.log_error(idx, \"up connection failed while waiting: %s\" % (e))\n\n    def _try_reapply(self, idx, con):\n        \"\"\"Try to reapply a connection\n\n        If there is exactly one active connection with the same UUID activated\n        on exactly one device, ask the device to reapply the connection.\n\n        :returns: `True`, when the connection was reapplied, `False` otherwise\n        :rtype: bool\n        \"\"\"\n        NM = Util.NM()\n\n        acons = list(self.nmutil.active_connection_list(connections=[con]))\n        if len(acons) != 1:\n            return False\n\n        active_connection = acons[0]\n        if active_connection.get_state() == NM.ActiveConnectionState.ACTIVATED:\n            devices = active_connection.get_devices()\n            if len(devices) == 1:\n                try:\n                    self.nmutil.reapply(devices[0])\n                    self.log_info(idx, \"connection reapplied\")\n                    return True\n                except MyError as error:\n                    self.log_info(idx, \"connection reapply failed: %s\" % (error))\n        return False\n\n    def run_action_down(self, idx):\n        connection = self.connections[idx]\n        logger = logging.getLogger()\n        log_handler = NmLogHandler(self.log, idx)\n        logger.addHandler(log_handler)\n        timeout = connection[\"wait\"]\n        if self._nm_provider.deactivate_connection(\n            connection[\"name\"],\n            10 if timeout is None else timeout,\n            self.check_mode != CheckMode.REAL_RUN,\n        ):\n            self.connections_data_set_changed(idx)\n        logger.removeHandler(log_handler)\n\n\n###############################################################################\n\n\nclass Cmd_initscripts(Cmd):\n    def __init__(self, **kwargs):\n        Cmd.__init__(self, **kwargs)\n        self.validate_one_type = (\n            ArgValidator_ListConnections.VALIDATE_ONE_MODE_INITSCRIPTS\n        )\n\n    def run_prepare(self):\n        Cmd.run_prepare(self)\n        for idx, connection in enumerate(self.connections):\n            if connection.get(\"type\") in [\"macvlan\"]:\n                self.log_fatal(\n                    idx,\n                    \"unsupported type %s for initscripts provider\"\n                    % (connection[\"type\"]),\n                )\n\n    def check_name(self, idx, name=None):\n        if name is None:\n            name = self.connections[idx][\"name\"]\n        try:\n            f = IfcfgUtil.ifcfg_path(name)\n        except MyError:\n            self.log_error(idx, \"invalid name %s for connection\" % (name))\n            return None\n        return f\n\n    def forget_nm_connection(self, path):\n        \"\"\"\n        Forget a NetworkManager connection by loading the path of the deleted\n        profile. This inverts the effect of loading a profile with\n        `NM_CONTROLLED=no` earlier, which made NetworkManager ignore the\n        device.\n\n        This does not use the Python libnm bindings because they might not be\n        present on the system, since the module is currently operating for the\n        initscripts provider. If it fails, assume that NetworkManager is not\n        present and did not save any state about the corresponding interface.\n        \"\"\"\n        try:\n            subprocess.call(\n                [\n                    \"busctl\",\n                    \"--system\",\n                    \"call\",\n                    \"org.freedesktop.NetworkManager\",\n                    \"/org/freedesktop/NetworkManager/Settings\",\n                    \"org.freedesktop.NetworkManager.Settings\",\n                    \"LoadConnections\",\n                    \"as\",\n                    \"1\",\n                    path,\n                ]\n            )\n        except Exception:\n            pass\n\n    def run_action_absent(self, idx):\n        n = self.connections[idx][\"name\"]\n        name = n\n        if not name:\n            names = []\n            black_list_names = ArgUtil.connection_get_non_absent_names(self.connections)\n            for f in os.listdir(\"/etc/sysconfig/network-scripts\"):\n                if not f.startswith(\"ifcfg-\"):\n                    continue\n                name = f[6:]\n                if name in black_list_names:\n                    continue\n                if name == \"lo\":\n                    continue\n                names.append(name)\n        else:\n            if not self.check_name(idx):\n                return\n            names = [name]\n\n        changed = False\n        for name in names:\n            for path in IfcfgUtil.ifcfg_paths(name):\n                if not os.path.isfile(path):\n                    continue\n                changed = True\n                self.log_info(idx, \"delete ifcfg-rh file '%s'\" % (path))\n                self.connections_data_set_changed(idx)\n                if self.check_mode == CheckMode.REAL_RUN:\n                    try:\n                        os.unlink(path)\n                        self.forget_nm_connection(path)\n                    except Exception as e:\n                        self.log_error(\n                            idx, \"delete ifcfg-rh file '%s' failed: %s\" % (path, e)\n                        )\n\n        if not changed:\n            self.log_info(\n                idx,\n                \"delete ifcfg-rh files for %s (no files present)\"\n                % (\"'\" + n + \"'\" if n else \"*\"),\n            )\n\n    def run_action_present(self, idx):\n        if not self.check_name(idx):\n            return\n\n        connection = self.connections[idx]\n        name = connection[\"name\"]\n\n        old_content = IfcfgUtil.content_from_file(name)\n\n        if not connection.get(\"type\"):\n            # if the type is not specified, just check that the connection was\n            # found\n            if not old_content.get(\"ifcfg\"):\n                self.log_error(\n                    idx, \"Connection not found on system and 'type' not present\"\n                )\n            return\n\n        ifcfg_all = IfcfgUtil.ifcfg_create(\n            self.connections, idx, lambda msg: self.log_warn(idx, msg), old_content\n        )\n\n        new_content = IfcfgUtil.content_from_dict(\n            ifcfg_all, header=self.run_env.ifcfg_header\n        )\n\n        if old_content == new_content:\n            self.log_info(idx, \"ifcfg-rh profile '%s' already up to date\" % (name))\n            return\n\n        op = \"add\" if (old_content[\"ifcfg\"] is None) else \"update\"\n\n        self.log_info(idx, \"%s ifcfg-rh profile '%s'\" % (op, name))\n\n        self.connections_data_set_changed(idx)\n        if self.check_mode == CheckMode.REAL_RUN:\n            try:\n                IfcfgUtil.content_to_file(name, new_content)\n            except MyError as e:\n                self.log_error(\n                    idx, \"%s ifcfg-rh profile '%s' failed: %s\" % (op, name, e)\n                )\n\n    def _run_action_updown(self, idx, do_up):\n        if not self.check_name(idx):\n            return\n\n        connection = self.connections[idx]\n        name = connection[\"name\"]\n\n        if connection[\"wait\"] is not None:\n            # initscripts don't support wait, they always block until the ifup/ifdown\n            # command completes. Silently ignore the argument.\n            pass\n\n        path = IfcfgUtil.ifcfg_path(name)\n        if not os.path.isfile(path):\n            if (\n                self.check_mode == CheckMode.REAL_RUN\n                and connection.get(PERSISTENT_STATE) != ABSENT_STATE\n            ):\n                self.log_error(idx, \"ifcfg file '%s' does not exist\" % (path))\n            else:\n                if self.check_mode != CheckMode.REAL_RUN:\n                    in_checkmode = \" in check mode\"\n                else:\n                    in_checkmode = \"\"\n                self.log_info(\n                    idx, \"ifcfg file '%s' does not exist%s\" % (path, in_checkmode)\n                )\n            return\n\n        is_active = IfcfgUtil.connection_seems_active(name, self.run_env)\n        is_modified = self.connection_modified_earlier(idx)\n        force_state_change = self.connection_force_state_change(connection)\n\n        if do_up:\n            if is_active is True and not force_state_change and not is_modified:\n                self.log_info(\n                    idx, \"up connection %s skipped because already active\" % (name)\n                )\n                return\n\n            self.log_info(\n                idx,\n                \"up connection %s (%s)\"\n                % (\n                    name,\n                    (\n                        \"not-active\"\n                        if is_active is not True\n                        else \"is-modified\" if is_modified else \"force-state-change\"\n                    ),\n                ),\n            )\n            cmd = \"ifup\"\n        else:\n            if is_active is False and not force_state_change:\n                self.log_info(\n                    idx, \"down connection %s skipped because not active\" % (name)\n                )\n                return\n\n            self.log_info(\n                idx,\n                \"up connection %s (%s)\"\n                % (name, \"active\" if is_active is not False else \"force-state-change\"),\n            )\n            cmd = \"ifdown\"\n\n        self.connections_data_set_changed(idx)\n        if self.check_mode == CheckMode.REAL_RUN:\n            rc, out, err = self.run_env.run_command([cmd, name])\n            self.log_info(\n                idx,\n                \"call '%s %s': rc=%d, out='%s', err='%s'\" % (cmd, name, rc, out, err),\n            )\n            if rc != 0:\n                self.log_error(\n                    idx, \"call '%s %s' failed with exit status %d\" % (cmd, name, rc)\n                )\n\n    def run_action_up(self, idx):\n        self._run_action_updown(idx, True)\n\n    def run_action_down(self, idx):\n        self._run_action_updown(idx, False)\n\n\n###############################################################################\n\n\ndef main():\n    connections = None\n    cmd = None\n    run_env_ansible = RunEnvironmentAnsible()\n    try:\n        params = run_env_ansible.module.params\n        cmd = Cmd.create(\n            params[\"provider\"],\n            run_env=run_env_ansible,\n            connections_unvalidated=params[\"connections\"],\n            connection_validator=ArgValidator_ListConnections(),\n            is_check_mode=run_env_ansible.module.check_mode,\n            ignore_errors=params[\"ignore_errors\"],\n            force_state_change=params[\"force_state_change\"],\n            debug_flags=params[\"__debug_flags\"],\n        )\n        connections = cmd.connections\n        run_env_ansible.on_failure = cmd.on_failure\n        cmd.run()\n    except Exception as e:\n        run_env_ansible.fail_json(\n            connections,\n            \"fatal error: %s\" % (e),\n            changed=(cmd is not None and cmd.is_changed_modified_system),\n            warn_traceback=not isinstance(e, MyError),\n        )\n    run_env_ansible.exit_json(\n        connections, changed=(cmd is not None and cmd.is_changed_modified_system)\n    )\n\n\nif __name__ == \"__main__\":\n    main()",
      "message": "duplicate-code: Similar lines in 2 files\n==library.network_connections:[6:2903]\n==library.network_connections:[6:2903]\n__metaclass__ = type\n\nDOCUMENTATION = \"\"\"\n---\nmodule: network_connections\nauthor: Thomas Haller (@thom311)\nshort_description: module for network role to manage connection profiles\nrequirements: [pygobject, dbus, NetworkManager]\nversion_added: \"2.13.0\"\ndescription:\n  - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n  - |\n    Manage networking profiles (connections) for NetworkManager and\n    initscripts networking providers. Documentation needs to be written. Note\n    that the network_connections module tightly integrates with the network\n    role and currently it is not expected to use this module outside the role.\n    Thus, consult README.md for examples for the role.  The requirements are\n    only for the NetworkManager (nm) provider.\noptions:\n    __debug_flags:\n        description: Flags to use for debugging\n        required: false\n        type: str\n        default: ''\n    force_state_change:\n        description: Force a state change\n        required: false\n        type: bool\n        default: False\n    ignore_errors:\n        description: Ignore errors\n        required: false\n        type: bool\n        default: False\n    __header:\n        description: Header to use in generated files\n        required: true\n        type: str\n    provider:\n        description: Network provider to use - initscripts or nm\n        required: true\n        type: str\n    connections:\n        description: Network configuration options\n        required: false\n        default: []\n        type: list\n        elements: dict\n\"\"\"\n\nEXAMPLES = \"\"\"\nnetwork_connections:\n  connections:\n    - name: eth0\n      state: up\n\"\"\"\n\nimport errno\nimport functools\nimport os\nimport re\nimport shlex\nimport socket\nimport subprocess\nimport time\nimport traceback\nimport logging\n\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network_lsr import ethtool  # noqa:E501\nfrom ansible.module_utils.network_lsr.myerror import MyError  # noqa:E501\n\nfrom ansible.module_utils.network_lsr.argument_validator import (  # noqa:E501\n    ArgUtil,\n    ArgValidator_ListConnections,\n    ValidationError,\n)\n\nfrom ansible.module_utils.network_lsr.utils import Util  # noqa:E501\nfrom ansible.module_utils.network_lsr import nm_provider  # noqa:E501\n\n# pylint: enable=import-error, no-name-in-module\n\n\n###############################################################################\nPERSISTENT_STATE = \"persistent_state\"\nABSENT_STATE = \"absent\"\n\nDEFAULT_ACTIVATION_TIMEOUT = 90\nDEFAULT_TIMEOUT = 10\nNULL_MAC = \"00:00:00:00:00:00\"\n\n\nclass CheckMode:\n    PREPARE = \"prepare\"\n    DRY_RUN = \"dry-run\"\n    PRE_RUN = \"pre-run\"\n    REAL_RUN = \"real-run\"\n    DONE = \"done\"\n\n\nclass LogLevel:\n    ERROR = \"error\"\n    WARN = \"warn\"\n    INFO = \"info\"\n    DEBUG = \"debug\"\n\n    _LOGGING_LEVEL_MAP = {\n        logging.DEBUG: DEBUG,\n        logging.INFO: INFO,\n        logging.WARN: WARN,\n        logging.ERROR: ERROR,\n    }\n\n    @staticmethod\n    def from_logging_level(logging_level):\n        return LogLevel._LOGGING_LEVEL_MAP.get(logging_level, LogLevel.ERROR)\n\n    @staticmethod\n    def fmt(level):\n        return \"<%-6s\" % (str(level) + \">\")\n\n\n# cmp() is not available in python 3 anymore\nif \"cmp\" not in dir(__builtins__):\n\n    def cmp(x, y):\n        \"\"\"\n        Replacement for built-in function cmp that was removed in Python 3\n\n        Compare the two objects x and y and return an integer according to\n        the outcome. The return value is negative if x < y, zero if x == y\n        and strictly positive if x > y.\n        \"\"\"\n\n        return (x > y) - (x < y)\n\n\nclass SysUtil:\n    @staticmethod\n    def _sysctl_read(filename):\n        try_count = 0\n        while True:\n            try_count += 1\n            try:\n                with open(filename, \"r\") as f:\n                    return f.read()\n            except Exception:\n                if try_count < 5:\n                    continue\n                raise\n\n    @staticmethod\n    def _link_read_ifindex(ifname):\n        c = SysUtil._sysctl_read(\"/sys/class/net/\" + ifname + \"/ifindex\")\n        return int(c.strip())\n\n    @staticmethod\n    def _link_read_address(ifname):\n        c = SysUtil._sysctl_read(\"/sys/class/net/\" + ifname + \"/address\")\n        return Util.mac_norm(c.strip())\n\n    @staticmethod\n    def _link_read_bond_port_perm_hwaddr(ifname):\n        filename = os.path.join(\n            \"/sys/class/net\",\n            ifname,\n            # wokeignore:rule=slave\n            \"bonding_slave\",\n            \"perm_hwaddr\",\n        )\n        if not os.path.exists(filename):\n            return None\n        c = SysUtil._sysctl_read(filename)\n        return Util.mac_norm(c.strip())\n\n    @staticmethod\n    def _link_read_permaddress(ifname):\n        return ethtool.get_perm_addr(ifname)\n\n    @staticmethod\n    def _link_infos_fetch():\n        links = {}\n        for ifname in os.listdir(\"/sys/class/net/\"):\n            if not os.path.islink(\"/sys/class/net/\" + ifname):\n                # /sys/class/net may contain certain entries\n                # that are not interface names, like\n                # wokeignore:rule=master\n                # 'bonding_master'.\n                # Skip over files that are not links.\n                continue\n            links[ifname] = {\n                \"ifindex\": SysUtil._link_read_ifindex(ifname),\n                \"ifname\": ifname,\n                \"address\": SysUtil._link_read_address(ifname),\n                \"perm-address\": SysUtil._link_read_permaddress(ifname),\n                # When an interface is added as a port of a bonding device, its MAC\n                # address might change, we need to retrieve and preserve the original\n                # MAC address to ensure the user-provided interface name and MAC match\n                # correctly.\n                \"bond-port-perm-hwaddr\": SysUtil._link_read_bond_port_perm_hwaddr(\n                    ifname\n                ),\n            }\n        return links\n\n    @classmethod\n    def link_infos(cls, refresh=False):\n        if refresh:\n            linkinfos = None\n        else:\n            linkinfos = getattr(cls, \"_link_infos\", None)\n        if linkinfos is None:\n            try_count = 0\n            last_fetch_linkinfos = None\n            while True:\n                try_count += 1\n                try:\n                    # there is a race in that we lookup properties by ifname\n                    # and interfaces can be renamed. Try to avoid that by\n                    # fetching the info twice and repeat until we get the same\n                    # result.\n                    if last_fetch_linkinfos is None:\n                        last_fetch_linkinfos = SysUtil._link_infos_fetch()\n                    linkinfos = SysUtil._link_infos_fetch()\n                    if linkinfos != last_fetch_linkinfos:\n                        last_fetch_linkinfos = linkinfos\n                        raise Exception(\n                            \"cannot read stable link-infos. They keep changing\"\n                        )\n                except Exception:\n                    if try_count < 50:\n                        raise\n                    continue\n                break\n            cls._link_infos = linkinfos\n        return linkinfos\n\n    @classmethod\n    def link_info_find(cls, ifname):\n        result = None\n\n        for linkinfo in cls.link_infos().values():\n            if ifname == linkinfo[\"ifname\"]:\n                result = linkinfo\n                break\n\n        return result\n\n\n###############################################################################\n\n\n###############################################################################\n\n\nclass IfcfgUtil:\n\n    FILE_TYPES = [\"ifcfg\", \"keys\", \"route\", \"route6\", \"rule\", \"rule6\"]\n\n    @classmethod\n    def _file_types(cls, file_type):\n        if file_type is None:\n            return cls.FILE_TYPES\n        else:\n            return [file_type]\n\n    @classmethod\n    def ifcfg_paths(cls, name, file_types=None):\n        paths = []\n        if file_types is None:\n            file_types = cls.FILE_TYPES\n        for f in file_types:\n            paths.append(cls.ifcfg_path(name, f))\n        return paths\n\n    @classmethod\n    def ifcfg_path(cls, name, file_type=None):\n        n = str(name)\n        if not name or n == \".\" or n == \"..\" or n.find(\"/\") != -1:\n            raise MyError(\"invalid ifcfg-name %s\" % (name))\n        if file_type is None:\n            file_type = \"ifcfg\"\n        if file_type not in cls.FILE_TYPES:\n            raise MyError(\"invalid file-type %s\" % (file_type))\n        return \"/etc/sysconfig/network-scripts/\" + file_type + \"-\" + n\n\n    @classmethod\n    def KeyValid(cls, name):\n        r = getattr(cls, \"_CHECKSTR_VALID_KEY\", None)\n        if r is None:\n            r = re.compile(\"^[a-zA-Z][a-zA-Z0-9_]*$\")\n            cls._CHECKSTR_VALID_KEY = r\n        return bool(r.match(name))\n\n    @classmethod\n    def ValueEscape(cls, value):\n\n        r = getattr(cls, \"_re_ValueEscape\", None)\n        if r is None:\n            r = re.compile(\"^[a-zA-Z_0-9-.]*$\")\n            cls._re_ValueEscape = r\n\n        if r.match(value):\n            return value\n\n        if any(ord(c) < ord(\" \") for c in value):\n            # needs ansic escaping due to ANSI control characters (newline)\n            s = \"$'\"\n            for c in value:\n                if ord(c) < ord(c):\n                    s += \"\\\\\" + str(ord(c))\n                elif c == \"\\\\\" or c == \"'\":\n                    s += \"\\\\\" + c\n                else:\n                    # non-unicode chars are fine too to take literally\n                    # as utf8\n                    s += c\n            s += \"'\"\n        else:\n            # double quoting\n            s = '\"'\n            for c in value:\n                if c == '\"' or c == \"\\\\\" or c == \"$\" or c == \"`\":\n                    s += \"\\\\\" + c\n                else:\n                    # non-unicode chars are fine too to take literally\n                    # as utf8\n                    s += c\n            s += '\"'\n        return s\n\n    @classmethod\n    def _ifcfg_route_merge(cls, route, append_only, current):\n        if not append_only or current is None:\n            if not route:\n                return None\n            return \"\\n\".join(route) + \"\\n\"\n\n        if route:\n            # the 'route' file is processed line by line by initscripts'\n            # ifup-route. Hence, the order of the route matters.\n            # _ifcfg_route_merge() is not sophisticated enough to understand\n            # pre-existing lines. It will only append lines that don't exist\n            # yet, which hopefully is correct. It's better to always rewrite\n            # the entire file with route_append_only=False.\n            changed = False\n            c_lines = list(current.split(\"\\n\"))\n            for r in route:\n                if r not in c_lines:\n                    changed = True\n                    c_lines.append(r)\n            if changed:\n                return \"\\n\".join(c_lines) + \"\\n\"\n\n        return current\n\n    @classmethod\n    def ifcfg_create(\n        cls, connections, idx, warn_fcn=lambda msg: None, content_current=None\n    ):\n        connection = connections[idx]\n        ip = connection[\"ip\"]\n\n        ifcfg = {}\n        keys_file = None\n        route4_file = None\n        route6_file = None\n        rule4_file = None\n        rule6_file = None\n\n        if ip[\"dhcp4_send_hostname\"] is not None:\n            warn_fcn(\"ip.dhcp4_send_hostname is not supported by initscripts provider\")\n        if ip[\"route_metric6\"] is not None and ip[\"route_metric6\"] >= 0:\n            warn_fcn(\"ip.route_metric6 is not supported by initscripts provider\")\n\n        ifcfg[\"NM_CONTROLLED\"] = \"no\"\n\n        if connection[\"autoconnect\"]:\n            ifcfg[\"ONBOOT\"] = \"yes\"\n        else:\n            ifcfg[\"ONBOOT\"] = \"no\"\n\n        ifcfg[\"DEVICE\"] = connection[\"interface_name\"]\n        if connection[\"cloned_mac\"] != \"default\":\n            ifcfg[\"MACADDR\"] = connection[\"cloned_mac\"]\n\n        if connection[\"type\"] == \"ethernet\":\n            ifcfg[\"TYPE\"] = \"Ethernet\"\n            ifcfg[\"HWADDR\"] = connection[\"mac\"]\n        elif connection[\"type\"] == \"infiniband\":\n            ifcfg[\"TYPE\"] = \"InfiniBand\"\n            ifcfg[\"HWADDR\"] = connection[\"mac\"]\n            ifcfg[\"CONNECTED_MODE\"] = (\n                \"yes\"\n                if (connection[\"infiniband\"][\"transport_mode\"] == \"connected\")\n                else \"no\"\n            )\n            if connection[\"infiniband\"][\"p_key\"] is not None:\n                ifcfg[\"PKEY\"] = \"yes\"\n                ifcfg[\"PKEY_ID\"] = str(connection[\"infiniband\"][\"p_key\"])\n                if connection[\"parent\"]:\n                    ifcfg[\"PHYSDEV\"] = ArgUtil.connection_find_controller(\n                        connection[\"parent\"], connections, idx\n                    )\n        elif connection[\"type\"] == \"bridge\":\n            ifcfg[\"TYPE\"] = \"Bridge\"\n        elif connection[\"type\"] == \"bond\":\n            ifcfg[\"TYPE\"] = \"Bond\"\n            # wokeignore:rule=master\n            ifcfg[\"BONDING_MASTER\"] = \"yes\"\n            opts = [\"mode=%s\" % (connection[\"bond\"][\"mode\"])]\n            if connection[\"bond\"][\"miimon\"] is not None:\n                opts.append(\" miimon=%s\" % (connection[\"bond\"][\"miimon\"]))\n            ifcfg[\"BONDING_OPTS\"] = \" \".join(opts)\n        elif connection[\"type\"] == \"team\":\n            ifcfg[\"DEVICETYPE\"] = \"Team\"\n        elif connection[\"type\"] == \"vlan\":\n            ifcfg[\"VLAN\"] = \"yes\"\n            ifcfg[\"TYPE\"] = \"Vlan\"\n            ifcfg[\"PHYSDEV\"] = ArgUtil.connection_find_controller(\n                connection[\"parent\"], connections, idx\n            )\n            ifcfg[\"VID\"] = str(connection[\"vlan\"][\"id\"])\n        else:\n            raise MyError(\"unsupported type %s\" % (connection[\"type\"]))\n\n        if connection[\"mtu\"]:\n            ifcfg[\"MTU\"] = str(connection[\"mtu\"])\n\n        ethtool_options = \"\"\n        if \"ethernet\" in connection:\n            if connection[\"ethernet\"][\"autoneg\"] is not None:\n                if connection[\"ethernet\"][\"autoneg\"]:\n                    ethtool_options = \"autoneg on\"\n                else:\n                    ethtool_options = \"autoneg off speed %s duplex %s\" % (\n                        connection[\"ethernet\"][\"speed\"],\n                        connection[\"ethernet\"][\"duplex\"],\n                    )\n\n        ethtool_features = connection[\"ethtool\"][\"features\"]\n        configured_features = []\n        for feature, setting in ethtool_features.items():\n            feature = feature.replace(\"_\", \"-\")\n            value = \"\"\n            if setting:\n                value = \"on\"\n            elif setting is not None:\n                value = \"off\"\n\n            if value:\n                configured_features.append(\"%s %s\" % (feature, value))\n\n        if configured_features:\n            if ethtool_options:\n                ethtool_options += \" ; \"\n            ethtool_options += \"-K %s %s\" % (\n                connection[\"interface_name\"],\n                \" \".join(configured_features),\n            )\n\n        ethtool_coalesce = connection[\"ethtool\"][\"coalesce\"]\n        configured_coalesce = []\n        for coalesce, setting in ethtool_coalesce.items():\n            if setting is not None:\n                if isinstance(setting, bool):\n                    setting = int(setting)\n                configured_coalesce.append(\n                    \"%s %s\" % (coalesce.replace(\"_\", \"-\"), setting)\n                )\n\n        if configured_coalesce:\n            if ethtool_options:\n                ethtool_options += \" ; \"\n            ethtool_options += \"-C %s %s\" % (\n                connection[\"interface_name\"],\n                \" \".join(configured_coalesce),\n            )\n        ethtool_ring = connection[\"ethtool\"][\"ring\"]\n        configured_ring = []\n        for ring, setting in ethtool_ring.items():\n            if setting is not None:\n                configured_ring.append(\"%s %s\" % (ring.replace(\"_\", \"-\"), setting))\n\n        if configured_ring:\n            if ethtool_options:\n                ethtool_options += \" ; \"\n            ethtool_options += \"-G %s %s\" % (\n                connection[\"interface_name\"],\n                \" \".join(configured_ring),\n            )\n\n        if ethtool_options:\n            ifcfg[\"ETHTOOL_OPTS\"] = ethtool_options\n\n        if connection[\"controller\"] is not None:\n            controller = ArgUtil.connection_find_controller(\n                connection[\"controller\"], connections, idx\n            )\n            if connection[\"port_type\"] == \"bridge\":\n                ifcfg[\"BRIDGE\"] = controller\n            elif connection[\"port_type\"] == \"bond\":\n                # wokeignore:rule=master\n                ifcfg[\"MASTER\"] = controller\n                # wokeignore:rule=slave\n                ifcfg[\"SLAVE\"] = \"yes\"\n            elif connection[\"port_type\"] == \"team\":\n                # wokeignore:rule=master\n                ifcfg[\"TEAM_MASTER\"] = controller\n                if \"TYPE\" in ifcfg:\n                    del ifcfg[\"TYPE\"]\n                if connection[\"type\"] != \"team\":\n                    ifcfg[\"DEVICETYPE\"] = \"TeamPort\"\n            else:\n                raise MyError(\"invalid port_type '%s'\" % (connection[\"port_type\"]))\n\n            if ip[\"route_append_only\"] and content_current:\n                route4_file = content_current[\"route\"]\n                route6_file = content_current[\"route6\"]\n        else:\n            if connection[\"zone\"]:\n                ifcfg[\"ZONE\"] = connection[\"zone\"]\n\n            addrs4 = [\n                addr for addr in ip[\"address\"] if addr[\"family\"] == socket.AF_INET\n            ]\n            addrs6 = [\n                addr for addr in ip[\"address\"] if addr[\"family\"] == socket.AF_INET6\n            ]\n\n            if ip[\"dhcp4\"]:\n                ifcfg[\"BOOTPROTO\"] = \"dhcp\"\n            elif addrs4:\n                ifcfg[\"BOOTPROTO\"] = \"static\"\n            else:\n                ifcfg[\"BOOTPROTO\"] = \"none\"\n            for i in range(0, len(addrs4)):\n                addr = addrs4[i]\n                ifcfg[\"IPADDR\" + (\"\" if i == 0 else str(i))] = addr[\"address\"]\n                ifcfg[\"PREFIX\" + (\"\" if i == 0 else str(i))] = str(addr[\"prefix\"])\n            if ip[\"gateway4\"] is not None:\n                ifcfg[\"GATEWAY\"] = ip[\"gateway4\"]\n\n            for idx, dns in enumerate(ip[\"dns\"]):\n                ifcfg[\"DNS\" + str(idx + 1)] = dns[\"address\"]\n            if ip[\"dns_search\"]:\n                ifcfg[\"DOMAIN\"] = \" \".join(ip[\"dns_search\"])\n\n            if ip[\"auto6\"]:\n                ifcfg[\"IPV6INIT\"] = \"yes\"\n                ifcfg[\"IPV6_AUTOCONF\"] = \"yes\"\n            elif addrs6:\n                ifcfg[\"IPV6INIT\"] = \"yes\"\n                ifcfg[\"IPV6_AUTOCONF\"] = \"no\"\n            else:\n                ifcfg[\"IPV6INIT\"] = \"no\"\n            if addrs6:\n                ifcfg[\"IPV6ADDR\"] = (\n                    addrs6[0][\"address\"] + \"/\" + str(addrs6[0][\"prefix\"])\n                )\n                if len(addrs6) > 1:\n                    ifcfg[\"IPV6ADDR_SECONDARIES\"] = \" \".join(\n                        [\n                            addr[\"address\"] + \"/\" + str(addr[\"prefix\"])\n                            for addr in addrs6[1:]\n                        ]\n                    )\n            if ip[\"gateway6\"] is not None:\n                ifcfg[\"IPV6_DEFAULTGW\"] = ip[\"gateway6\"]\n\n            if ip[\"auto_gateway\"] is not None:\n                if ip[\"auto_gateway\"]:\n                    ifcfg[\"DEFROUTE\"] = \"yes\"\n                else:\n                    ifcfg[\"DEFROUTE\"] = \"no\"\n\n            if ip[\"route_metric4\"] is not None and ip[\"route_metric4\"] >= 0:\n                ifcfg[\"METRIC\"] = str(ip[\"route_metric4\"])\n\n            route4 = []\n            route6 = []\n            for r in ip[\"route\"]:\n                line = r[\"network\"] + \"/\" + str(r[\"prefix\"])\n                if r[\"gateway\"]:\n                    line += \" via \" + r[\"gateway\"]\n                if connection[\"interface_name\"]:\n                    line += \" dev \" + connection[\"interface_name\"]\n                else:\n                    warn_fcn(\n                        \"The connection {0} does not specify an interface name. \"\n                        \"Therefore, the route to {1}/{2} will be configured without \"\n                        \"the output device and the kernel will choose it \"\n                        \"automatically which might result in an unwanted device being \"\n                        \"used. To avoid this, specify `interface_name` in the \"\n                        \"connection appropriately.\".format(\n                            connection[\"name\"], r[\"network\"], r[\"prefix\"]\n                        ),\n                    )\n                if r[\"metric\"] != -1:\n                    line += \" metric \" + str(r[\"metric\"])\n\n                if r[\"family\"] == socket.AF_INET:\n                    route4.append(line)\n                else:\n                    route6.append(line)\n\n            route4_file = cls._ifcfg_route_merge(\n                route4,\n                ip[\"route_append_only\"] and content_current,\n                content_current[\"route\"] if content_current else None,\n            )\n            route6_file = cls._ifcfg_route_merge(\n                route6,\n                ip[\"route_append_only\"] and content_current,\n                content_current[\"route6\"] if content_current else None,\n            )\n\n        if ip[\"rule_append_only\"] and content_current:\n            rule4_file = content_current[\"rule\"]\n            rule6_file = content_current[\"rule6\"]\n\n        for key in list(ifcfg.keys()):\n            v = ifcfg[key]\n            if v is None:\n                del ifcfg[key]\n                continue\n            if isinstance(v, bool):\n                ifcfg[key] = \"yes\" if v else \"no\"\n\n        return {\n            \"ifcfg\": ifcfg,\n            \"keys\": keys_file,\n            \"route\": route4_file,\n            \"route6\": route6_file,\n            \"rule\": rule4_file,\n            \"rule6\": rule6_file,\n        }\n\n    @classmethod\n    def ifcfg_parse_line(cls, line):\n        r1 = getattr(cls, \"_re_parse_line1\", None)\n        if r1 is None:\n            r1 = re.compile(\"^[ \\t]*([a-zA-Z_][a-zA-Z_0-9]*)=(.*)$\")\n            cls._re_parse_line1 = r1\n            cls._shlex = shlex\n        m = r1.match(line)\n        if not m:\n            return None\n        key = m.group(1)\n        val = m.group(2)\n        val = val.rstrip()\n\n        # shlex isn't up to the task of parsing shell. Whatever,\n        # we can only parse shell to a certain degree and this is\n        # good enough for now.\n        try:\n            c = list(cls._shlex.split(val, comments=True, posix=True))\n        except Exception:\n            return None\n        if len(c) != 1:\n            return None\n        return (key, c[0])\n\n    @classmethod\n    def ifcfg_parse(cls, content):\n        if content is None:\n            return None\n        ifcfg = {}\n        for line in content.splitlines():\n            val = cls.ifcfg_parse_line(line)\n            if val:\n                ifcfg[val[0]] = val[1]\n        return ifcfg\n\n    @classmethod\n    def content_from_dict(cls, ifcfg_all, file_type=None, header=None):\n        content = {}\n        for file_type in cls._file_types(file_type):\n            h = ifcfg_all[file_type]\n            if file_type == \"ifcfg\":\n                if header is not None:\n                    s = header + \"\\n\"\n                else:\n                    s = \"\"\n                for key in sorted(h.keys()):\n                    value = h[key]\n                    if not cls.KeyValid(key):\n                        raise MyError(\"invalid ifcfg key %s\" % (key))\n                    if value is not None:\n                        s += key + \"=\" + cls.ValueEscape(value) + \"\\n\"\n                content[file_type] = s\n            else:\n                content[file_type] = h\n\n        return content\n\n    @classmethod\n    def content_to_dict(cls, content, file_type=None):\n        ifcfg_all = {}\n        for file_type in cls._file_types(file_type):\n            ifcfg_all[file_type] = cls.ifcfg_parse(content[file_type])\n        return ifcfg_all\n\n    @classmethod\n    def content_from_file(cls, name, file_type=None):\n        \"\"\"\n        Return dictionary with all file contents for an initscripts profile\n        \"\"\"\n        content = {}\n        for file_type in cls._file_types(file_type):\n            path = cls.ifcfg_path(name, file_type)\n            try:\n                with open(path, \"r\") as content_file:\n                    i_content = content_file.read()\n            except Exception:\n                i_content = None\n            content[file_type] = i_content\n        return content\n\n    @classmethod\n    def content_to_file(cls, name, content, file_type=None):\n        for file_type in cls._file_types(file_type):\n            path = cls.ifcfg_path(name, file_type)\n            h = content[file_type]\n            if h is None:\n                try:\n                    os.unlink(path)\n                except OSError as e:\n                    if e.errno != errno.ENOENT:\n                        raise\n            else:\n                with open(path, \"w\") as text_file:\n                    text_file.write(h)\n\n    @classmethod\n    def connection_seems_active(cls, name, run_env):\n        # we don't know whether a ifcfg file is currently active,\n        # and we also don't know which.\n        #\n        # Do a very basic guess based on whether the interface\n        # is in operstate \"up\".\n        #\n        # But first we need to find the interface name. Do\n        # some naive parsing and check for DEVICE setting.\n        content = cls.content_from_file(name, \"ifcfg\")\n        if content[\"ifcfg\"] is not None:\n            content = cls.ifcfg_parse(content[\"ifcfg\"])\n        else:\n            content = {}\n        if \"DEVICE\" not in content:\n            return None\n        path = \"/sys/class/net/\" + content[\"DEVICE\"] + \"/operstate\"\n        try:\n            with open(path, \"r\") as content_file:\n                i_content = str(content_file.read())\n        except Exception:\n            return None\n\n        if i_content.strip() != \"up\":\n            # For the active bonding/bridge connection, when all the port connection\n            # profiles are brought down firstly, then the operstate of the controller\n            # device will change into \"down\" automatically, which denotes missing the\n            # carrier for the controller device. However, the connection for the\n            # controller device stays active in such a situation.\n            try:\n                _unused_, out, _ignored_ = run_env.run_command(\n                    [\"ip\", \"address\", \"show\", content[\"DEVICE\"]],\n                    \"utf-8\",\n                )\n            except Exception:\n                return None\n            if \"inet\" in out:\n                if out.count(\"inet\") == 1 and \"inet6 fe80\" in out:\n                    return False\n                else:\n                    return True\n            else:\n                return False\n\n        return True\n\n\n###############################################################################\n\n\nclass NMUtil:\n    def __init__(self, nmclient=None):\n        if nmclient is None:\n            nmclient = Util.NM().Client.new(None)\n        self.nmclient = nmclient\n\n    def setting_ip_config_get_routes(self, s_ip):\n        if s_ip is not None:\n            for i in range(0, s_ip.get_num_routes()):\n                yield s_ip.get_route(i)\n\n    def connection_ensure_setting(self, connection, setting_type):\n        setting = connection.get_setting(setting_type)\n        if not setting:\n            setting = setting_type()\n            connection.add_setting(setting)\n        return setting\n\n    def device_is_controller_type(self, dev):\n        if dev:\n            NM = Util.NM()\n            GObject = Util.GObject()\n            if (\n                GObject.type_is_a(dev, NM.DeviceBond)\n                or GObject.type_is_a(dev, NM.DeviceBridge)\n                or GObject.type_is_a(dev, NM.DeviceTeam)\n            ):\n                return True\n        return False\n\n    def active_connection_list(self, connections=None, black_list=None):\n        active_cons = self.nmclient.get_active_connections()\n        if connections:\n            connections = set(connections)\n            active_cons = [\n                ac for ac in active_cons if ac.get_connection() in connections\n            ]\n        if black_list:\n            active_cons = [ac for ac in active_cons if ac not in black_list]\n        return list(active_cons)\n\n    def connection_list(\n        self,\n        name=None,\n        uuid=None,\n        black_list=None,\n        black_list_names=None,\n        black_list_uuids=None,\n    ):\n        cons = self.nmclient.get_connections()\n        if name is not None:\n            cons = [c for c in cons if c.get_id() == name]\n        if uuid is not None:\n            cons = [c for c in cons if c.get_uuid() == uuid]\n\n        if black_list:\n            cons = [c for c in cons if c not in black_list]\n        if black_list_uuids:\n            cons = [c for c in cons if c.get_uuid() not in black_list_uuids]\n        if black_list_names:\n            cons = [c for c in cons if c.get_id() not in black_list_names]\n\n        cons = list(cons)\n\n        def _cmp(a, b):\n            s_a = a.get_setting_connection()\n            s_b = b.get_setting_connection()\n            if not s_a and not s_b:\n                return 0\n            if not s_a:\n                return 1\n            if not s_b:\n                return -1\n            t_a = s_a.get_timestamp()\n            t_b = s_b.get_timestamp()\n            if t_a == t_b:\n                return 0\n            if t_a <= 0:\n                return 1\n            if t_b <= 0:\n                return -1\n            return cmp(t_a, t_b)\n\n        if Util.PY3:\n            # functools.cmp_to_key does not exist in Python 2.6\n            cons.sort(key=functools.cmp_to_key(_cmp))\n        else:\n            cons.sort(cmp=_cmp)\n        return cons\n\n    def connection_compare(\n        self, con_a, con_b, normalize_a=False, normalize_b=False, compare_flags=None\n    ):\n        NM = Util.NM()\n\n        if normalize_a:\n            con_a = NM.SimpleConnection.new_clone(con_a)\n            try:\n                con_a.normalize()\n            except Exception:\n                pass\n        if normalize_b:\n            con_b = NM.SimpleConnection.new_clone(con_b)\n            try:\n                con_b.normalize()\n            except Exception:\n                pass\n        if compare_flags is None:\n            compare_flags = NM.SettingCompareFlags.IGNORE_TIMESTAMP\n\n        return con_a.compare(con_b, compare_flags)\n\n    def connection_is_active(self, con):\n        NM = Util.NM()\n        for ac in self.active_connection_list(connections=[con]):\n            if (\n                ac.get_state() >= NM.ActiveConnectionState.ACTIVATING\n                and ac.get_state() <= NM.ActiveConnectionState.ACTIVATED\n            ):\n                return True\n        return False\n\n    def connection_create(self, connections, idx, connection_current=None):\n        NM = Util.NM()\n\n        connection = connections[idx]\n\n        con = NM.SimpleConnection.new()\n        s_con = self.connection_ensure_setting(con, NM.SettingConnection)\n\n        s_con.set_property(NM.SETTING_CONNECTION_ID, connection[\"name\"])\n        s_con.set_property(NM.SETTING_CONNECTION_UUID, connection[\"nm.uuid\"])\n        s_con.set_property(NM.SETTING_CONNECTION_AUTOCONNECT, connection[\"autoconnect\"])\n        s_con.set_property(\n            NM.SETTING_CONNECTION_AUTOCONNECT_RETRIES, connection[\"autoconnect_retries\"]\n        )\n        s_con.set_property(\n            NM.SETTING_CONNECTION_INTERFACE_NAME, connection[\"interface_name\"]\n        )\n\n        if connection[\"type\"] == \"ethernet\":\n            s_con.set_property(\n                NM.SETTING_CONNECTION_TYPE, NM.SETTING_WIRED_SETTING_NAME\n            )\n            s_wired = self.connection_ensure_setting(con, NM.SettingWired)\n            s_wired.set_property(NM.SETTING_WIRED_MAC_ADDRESS, connection[\"mac\"])\n        elif connection[\"type\"] == \"infiniband\":\n            s_con.set_property(\n                NM.SETTING_CONNECTION_TYPE, NM.SETTING_INFINIBAND_SETTING_NAME\n            )\n            s_infiniband = self.connection_ensure_setting(con, NM.SettingInfiniband)\n            s_infiniband.set_property(\n                NM.SETTING_INFINIBAND_MAC_ADDRESS, connection[\"mac\"]\n            )\n            s_infiniband.set_property(\n                NM.SETTING_INFINIBAND_TRANSPORT_MODE,\n                connection[\"infiniband\"][\"transport_mode\"],\n            )\n            if connection[\"infiniband\"][\"p_key\"] is not None:\n                s_infiniband.set_property(\n                    NM.SETTING_INFINIBAND_P_KEY, connection[\"infiniband\"][\"p_key\"]\n                )\n                if connection[\"parent\"]:\n                    s_infiniband.set_property(\n                        NM.SETTING_INFINIBAND_PARENT,\n                        ArgUtil.connection_find_controller(\n                            connection[\"parent\"], connections, idx\n                        ),\n                    )\n        elif connection[\"type\"] == \"bridge\":\n            s_con.set_property(\n                NM.SETTING_CONNECTION_TYPE, NM.SETTING_BRIDGE_SETTING_NAME\n            )\n            s_bridge = self.connection_ensure_setting(con, NM.SettingBridge)\n            s_bridge.set_property(NM.SETTING_BRIDGE_STP, False)\n        elif connection[\"type\"] == \"bond\":\n            s_con.set_property(NM.SETTING_CONNECTION_TYPE, NM.SETTING_BOND_SETTING_NAME)\n            s_bond = self.connection_ensure_setting(con, NM.SettingBond)\n            s_bond.add_option(\"mode\", connection[\"bond\"][\"mode\"])\n            for option, value in connection[\"bond\"].items():\n                if value is None:\n                    continue\n                if option in [\"all_ports_active\", \"use_carrier\", \"tlb_dynamic_lb\"]:\n                    value = int(value)\n                if option in [\"all_ports_active\", \"packets_per_port\"]:\n                    # wokeignore:rule=slave\n                    option = option.replace(\"port\", \"slave\")\n                s_bond.add_option(option, str(value))\n        elif connection[\"type\"] == \"team\":\n            s_con.set_property(NM.SETTING_CONNECTION_TYPE, NM.SETTING_TEAM_SETTING_NAME)\n        # wokeignore:rule=dummy\n        elif connection[\"type\"] == \"dummy\":\n            s_con.set_property(\n                # wokeignore:rule=dummy\n                NM.SETTING_CONNECTION_TYPE,\n                NM.SETTING_DUMMY_SETTING_NAME,\n            )\n        elif connection[\"type\"] == \"vlan\":\n            s_con.set_property(NM.SETTING_CONNECTION_TYPE, NM.SETTING_VLAN_SETTING_NAME)\n            s_vlan = self.connection_ensure_setting(con, NM.SettingVlan)\n            s_vlan.set_property(NM.SETTING_VLAN_ID, connection[\"vlan\"][\"id\"])\n            s_vlan.set_property(\n                NM.SETTING_VLAN_PARENT,\n                ArgUtil.connection_find_controller_uuid(\n                    connection[\"parent\"], connections, idx\n                ),\n            )\n        elif connection[\"type\"] == \"macvlan\":\n            s_con.set_property(\n                NM.SETTING_CONNECTION_TYPE, NM.SETTING_MACVLAN_SETTING_NAME\n            )\n            # convert mode name to a number (which is actually expected by nm)\n            mode = connection[\"macvlan\"][\"mode\"]\n            try:\n                mode_id = int(getattr(NM.SettingMacvlanMode, mode.upper()))\n            except AttributeError:\n                raise MyError(\"Macvlan mode '%s' is not recognized\" % (mode))\n            s_macvlan = self.connection_ensure_setting(con, NM.SettingMacvlan)\n            s_macvlan.set_property(NM.SETTING_MACVLAN_MODE, mode_id)\n            s_macvlan.set_property(\n                NM.SETTING_MACVLAN_PROMISCUOUS, connection[\"macvlan\"][\"promiscuous\"]\n            )\n            s_macvlan.set_property(NM.SETTING_MACVLAN_TAP, connection[\"macvlan\"][\"tap\"])\n            s_macvlan.set_property(\n                NM.SETTING_MACVLAN_PARENT,\n                ArgUtil.connection_find_controller(\n                    connection[\"parent\"], connections, idx\n                ),\n            )\n        elif connection[\"type\"] == \"wireless\":\n            s_con.set_property(\n                NM.SETTING_CONNECTION_TYPE, NM.SETTING_WIRELESS_SETTING_NAME\n            )\n            s_wireless = self.connection_ensure_setting(con, NM.SettingWireless)\n            s_wireless.set_property(\n                NM.SETTING_WIRELESS_SSID,\n                Util.GLib().Bytes.new(connection[\"wireless\"][\"ssid\"].encode(\"utf-8\")),\n            )\n\n            s_wireless_sec = self.connection_ensure_setting(\n                con, NM.SettingWirelessSecurity\n            )\n            s_wireless_sec.set_property(\n                NM.SETTING_WIRELESS_SECURITY_KEY_MGMT,\n                connection[\"wireless\"][\"key_mgmt\"],\n            )\n\n            if (\n                connection[\"wireless\"][\"key_mgmt\"] == \"wpa-psk\"\n                or connection[\"wireless\"][\"key_mgmt\"] == \"sae\"\n            ):\n                s_wireless_sec.set_property(\n                    NM.SETTING_WIRELESS_SECURITY_PSK, connection[\"wireless\"][\"password\"]\n                )\n        else:\n            raise MyError(\"unsupported type %s\" % (connection[\"type\"]))\n\n        if connection[\"cloned_mac\"] != \"default\":\n            if connection[\"type\"] == \"wireless\":\n                s_wireless = self.connection_ensure_setting(con, NM.SettingWireless)\n                s_wireless.set_property(\n                    NM.SETTING_WIRELESS_CLONED_MAC_ADDRESS, connection[\"cloned_mac\"]\n                )\n            else:\n                s_wired = self.connection_ensure_setting(con, NM.SettingWired)\n                s_wired.set_property(\n                    NM.SETTING_WIRED_CLONED_MAC_ADDRESS, connection[\"cloned_mac\"]\n                )\n\n        if \"ethernet\" in connection:\n            if connection[\"ethernet\"][\"autoneg\"] is not None:\n                s_wired = self.connection_ensure_setting(con, NM.SettingWired)\n                s_wired.set_property(\n                    NM.SETTING_WIRED_AUTO_NEGOTIATE, connection[\"ethernet\"][\"autoneg\"]\n                )\n                s_wired.set_property(\n                    NM.SETTING_WIRED_DUPLEX, connection[\"ethernet\"][\"duplex\"]\n                )\n                s_wired.set_property(\n                    NM.SETTING_WIRED_SPEED, connection[\"ethernet\"][\"speed\"]\n                )\n\n        if hasattr(NM, \"SettingEthtool\"):\n            s_ethtool = self.connection_ensure_setting(con, NM.SettingEthtool)\n\n            for feature, setting in connection[\"ethtool\"][\"features\"].items():\n                nm_feature = nm_provider.get_nm_ethtool_feature(feature)\n\n                if setting is None:\n                    if not nm_feature:\n                        continue\n                    val = NM.Ternary.DEFAULT\n                elif setting:\n                    val = NM.Ternary.TRUE\n                else:\n                    val = NM.Ternary.FALSE\n                if not hasattr(s_ethtool, \"option_set\"):\n                    s_ethtool.set_feature(nm_feature, val)\n                elif val == NM.Ternary.DEFAULT:\n                    s_ethtool.option_set(nm_feature, None)\n                else:\n                    s_ethtool.option_set_boolean(nm_feature, val)\n\n            for coalesce, setting in connection[\"ethtool\"][\"coalesce\"].items():\n                nm_coalesce = nm_provider.get_nm_ethtool_coalesce(coalesce)\n\n                if nm_coalesce:\n                    if setting is None:\n                        s_ethtool.option_set(nm_coalesce, None)\n                    else:\n                        s_ethtool.option_set_uint32(nm_coalesce, int(setting))\n            for ring, setting in connection[\"ethtool\"][\"ring\"].items():\n                nm_ring = nm_provider.get_nm_ethtool_ring(ring)\n\n                if nm_ring:\n                    if setting is None:\n                        s_ethtool.option_set(nm_ring, None)\n                    else:\n                        s_ethtool.option_set_uint32(nm_ring, setting)\n\n            # * When users did not specify any ethtool configuration, this module\n            #   will generate an default `NM.SettingEthtool` object and pass it to\n            #   NetworkManager. But NetworkManager cannot serialize this when using the\n            #   ifcfg plugin but treats this as no `NM.SettingEthtool` object.\n            # * The following `NM.SimpleConnection.compare()` will therefore identify a\n            #   difference in the configuration.\n            # * To workaround this, remove the default NM.SettingEthtool object.\n            if s_ethtool.compare(NM.SettingEthtool.new(), NM.SettingCompareFlags.EXACT):\n                con.remove_setting(NM.SettingEthtool)\n\n        if connection[\"mtu\"]:\n            if connection[\"type\"] == \"infiniband\":\n                s_infiniband = self.connection_ensure_setting(con, NM.SettingInfiniband)\n                s_infiniband.set_property(NM.SETTING_INFINIBAND_MTU, connection[\"mtu\"])\n            else:\n                s_wired = self.connection_ensure_setting(con, NM.SettingWired)\n                s_wired.set_property(NM.SETTING_WIRED_MTU, connection[\"mtu\"])\n\n        if connection[\"controller\"] is not None:\n            s_con.set_property(\n                # wokeignore:rule=slave\n                NM.SETTING_CONNECTION_SLAVE_TYPE,\n                connection[\"port_type\"],\n            )\n            s_con.set_property(\n                # wokeignore:rule=master\n                NM.SETTING_CONNECTION_MASTER,\n                ArgUtil.connection_find_controller_uuid(\n                    connection[\"controller\"], connections, idx\n                ),\n            )\n        else:\n            if connection[\"zone\"]:\n                s_con.set_property(NM.SETTING_CONNECTION_ZONE, connection[\"zone\"])\n\n            ip = connection[\"ip\"]\n\n            s_ip4 = self.connection_ensure_setting(con, NM.SettingIP4Config)\n            s_ip6 = self.connection_ensure_setting(con, NM.SettingIP6Config)\n\n            s_ip4.set_property(NM.SETTING_IP_CONFIG_METHOD, \"auto\")\n            s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, \"auto\")\n\n            addrs4 = [a for a in ip[\"address\"] if a[\"family\"] == socket.AF_INET]\n            addrs6 = [a for a in ip[\"address\"] if a[\"family\"] == socket.AF_INET6]\n\n            is_ipv4_configured = False\n            if ip[\"dhcp4\"]:\n                s_ip4.set_property(NM.SETTING_IP_CONFIG_METHOD, \"auto\")\n                s_ip4.set_property(\n                    NM.SETTING_IP_CONFIG_DHCP_SEND_HOSTNAME,\n                    ip[\"dhcp4_send_hostname\"] is not False,\n                )\n                is_ipv4_configured = True\n            elif addrs4:\n                s_ip4.set_property(NM.SETTING_IP_CONFIG_METHOD, \"manual\")\n                is_ipv4_configured = True\n            else:\n                s_ip4.set_property(NM.SETTING_IP_CONFIG_METHOD, \"disabled\")\n            for a in addrs4:\n                s_ip4.add_address(\n                    NM.IPAddress.new(a[\"family\"], a[\"address\"], a[\"prefix\"])\n                )\n            if ip[\"gateway4\"] is not None:\n                s_ip4.set_property(NM.SETTING_IP_CONFIG_GATEWAY, ip[\"gateway4\"])\n            if ip[\"route_metric4\"] is not None and ip[\"route_metric4\"] >= 0:\n                s_ip4.set_property(\n                    NM.SETTING_IP_CONFIG_ROUTE_METRIC, ip[\"route_metric4\"]\n                )\n            for nameserver in ip[\"dns\"]:\n                if nameserver[\"family\"] == socket.AF_INET:\n                    s_ip4.add_dns(nameserver[\"address\"])\n            # NetworkManager only allows to configure `ipv4.dns-search` setting when\n            # IPv4 is enabled\n            if is_ipv4_configured:\n                for search_domain in ip[\"dns_search\"]:\n                    s_ip4.add_dns_search(search_domain)\n            # NetworkManager ifcfg plguin will discard empty dns option which\n            # cause follow up NM.Connection.compare() raise false alarm\n            # Use False here to ask NetworkManager remove dns option completely instead\n            # of keeping an empty list\n            s_ip4.clear_dns_options(False)\n            for option in ip[\"dns_options\"]:\n                s_ip4.add_dns_option(option)\n            if ip[\"dns_priority\"] is not None:\n                s_ip4.set_property(\n                    NM.SETTING_IP_CONFIG_DNS_PRIORITY, ip[\"dns_priority\"]\n                )\n\n            is_ipv6_configured = False\n            if ip[\"ipv6_disabled\"]:\n                s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, \"disabled\")\n            elif ip[\"auto6\"]:\n                s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, \"auto\")\n                is_ipv6_configured = True\n            elif addrs6:\n                s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, \"manual\")\n                is_ipv6_configured = True\n            else:\n                # we should not set \"ipv6.method=ignore\". \"ignore\" is a legacy mode\n                # and not really useful. Instead, we should set \"link-local\" here.\n                #\n                # But that fix is a change in behavior for the role, so it needs special\n                # care.\n                s_ip6.set_property(NM.SETTING_IP_CONFIG_METHOD, \"ignore\")\n\n            for a in addrs6:\n                s_ip6.add_address(\n                    NM.IPAddress.new(a[\"family\"], a[\"address\"], a[\"prefix\"])\n                )\n            if ip[\"gateway6\"] is not None:\n                s_ip6.set_property(NM.SETTING_IP_CONFIG_GATEWAY, ip[\"gateway6\"])\n\n            # Mapping of wait_ip values to the may-fail settings for IPv4 and IPv6\n            may_fail_mapping = {\n                \"any\": (True, True),\n                \"ipv4\": (False, True),\n                \"ipv6\": (True, False),\n                \"ipv4+ipv6\": (False, False),\n            }\n\n            may_fail_ipv4, may_fail_ipv6 = may_fail_mapping.get(\n                ip[\"wait_ip\"], (True, True)\n            )\n\n            s_ip4.set_property(NM.SETTING_IP_CONFIG_MAY_FAIL, may_fail_ipv4)\n            s_ip6.set_property(NM.SETTING_IP_CONFIG_MAY_FAIL, may_fail_ipv6)\n\n            if ip[\"route_metric6\"] is not None and ip[\"route_metric6\"] >= 0:\n                s_ip6.set_property(\n                    NM.SETTING_IP_CONFIG_ROUTE_METRIC, ip[\"route_metric6\"]\n                )\n\n            if ip[\"auto_gateway\"] is not None:\n                if ip[\"auto_gateway\"]:\n                    s_ip6.set_property(NM.SETTING_IP_CONFIG_NEVER_DEFAULT, False)\n                    s_ip4.set_property(NM.SETTING_IP_CONFIG_NEVER_DEFAULT, False)\n                else:\n                    s_ip6.set_property(NM.SETTING_IP_CONFIG_NEVER_DEFAULT, True)\n                    s_ip4.set_property(NM.SETTING_IP_CONFIG_NEVER_DEFAULT, True)\n\n            s_ip4.set_property(\n                NM.SETTING_IP_CONFIG_IGNORE_AUTO_DNS, bool(ip[\"ipv4_ignore_auto_dns\"])\n            )\n            s_ip6.set_property(\n                NM.SETTING_IP_CONFIG_IGNORE_AUTO_DNS, bool(ip[\"ipv6_ignore_auto_dns\"])\n            )\n\n            for nameserver in ip[\"dns\"]:\n                if nameserver[\"family\"] == socket.AF_INET6:\n                    s_ip6.add_dns(nameserver[\"address\"])\n            # NetworkManager only allows to configure `ipv6.dns-search` setting when\n            # IPv6 is enabled\n            if is_ipv6_configured:\n                for search_domain in ip[\"dns_search\"]:\n                    s_ip6.add_dns_search(search_domain)\n            # NetworkManager ifcfg plguin will discard empty dns option which\n            # cause follow up NM.Connection.compare() raise false alarm\n            # Use False here to ask NetworkManager remove dns option completely instead\n            # of keeping an empty list\n            s_ip6.clear_dns_options(False)\n            for option in ip[\"dns_options\"]:\n                s_ip6.add_dns_option(option)\n            if ip[\"dns_priority\"] is not None:\n                s_ip6.set_property(\n                    NM.SETTING_IP_CONFIG_DNS_PRIORITY, ip[\"dns_priority\"]\n                )\n\n            if ip[\"route_append_only\"] and connection_current:\n                for r in self.setting_ip_config_get_routes(\n                    connection_current.get_setting(NM.SettingIP4Config)\n                ):\n                    s_ip4.add_route(r)\n                for r in self.setting_ip_config_get_routes(\n                    connection_current.get_setting(NM.SettingIP6Config)\n                ):\n                    s_ip6.add_route(r)\n            for r in ip[\"route\"]:\n                new_route = NM.IPRoute.new(\n                    r[\"family\"], r[\"network\"], r[\"prefix\"], r[\"gateway\"], r[\"metric\"]\n                )\n                if r[\"type\"]:\n                    NM.IPRoute.set_attribute(\n                        new_route, \"type\", Util.GLib().Variant(\"s\", r[\"type\"])\n                    )\n                if r[\"table\"]:\n                    NM.IPRoute.set_attribute(\n                        new_route, \"table\", Util.GLib().Variant.new_uint32(r[\"table\"])\n                    )\n                if r[\"src\"]:\n                    NM.IPRoute.set_attribute(\n                        new_route, \"src\", Util.GLib().Variant.new_string(r[\"src\"])\n                    )\n\n                if r[\"family\"] == socket.AF_INET:\n                    s_ip4.add_route(new_route)\n                else:\n                    s_ip6.add_route(new_route)\n            for routing_rule in ip[\"routing_rule\"]:\n                nm_routing_rule = NM.IPRoutingRule.new(routing_rule[\"family\"])\n                NM.IPRoutingRule.set_priority(nm_routing_rule, routing_rule[\"priority\"])\n\n                # check the link below for the enum value of supported action\n                # https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/fib_rules.h?id=f443e374ae131c168a065ea1748feac6b2e76613#n88\n                action_ids = {\n                    \"to-table\": 1,\n                    \"blackhole\": 6,\n                    \"prohibit\": 7,\n                    \"unreachable\": 8,\n                }\n                NM.IPRoutingRule.set_action(\n                    nm_routing_rule, action_ids[routing_rule[\"action\"]]\n                )\n                if routing_rule[\"dport\"]:\n                    NM.IPRoutingRule.set_destination_port(\n                        nm_routing_rule,\n                        routing_rule[\"dport\"][0],\n                        routing_rule[\"dport\"][1],\n                    )\n                # In NM, when user specifies `from 0.0.0.0/0`` or `from ::/0` in a\n                # routing rule, NM treats it as if the `from` setting is not specified.\n                if routing_rule[\"from\"] and routing_rule[\"from\"][\"prefix\"]:\n                    NM.IPRoutingRule.set_from(\n                        nm_routing_rule,\n                        routing_rule[\"from\"][\"address\"],\n                        routing_rule[\"from\"][\"prefix\"],\n                    )\n                if routing_rule[\"fwmark\"]:\n                    NM.IPRoutingRule.set_fwmark(\n                        nm_routing_rule, routing_rule[\"fwmark\"], routing_rule[\"fwmask\"]\n                    )\n                if routing_rule[\"iif\"]:\n                    NM.IPRoutingRule.set_iifname(nm_routing_rule, routing_rule[\"iif\"])\n                NM.IPRoutingRule.set_invert(nm_routing_rule, routing_rule[\"invert\"])\n                if routing_rule[\"ipproto\"]:\n                    NM.IPRoutingRule.set_ipproto(\n                        nm_routing_rule, routing_rule[\"ipproto\"]\n                    )\n                if routing_rule[\"oif\"]:\n                    NM.IPRoutingRule.set_oifname(nm_routing_rule, routing_rule[\"oif\"])\n                if routing_rule[\"sport\"]:\n                    NM.IPRoutingRule.set_source_port(\n                        nm_routing_rule,\n                        routing_rule[\"sport\"][0],\n                        routing_rule[\"sport\"][1],\n                    )\n                if routing_rule[\"suppress_prefixlength\"] is not None:\n                    NM.IPRoutingRule.set_suppress_prefixlength(\n                        nm_routing_rule, routing_rule[\"suppress_prefixlength\"]\n                    )\n                if routing_rule[\"table\"]:\n                    NM.IPRoutingRule.set_table(nm_routing_rule, routing_rule[\"table\"])\n                # In NM, when user specifies `to 0.0.0.0/0`` or `to ::/0` in a\n                # routing rule, NM treats it as if the `to` setting is not specified.\n                if routing_rule[\"to\"] and routing_rule[\"to\"][\"prefix\"]:\n                    NM.IPRoutingRule.set_to(\n                        nm_routing_rule,\n                        routing_rule[\"to\"][\"address\"],\n                        routing_rule[\"to\"][\"prefix\"],\n                    )\n                if routing_rule[\"tos\"]:\n                    NM.IPRoutingRule.set_tos(nm_routing_rule, routing_rule[\"tos\"])\n                if routing_rule[\"uid\"]:\n                    NM.IPRoutingRule.set_uid_range(\n                        nm_routing_rule,\n                        routing_rule[\"uid\"][0],\n                        routing_rule[\"uid\"][1],\n                    )\n                if routing_rule[\"family\"] == socket.AF_INET:\n                    s_ip4.add_routing_rule(nm_routing_rule)\n                else:\n                    s_ip6.add_routing_rule(nm_routing_rule)\n\n        if connection[\"ieee802_1x\"]:\n            s_8021x = self.connection_ensure_setting(con, NM.Setting8021x)\n\n            s_8021x.set_property(\n                NM.SETTING_802_1X_EAP, [connection[\"ieee802_1x\"][\"eap\"]]\n            )\n            s_8021x.set_property(\n                NM.SETTING_802_1X_IDENTITY, connection[\"ieee802_1x\"][\"identity\"]\n            )\n\n            s_8021x.set_property(\n                NM.SETTING_802_1X_PRIVATE_KEY,\n                Util.path_to_glib_bytes(connection[\"ieee802_1x\"][\"private_key\"]),\n            )\n\n            if connection[\"ieee802_1x\"][\"private_key_password\"]:\n                s_8021x.set_property(\n                    NM.SETTING_802_1X_PRIVATE_KEY_PASSWORD,\n                    connection[\"ieee802_1x\"][\"private_key_password\"],\n                )\n\n            if connection[\"ieee802_1x\"][\"private_key_password_flags\"]:\n                s_8021x.set_secret_flags(\n                    NM.SETTING_802_1X_PRIVATE_KEY_PASSWORD,\n                    Util.NM().SettingSecretFlags(\n                        Util.convert_passwd_flags_nm(\n                            connection[\"ieee802_1x\"][\"private_key_password_flags\"]\n                        ),\n                    ),\n                )\n\n            s_8021x.set_property(\n                NM.SETTING_802_1X_CLIENT_CERT,\n                Util.path_to_glib_bytes(connection[\"ieee802_1x\"][\"client_cert\"]),\n            )\n\n            if connection[\"ieee802_1x\"][\"ca_cert\"]:\n                s_8021x.set_property(\n                    NM.SETTING_802_1X_CA_CERT,\n                    Util.path_to_glib_bytes(connection[\"ieee802_1x\"][\"ca_cert\"]),\n                )\n\n            if connection[\"ieee802_1x\"][\"ca_path\"]:\n                s_8021x.set_property(\n                    NM.SETTING_802_1X_CA_PATH,\n                    connection[\"ieee802_1x\"][\"ca_path\"],\n                )\n\n            s_8021x.set_property(\n                NM.SETTING_802_1X_SYSTEM_CA_CERTS,\n                connection[\"ieee802_1x\"][\"system_ca_certs\"],\n            )\n\n            if connection[\"ieee802_1x\"][\"domain_suffix_match\"]:\n                s_8021x.set_property(\n                    NM.SETTING_802_1X_DOMAIN_SUFFIX_MATCH,\n                    connection[\"ieee802_1x\"][\"domain_suffix_match\"],\n                )\n        if connection[\"match\"]:\n            s_match = self.connection_ensure_setting(con, NM.SettingMatch)\n            s_match.set_property(NM.SETTING_MATCH_PATH, connection[\"match\"][\"path\"])\n        try:\n            con.normalize()\n        except Exception as e:\n            raise MyError(\"created connection failed to normalize: %s\" % (e))\n        return con\n\n    def connection_add(self, con, timeout=10):\n        def add_cb(client, result, cb_args):\n            con = None\n            try:\n                con = client.add_connection_finish(result)\n            except Exception as e:\n                if Util.error_is_cancelled(e):\n                    return\n                cb_args[\"error\"] = str(e)\n            cb_args[\"con\"] = con\n            Util.GMainLoop().quit()\n\n        cancellable = Util.create_cancellable()\n        cb_args = {}\n        self.nmclient.add_connection_async(con, True, cancellable, add_cb, cb_args)\n        if not Util.GMainLoop_run(timeout):\n            cancellable.cancel()\n            raise MyError(\"failure to add connection: %s\" % (\"timeout\"))\n        if not cb_args.get(\"con\", None):\n            raise MyError(\n                \"failure to add connection: %s\"\n                % (cb_args.get(\"error\", \"unknown error\"))\n            )\n        return cb_args[\"con\"]\n\n    def connection_update(self, con, con_new, timeout=10):\n        con.replace_settings_from_connection(con_new)\n\n        def update_cb(connection, result, cb_args):\n            success = False\n            try:\n                success = connection.commit_changes_finish(result)\n            except Exception as e:\n                if Util.error_is_cancelled(e):\n                    return\n                cb_args[\"error\"] = str(e)\n            cb_args[\"success\"] = success\n            Util.GMainLoop().quit()\n\n        cancellable = Util.create_cancellable()\n        cb_args = {}\n        con.commit_changes_async(True, cancellable, update_cb, cb_args)\n        if not Util.GMainLoop_run(timeout):\n            cancellable.cancel()\n            raise MyError(\"failure to update connection: %s\" % (\"timeout\"))\n        if not cb_args.get(\"success\", False):\n            raise MyError(\n                \"failure to update connection: %s\"\n                % (cb_args.get(\"error\", \"unknown error\"))\n            )\n        return True\n\n    def create_checkpoint(self, timeout):\n        \"\"\"Create a new checkpoint\"\"\"\n        checkpoint = Util.call_async_method(\n            self.nmclient,\n            \"checkpoint_create\",\n            [\n                [],  # devices, empty list is all devices\n                timeout,\n                Util.NM().CheckpointCreateFlags.DELETE_NEW_CONNECTIONS\n                | Util.NM().CheckpointCreateFlags.DISCONNECT_NEW_DEVICES,\n            ],\n        )\n\n        if checkpoint:\n            return checkpoint.get_path()\n        return None\n\n    def destroy_checkpoint(self, path):\n        \"\"\"Destroy the specified checkpoint\"\"\"\n        Util.call_async_method(self.nmclient, \"checkpoint_destroy\", [path])\n\n    def rollback_checkpoint(self, path):\n        \"\"\"Rollback the specified checkpoint\"\"\"\n        Util.call_async_method(\n            self.nmclient,\n            \"checkpoint_rollback\",\n            [path],\n            mainloop_timeout=DEFAULT_ACTIVATION_TIMEOUT,\n        )\n\n    def connection_activate(self, connection, timeout=15, wait_time=None):\n        already_retried = False\n\n        while True:\n\n            def activate_cb(client, result, cb_args):\n                active_connection = None\n                try:\n                    active_connection = client.activate_connection_finish(result)\n                except Exception as e:\n                    if Util.error_is_cancelled(e):\n                        return\n                    cb_args[\"error\"] = str(e)\n                cb_args[\"active_connection\"] = active_connection\n                Util.GMainLoop().quit()\n\n            cancellable = Util.create_cancellable()\n            cb_args = {}\n            self.nmclient.activate_connection_async(\n                connection, None, None, cancellable, activate_cb, cb_args\n            )\n            if not Util.GMainLoop_run(timeout):\n                cancellable.cancel()\n                raise MyError(\"failure to activate connection: %s\" % (\"timeout\"))\n\n            if cb_args.get(\"active_connection\", None):\n                ac = cb_args[\"active_connection\"]\n                self.connection_activate_wait(ac, wait_time)\n                return ac\n\n            # there is a bug in NetworkManager, that the connection\n            # might already be in the process of activating. In that\n            # case, NM would reject the activation request with\n            # \"Connection '$PROFILE' is not available on the device $DEV\n            # at this time.\"\n            #\n            # Try to work around it by waiting a bit and retrying.\n            if already_retried:\n                raise MyError(\n                    \"failure to activate connection: %s\"\n                    % (cb_args.get(\"error\", \"unknown error\"))\n                )\n\n            already_retried = True\n\n            time.sleep(1)\n\n    def connection_activate_wait(self, ac, wait_time):\n\n        if not wait_time:\n            return\n\n        NM = Util.NM()\n\n        state = ac.get_state()\n        if state == NM.ActiveConnectionState.ACTIVATED:\n            return\n        if state != NM.ActiveConnectionState.ACTIVATING:\n            raise MyError(\"activation is in unexpected state '%s'\" % (state))\n\n        def check_activated(ac, dev):\n            ac_state = ac.get_state()\n\n            # the state reason was for active-connection was introduced\n            # in NM 1.8 API. Work around for older library version.\n            try:\n                ac_reason = ac.get_state_reason()\n            except AttributeError:\n                ac_reason = None\n\n            if dev:\n                dev_state = dev.get_state()\n\n            if ac_state == NM.ActiveConnectionState.ACTIVATING:\n                if (\n                    self.device_is_controller_type(dev)\n                    and dev_state >= NM.DeviceState.IP_CONFIG\n                    and dev_state <= NM.DeviceState.ACTIVATED\n                ):\n                    # controller connections qualify as activated once they\n                    # reach IP-Config state. That is because they may\n                    # wait for port devices to attach\n                    return True, None\n                # fall through\n            elif ac_state == NM.ActiveConnectionState.ACTIVATED:\n                return True, None\n            elif ac_state == NM.ActiveConnectionState.DEACTIVATED:\n                if (\n                    not dev\n                    or (\n                        ac_reason is not None\n                        and ac_reason\n                        != NM.ActiveConnectionStateReason.DEVICE_DISCONNECTED\n                    )\n                    or dev.get_active_connection() is not ac\n                ):\n                    return (\n                        True,\n                        (\n                            (ac_reason.value_nick if ac_reason else None)\n                            or \"unknown reason\"\n                        ),\n                    )\n                # the state of the active connection is not very helpful.\n                # see if the device-state is better.\n                if (\n                    dev_state <= NM.DeviceState.DISCONNECTED\n                    or dev_state > NM.DeviceState.DEACTIVATING\n                ):\n                    return (\n                        True,\n                        (\n                            dev.get_state_reason().value_nick\n                            or (ac_reason.value_nick if ac_reason else None)\n                            or \"unknown reason\"\n                        ),\n                    )\n                # fall through, wait longer for a better state reason.\n\n            # wait longer.\n            return False, None\n\n        dev = Util.first(ac.get_devices())\n\n        complete, failure_reason = check_activated(ac, dev)\n\n        if not complete:\n\n            cb_out = []\n\n            def check_activated_cb():\n                complete, failure_reason = check_activated(ac, dev)\n                if complete:\n                    cb_out.append(failure_reason)\n                    Util.GMainLoop().quit()\n\n            try:\n                # 'state-changed' signal is 1.8 API. Workaround for\n                # older libnm API version\n                ac_id = ac.connect(\n                    \"state-changed\", lambda source, state, reason: check_activated_cb()\n                )\n            except Exception:\n                ac_id = None\n            if dev:\n                dev_id = dev.connect(\n                    \"notify::state\", lambda source, pspec: check_activated_cb()\n                )\n\n            try:\n                if not Util.GMainLoop_run(wait_time):\n                    raise MyError(\"connection not fully activated after timeout\")\n            finally:\n                if dev:\n                    dev.handler_disconnect(dev_id)\n                if ac_id is not None:\n                    ac.handler_disconnect(ac_id)\n\n            failure_reason = cb_out[0]\n\n        if failure_reason:\n            raise MyError(\"connection not activated: %s\" % (failure_reason))\n\n    def reapply(self, device, connection=None):\n        version_id = 0\n        flags = 0\n        return Util.call_async_method(\n            device, \"reapply\", [connection, version_id, flags]\n        )\n\n\n###############################################################################\n\n\nclass RunEnvironment(object):\n    def __init__(self):\n        self._check_mode = None\n\n    @property\n    def ifcfg_header(self):\n        return None\n\n    def log(\n        self,\n        connections,\n        idx,\n        severity,\n        msg,\n        is_changed=False,\n        ignore_errors=False,\n        warn_traceback=False,\n        force_fail=False,\n    ):\n        raise NotImplementedError()\n\n    def run_command(self, argv, encoding=None):\n        raise NotImplementedError()\n\n    def _check_mode_changed(self, old_check_mode, new_check_mode, connections):\n        raise NotImplementedError()\n\n    def check_mode_set(self, check_mode, connections=None):\n        c = self._check_mode\n        self._check_mode = check_mode\n        if not (\n            (c is None and check_mode in [CheckMode.PREPARE])\n            or (\n                c == CheckMode.PREPARE\n                and check_mode in [CheckMode.PRE_RUN, CheckMode.DRY_RUN]\n            )\n            or (c == CheckMode.PRE_RUN and check_mode in [CheckMode.REAL_RUN])\n            or (c == CheckMode.REAL_RUN and check_mode in [CheckMode.DONE])\n            or (c == CheckMode.DRY_RUN and check_mode in [CheckMode.DONE])\n        ):\n            raise AssertionError(\n                \"updating check_mode value from {0} into {1} is incorrect\".format(\n                    c, check_mode\n                )\n            )\n        self._check_mode_changed(c, check_mode, connections)\n\n\nclass RunEnvironmentAnsible(RunEnvironment):\n\n    ARGS = {\n        \"ignore_errors\": {\"required\": False, \"default\": False, \"type\": \"bool\"},\n        \"force_state_change\": {\"required\": False, \"default\": False, \"type\": \"bool\"},\n        \"provider\": {\"required\": True, \"type\": \"str\"},\n        \"connections\": {\n            \"required\": False,\n            \"default\": [],\n            \"type\": \"list\",\n            \"elements\": \"dict\",\n        },\n        \"__header\": {\"required\": True, \"type\": \"str\"},\n        \"__debug_flags\": {\"required\": False, \"default\": \"\", \"type\": \"str\"},\n    }\n\n    def __init__(self):\n        RunEnvironment.__init__(self)\n        self._run_results = []\n        self._log_idx = 0\n        self.on_failure = None\n        module = AnsibleModule(argument_spec=self.ARGS, supports_check_mode=True)\n        self.module = module\n\n    @property\n    def ifcfg_header(self):\n        return self.module.params[\"__header\"]\n\n    def run_command(self, argv, encoding=None):\n        return self.module.run_command(argv, encoding=encoding)\n\n    def _run_results_push(self, n_connections):\n        c = []\n        for cc in range(0, n_connections + 1):\n            c.append({\"log\": []})\n        self._run_results.append(c)\n\n    @property\n    def run_results(self):\n        return self._run_results[-1]\n\n    def _check_mode_changed(self, old_check_mode, new_check_mode, connections):\n        if old_check_mode is None:\n            self._run_results_push(len(connections))\n        elif old_check_mode == CheckMode.PREPARE:\n            self._run_results_push(len(self.run_results) - 1)\n        elif old_check_mode == CheckMode.PRE_RUN:\n            # when switching from RRE_RUN to REAL_RUN, we drop the run-results\n            # we just collected and reset to empty. The PRE_RUN succeeded.\n            n_connections = len(self.run_results) - 1\n            del self._run_results[-1]\n            self._run_results_push(n_connections)\n\n    def log(\n        self,\n        connections,\n        idx,\n        severity,\n        msg,\n        is_changed=False,\n        ignore_errors=False,\n        warn_traceback=False,\n        force_fail=False,\n    ):\n        if not idx >= -1:\n            raise AssertionError(\"idx {0} is less than -1\".format(idx))\n        self._log_idx += 1\n        self.run_results[idx][\"log\"].append((severity, msg, self._log_idx))\n        if severity == LogLevel.ERROR:\n            if force_fail or not ignore_errors:\n                self.fail_json(\n                    connections,\n                    \"error: %s\" % (msg),\n                    changed=is_changed,\n                    warn_traceback=warn_traceback,\n                )\n\n    def _complete_kwargs_loglines(self, rr, connections, idx):\n        if idx == len(connections):\n            prefix = \"#\"\n        else:\n            c = connections[idx]\n            prefix = \"#%s, state:%s persistent_state:%s\" % (\n                idx,\n                c[\"state\"],\n                c[\"persistent_state\"],\n            )\n            prefix = prefix + (\", '%s'\" % (c[\"name\"]))\n        for severity, msg, idx in rr[\"log\"]:\n            yield (\n                idx,\n                \"[%03d] %s %s: %s\" % (idx, LogLevel.fmt(severity), prefix, msg),\n                severity,\n            )\n\n    def _complete_kwargs(self, connections, kwargs, traceback_msg=None, fail=False):\n        warning_logs = kwargs.get(\"warnings\", [])\n        debug_logs = []\n        loglines = []\n        for res in self._run_results:\n            for idx, rr in enumerate(res):\n                loglines.extend(self._complete_kwargs_loglines(rr, connections, idx))\n        loglines.sort(key=lambda log_line: log_line[0])\n        for idx, log_line, severity in loglines:\n            debug_logs.append(log_line)\n            if fail:\n                warning_logs.append(log_line)\n            elif severity >= LogLevel.WARN:\n                warning_logs.append(log_line)\n        if traceback_msg is not None:\n            warning_logs.append(traceback_msg)\n        kwargs[\"warnings\"] = warning_logs\n        stderr = \"\\n\".join(debug_logs) + \"\\n\"\n        kwargs[\"stderr\"] = stderr\n        kwargs[\"_invocation\"] = {\"module_args\": self.module.params}\n        return kwargs\n\n    def exit_json(self, connections, changed=False, **kwargs):\n        kwargs[\"changed\"] = changed\n        self.module.exit_json(**self._complete_kwargs(connections, kwargs))\n\n    def fail_json(\n        self, connections, msg, changed=False, warn_traceback=False, **kwargs\n    ):\n        if self.on_failure:\n            self.on_failure()\n\n        traceback_msg = None\n        if warn_traceback:\n            traceback_msg = \"exception: %s\" % (traceback.format_exc())\n        kwargs[\"msg\"] = msg\n        kwargs[\"changed\"] = changed\n        self.module.fail_json(\n            **self._complete_kwargs(connections, kwargs, traceback_msg, fail=True)\n        )\n\n\n###############################################################################\n\n\nclass NmLogHandler(logging.Handler):\n    def __init__(self, log_func, idx):\n        self._log = log_func\n        self._idx = idx\n        super(NmLogHandler, self).__init__()\n\n    def filter(self, record):\n        return True\n\n    def emit(self, record):\n        self._log(\n            self._idx, LogLevel.from_logging_level(record.levelno), record.getMessage()\n        )\n\n\nclass Cmd(object):\n    def __init__(\n        self,\n        run_env,\n        connections_unvalidated,\n        connection_validator,\n        is_check_mode=False,\n        ignore_errors=False,\n        force_state_change=False,\n        debug_flags=\"\",\n    ):\n        self.run_env = run_env\n        self.validate_one_type = None\n        self._connections_unvalidated = connections_unvalidated\n        self._connection_validator = connection_validator\n        self._is_check_mode = is_check_mode\n        self._ignore_errors = Util.boolean(ignore_errors)\n        self._force_state_change = Util.boolean(force_state_change)\n\n        self._connections = None\n        self._connections_data = None\n        self._check_mode = CheckMode.PREPARE\n        self._is_changed_modified_system = False\n        self._debug_flags = debug_flags\n\n    def run_command(self, argv, encoding=None):\n        return self.run_env.run_command(argv, encoding=encoding)\n\n    @property\n    def is_changed_modified_system(self):\n        return self._is_changed_modified_system\n\n    @property\n    def connections(self):\n        c = self._connections\n        if c is None:\n            try:\n                c = self._connection_validator.validate(self._connections_unvalidated)\n            except ValidationError as e:\n                raise MyError(\"configuration error: %s\" % (e))\n            self._connections = c\n        return c\n\n    @property\n    def connections_data(self):\n        c = self._connections_data\n        if c is None:\n            if self.check_mode not in [\n                CheckMode.DRY_RUN,\n                CheckMode.PRE_RUN,\n                CheckMode.REAL_RUN,\n            ]:\n                raise AssertionError(\n                    \"invalid value {0} for self.check_mode\".format(self.check_mode)\n                )\n            c = [{\"changed\": False}] * len(self.connections)\n            self._connections_data = c\n        return c\n\n    def connections_data_reset(self):\n        for c in self.connections_data:\n            c[\"changed\"] = False\n\n    def connections_data_set_changed(self, idx, changed=True):\n        if self._check_mode not in [\n            CheckMode.PRE_RUN,\n            CheckMode.DRY_RUN,\n            CheckMode.REAL_RUN,\n        ]:\n            raise AssertionError(\n                \"invalid value {0} for self._check_mode\".format(self._check_mode)\n            )\n        if not changed:\n            return\n        self.connections_data[idx][\"changed\"] = changed\n        if changed and self._check_mode in [CheckMode.DRY_RUN, CheckMode.REAL_RUN]:\n            # we only do actual modifications during the REAL_RUN step.\n            # And as a special exception, during the DRY_RUN step, which\n            # is like REAL_RUN, except not not actually changing anything.\n            self._is_changed_modified_system = True\n\n    def log_debug(self, idx, msg):\n        self.log(idx, LogLevel.DEBUG, msg)\n\n    def log_info(self, idx, msg):\n        self.log(idx, LogLevel.INFO, msg)\n\n    def log_warn(self, idx, msg):\n        self.log(idx, LogLevel.WARN, msg)\n\n    def log_error(self, idx, msg, warn_traceback=False, force_fail=False):\n        self.log(\n            idx,\n            LogLevel.ERROR,\n            msg,\n            warn_traceback=warn_traceback,\n            force_fail=force_fail,\n        )\n\n    def log_fatal(self, idx, msg, warn_traceback=False):\n        self.log(\n            idx, LogLevel.ERROR, msg, warn_traceback=warn_traceback, force_fail=True\n        )\n\n    def log(self, idx, severity, msg, warn_traceback=False, force_fail=False):\n        self.run_env.log(\n            self.connections,\n            idx,\n            severity,\n            msg,\n            is_changed=self.is_changed_modified_system,\n            ignore_errors=self.connection_ignore_errors(self.connections[idx]),\n            warn_traceback=warn_traceback,\n            force_fail=force_fail,\n        )\n\n    @staticmethod\n    def create(provider, **kwargs):\n        if provider == \"nm\":\n            return Cmd_nm(**kwargs)\n        elif provider == \"initscripts\":\n            return Cmd_initscripts(**kwargs)\n        raise MyError(\"unsupported provider %s\" % (provider))\n\n    def connection_force_state_change(self, connection):\n        v = connection[\"force_state_change\"]\n        if v is not None:\n            return v\n        return self._force_state_change\n\n    def connection_ignore_errors(self, connection):\n        v = connection[\"ignore_errors\"]\n        if v is not None:\n            return v\n        return self._ignore_errors\n\n    def connection_modified_earlier(self, idx):\n        # for index @idx, check if any of the previous profiles [0..idx[\n        # modify the connection.\n\n        con = self.connections[idx]\n        if con[\"state\"] not in [\"up\", \"down\"]:\n            raise AssertionError(\n                \"connection state {0} not 'up' or 'down'\".format(con[\"state\"])\n            )\n\n        # also check, if the current profile is 'up' with a 'type' (which\n        # possibly modifies the connection as well)\n        if (\n            con[\"state\"] == \"up\"\n            and \"type\" in con\n            and self.connections_data[idx][\"changed\"]\n        ):\n            return True\n\n        for i in reversed(range(idx)):\n            c = self.connections[i]\n            if \"name\" not in c:\n                continue\n            if c[\"name\"] != con[\"name\"]:\n                continue\n\n            c_state = c[\"state\"]\n            c_pstate = c[\"persistent_state\"]\n            if c_state == \"up\" and \"type\" not in c:\n                pass\n            elif c_state == \"down\":\n                return True\n            elif c_pstate == \"absent\":\n                return True\n            elif c_state == \"up\" or c_pstate == \"present\":\n                if self.connections_data[idx][\"changed\"]:\n                    return True\n\n        return False\n\n    @property\n    def check_mode(self):\n        return self._check_mode\n\n    def check_mode_next(self):\n        if self._check_mode == CheckMode.PREPARE:\n            if self._is_check_mode:\n                c = CheckMode.DRY_RUN\n            else:\n                c = CheckMode.PRE_RUN\n        elif self.check_mode == CheckMode.PRE_RUN:\n            self.connections_data_reset()\n            c = CheckMode.REAL_RUN\n        elif self._check_mode != CheckMode.DONE:\n            c = CheckMode.DONE\n        else:\n            raise AssertionError(\n                \"invalid value {0} for self._check_mode\".format(self._check_mode)\n            )\n        self._check_mode = c\n        self.run_env.check_mode_set(c)\n        return c\n\n    def run(self):\n        self.run_env.check_mode_set(CheckMode.PREPARE, self.connections)\n        for idx, connection in enumerate(self.connections):\n            try:\n                self._connection_validator.validate_connection_one(\n                    self.validate_one_type, self.connections, idx\n                )\n            except ValidationError as e:\n                self.log_fatal(idx, str(e))\n        self.run_prepare()\n        while self.check_mode_next() != CheckMode.DONE:\n            if self.check_mode == CheckMode.REAL_RUN:\n                self.start_transaction()\n\n            # Reasoning for this order:\n            # For down/up profiles might need to be present, so do this first\n            # Put profile down before removing it if necessary\n            # To ensure up does not depend on anything that might be removed,\n            # do it last\n            for action in (\"present\", \"down\", \"absent\", \"up\"):\n                for idx, connection in enumerate(self.connections):\n                    try:\n                        if action in connection[\"actions\"]:\n                            if action == \"absent\":\n                                self.run_action_absent(idx)\n                            elif action == \"present\":\n                                self.run_action_present(idx)\n                            elif action == \"up\":\n                                self.run_action_up(idx)\n                            elif action == \"down\":\n                                self.run_action_down(idx)\n                    except Exception as error:\n                        if self.check_mode == CheckMode.REAL_RUN:\n                            self.rollback_transaction(idx, action, error)\n                        raise\n\n            if self.check_mode == CheckMode.REAL_RUN:\n                self.finish_transaction()\n\n    def run_prepare(self):\n        for idx, connection in enumerate(self.connections):\n            if \"type\" in connection and connection[\"check_iface_exists\"]:\n                # when the profile is tied to a certain interface via\n                # 'interface_name' and 'mac', check that such an interface\n                # exists.\n                #\n                # This check has many flaws, as we don't check whether the\n                # existing interface has the right device type. Also, there is\n                # some ambiguity between the current MAC address and the\n                # permanent MAC address.\n                li_ifname = None\n                if connection[\"interface_name\"]:\n                    li_ifname = SysUtil.link_info_find(connection[\"interface_name\"])\n                    if not li_ifname:\n                        if connection[\"type\"] == \"ethernet\":\n                            self.log_fatal(\n                                idx,\n                                \"profile specifies interface_name '%s' but no such \"\n                                \"interface exists\" % (connection[\"interface_name\"]),\n                            )\n                        elif connection[\"type\"] == \"infiniband\":\n                            if connection[\"infiniband\"][\"p_key\"] is None:\n                                self.log_fatal(\n                                    idx,\n                                    \"profile specifies interface_name '%s' but no such \"\n                                    \"infiniband interface exists\"\n                                    % (connection[\"interface_name\"]),\n                                )\n                    elif connection[\"mac\"]:\n                        perm_address = li_ifname.get(\"perm-address\", NULL_MAC)\n                        current_address = li_ifname.get(\"address\", NULL_MAC)\n                        bond_port_perm_hwaddr = li_ifname.get(\n                            \"bond-port-perm-hwaddr\", NULL_MAC\n                        )\n                        if (perm_address not in (NULL_MAC, connection[\"mac\"])) or (\n                            perm_address == NULL_MAC\n                            and connection[\"mac\"]\n                            not in (current_address, bond_port_perm_hwaddr)\n                        ):\n                            self.log_fatal(\n                                idx,\n                                \"profile specifies interface_name '%s' and mac '%s' \"\n                                \"but no such interface exists\"\n                                % (connection[\"interface_name\"], connection[\"mac\"]),\n                            )\n\n    def start_transaction(self):\n        \"\"\"Hook before making changes\"\"\"\n\n    def finish_transaction(self):\n        \"\"\"Hook for after all changes where made successfully\"\"\"\n\n    def rollback_transaction(self, idx, action, error):\n        \"\"\"Hook if configuring a profile results in an error\n\n        :param idx: Index of the connection that triggered the error\n        :param action: Action that triggered the error\n        :param error: The error\n\n        :type idx: int\n        :type action: str\n        :type error: Exception\n\n        \"\"\"\n        self.log_warn(\n            idx, \"failure: %s (%s) [[%s]]\" % (error, action, traceback.format_exc())\n        )\n\n    def on_failure(self):\n        \"\"\"Hook to do any cleanup on failure before exiting\"\"\"\n        pass\n\n    def run_action_absent(self, idx):\n        raise NotImplementedError()\n\n    def run_action_present(self, idx):\n        raise NotImplementedError()\n\n    def run_action_down(self, idx):\n        raise NotImplementedError()\n\n    def run_action_up(self, idx):\n        raise NotImplementedError()\n\n\n###############################################################################\n\n\ndef version_to_tuple(version):\n    \"\"\"\n    Translates the dot-separated version string to a tuple\n\n    :param version: The dot-separated version string\n    :return: the version tuple\n    \"\"\"\n    version_list = version.split(\".\")\n    version_tuple = tuple(map(int, version_list))\n    return version_tuple\n\n\nclass Cmd_nm(Cmd):\n    def __init__(self, **kwargs):\n        Cmd.__init__(self, **kwargs)\n        self._nmutil = None\n        self.validate_one_type = ArgValidator_ListConnections.VALIDATE_ONE_MODE_NM\n        self._checkpoint = None\n        # pylint: disable=import-error, no-name-in-module\n        from ansible.module_utils.network_lsr.nm import provider  # noqa:E501\n\n        # pylint: enable=import-error, no-name-in-module\n\n        self._nm_provider = provider.NetworkManagerProvider()\n\n    @property\n    def nmutil(self):\n        if self._nmutil is None:\n            try:\n                nmclient = Util.NM().Client.new(None)\n            except Exception as e:\n                raise MyError(\"failure loading libnm library: %s\" % (e))\n            self._nmutil = NMUtil(nmclient)\n        return self._nmutil\n\n    def run_prepare(self):\n        Cmd.run_prepare(self)\n\n        names = {}\n        for idx, connection in enumerate(self.connections):\n            self._check_ethtool_setting_support(idx, connection)\n            if connection.get(\"ip\", {}):\n                for route in connection[\"ip\"][\"route\"]:\n                    if route[\"type\"]:\n                        # The special route type prohibit, blackhole and unreachable\n                        # are only supported in NM since version 1.36.0\n                        nm_client_version = self._nm_provider.get_client_version()\n                        if version_to_tuple(nm_client_version) < (1, 36, 0):\n                            self.log_fatal(\n                                idx,\n                                \"route type {0} is only supported in NM since 1.36.0 \"\n                                \"but the NM client version is {1}\".format(\n                                    route[\"type\"],\n                                    nm_client_version,\n                                ),\n                            )\n            name = connection[\"name\"]\n            if not name:\n                if not connection[\"persistent_state\"] == \"absent\":\n                    raise AssertionError(\n                        \"persistent_state must be 'absent' not {0} when there is no connection 'name'\".format(\n                            connection[\"persistent_state\"]\n                        )\n                    )\n                continue\n            if name in names:\n                exists = names[name][\"nm.exists\"]\n                uuid = names[name][\"nm.uuid\"]\n            else:\n                c = Util.first(self.nmutil.connection_list(name=name))\n\n                exists = c is not None\n                if c is not None:\n                    uuid = c.get_uuid()\n                else:\n                    uuid = Util.create_uuid()\n                names[name] = {\"nm.exists\": exists, \"nm.uuid\": uuid}\n            connection[\"nm.exists\"] = exists\n            connection[\"nm.uuid\"] = uuid\n\n    def start_transaction(self):\n        Cmd.start_transaction(self)\n        if \"disable-checkpoints\" in self._debug_flags:\n            pass\n        else:\n            self._checkpoint = self.nmutil.create_checkpoint(\n                len(self.connections) * DEFAULT_ACTIVATION_TIMEOUT\n            )\n\n        # On NetworkManger 1.18, If user switch from initscripts provider where\n        # NM_CONTROLLED=no defined in ifcfg-ethX file, NetworkManager daemon will treat\n        # that interface as strictly unmanaged, even the follow up deletion of\n        # ifcfg-ethX file cannot change the NetworManager's unmanaged state of this\n        # interface. This will prevent any follow up \"nm\" provider action on this\n        # interface.  To solve that, we instruct NetworkManager to reload the\n        # configuration.\n        if self._nm_provider.get_client_version().startswith(\"1.18.\"):\n            self._nm_provider.reload_configuration()\n\n    def rollback_transaction(self, idx, action, error):\n        Cmd.rollback_transaction(self, idx, action, error)\n        self.on_failure()\n\n    def finish_transaction(self):\n        Cmd.finish_transaction(self)\n        if self._checkpoint:\n            try:\n                self.nmutil.destroy_checkpoint(self._checkpoint)\n            finally:\n                self._checkpoint = None\n\n    def on_failure(self):\n        if self._checkpoint:\n            try:\n                self.nmutil.rollback_checkpoint(self._checkpoint)\n            finally:\n                self._checkpoint = None\n\n    def _check_ethtool_setting_support(self, idx, connection):\n        \"\"\"Check if SettingEthtool support is needed and available\n\n        If any ethtool setting is specified, the SettingEthtool\n        setting needs to be available. Also NM needs to know about each\n        specified setting. Do not check if NM knows about any defaults\n\n        \"\"\"\n        NM = Util.NM()\n\n        # If the profile is not completely specified, for example if only the\n        # runtime change is specified, the ethtool subtree might be missing.\n        # Then no checks are required.\n        if \"ethtool\" not in connection:\n            return\n\n        ethtool_dict = {\n            \"features\": nm_provider.get_nm_ethtool_feature,\n            \"coalesce\": nm_provider.get_nm_ethtool_coalesce,\n            \"ring\": nm_provider.get_nm_ethtool_ring,\n        }\n\n        for ethtool_key, nm_get_name_fcnt in ethtool_dict.items():\n            ethtool_settings = connection[\"ethtool\"][ethtool_key]\n            specified = dict(\n                [(k, v) for k, v in ethtool_settings.items() if v is not None]\n            )\n\n            if specified and not hasattr(NM, \"SettingEthtool\"):\n                self.log_fatal(\n                    idx, \"ethtool.%s specified but not supported by NM\", specified\n                )\n\n            for option in specified.keys():\n                nm_name = nm_get_name_fcnt(option)\n                if not nm_name:\n                    self.log_fatal(\n                        idx,\n                        \"ethtool %s setting %s specified \"\n                        \"but not supported by NM\" % (ethtool_key, option),\n                    )\n\n    def run_action_absent(self, idx):\n        name = self.connections[idx][\"name\"]\n        profile_uuids = set()\n\n        if name:\n            black_list_names = []\n        else:\n            # Delete all profiles except explicitly included\n            black_list_names = ArgUtil.connection_get_non_absent_names(self.connections)\n\n        for nm_profile in self._nm_provider.get_connections():\n            if name and nm_profile.get_id() != name:\n                continue\n            if nm_profile.get_id() not in black_list_names:\n                profile_uuids.add(nm_profile.get_uuid())\n\n        if not profile_uuids:\n            self.log_info(idx, \"no connection matches '%s' to delete\" % (name))\n            return\n\n        logger = logging.getLogger()\n        log_handler = NmLogHandler(self.log, idx)\n        logger.addHandler(log_handler)\n        timeout = self.connections[idx].get(\"wait\")\n        changed = False\n        for profile_uuid in profile_uuids:\n            changed |= self._nm_provider.volatilize_connection_by_uuid(\n                profile_uuid,\n                DEFAULT_TIMEOUT if timeout is None else timeout,\n                self.check_mode != CheckMode.REAL_RUN,\n            )\n        if changed:\n            self.connections_data_set_changed(idx)\n        logger.removeHandler(log_handler)\n\n    def run_action_present(self, idx):\n        connection = self.connections[idx]\n        con_cur = Util.first(\n            self.nmutil.connection_list(\n                name=connection[\"name\"], uuid=connection[\"nm.uuid\"]\n            )\n        )\n\n        if not connection.get(\"type\"):\n            # if the type is not specified, just check that the connection was\n            # found\n            if not con_cur:\n                self.log_error(\n                    idx, \"Connection not found on system and 'type' not specified\"\n                )\n            return\n\n        con_new = self.nmutil.connection_create(self.connections, idx, con_cur)\n        if con_cur is None:\n            self.log_info(\n                idx,\n                \"add connection %s, %s\" % (connection[\"name\"], connection[\"nm.uuid\"]),\n            )\n            self.connections_data_set_changed(idx)\n            if self.check_mode == CheckMode.REAL_RUN:\n                try:\n                    con_cur = self.nmutil.connection_add(con_new)\n                except MyError as e:\n                    self.log_error(idx, \"adding connection failed: %s\" % (e))\n        elif not self.nmutil.connection_compare(con_cur, con_new, normalize_a=True):\n            self.log_info(\n                idx, \"update connection %s, %s\" % (con_cur.get_id(), con_cur.get_uuid())\n            )\n            self.connections_data_set_changed(idx)\n            if self.check_mode == CheckMode.REAL_RUN:\n                try:\n                    self.nmutil.connection_update(con_cur, con_new)\n                except MyError as e:\n                    self.log_error(idx, \"updating connection failed: %s\" % (e))\n        else:\n            self.log_info(\n                idx,\n                \"connection %s, %s already up to date\"\n                % (con_cur.get_id(), con_cur.get_uuid()),\n            )\n\n        if (\n            self.check_mode == CheckMode.REAL_RUN\n            and connection[\"ieee802_1x\"] is not None\n            and connection[\"ieee802_1x\"].get(\"ca_path\")\n        ):\n            # It seems that NM on Fedora 31\n            # (NetworkManager-1.20.4-1.fc31.x86_64) does need some time so that\n            # the D-Bus information is actually up-to-date.\n            time.sleep(0.1)\n            Util.GMainLoop_iterate_all()\n            updated_connection = Util.first(\n                self.nmutil.connection_list(\n                    name=connection[\"name\"], uuid=connection[\"nm.uuid\"]\n                )\n            )\n            ca_path = updated_connection.get_setting_802_1x().props.ca_path\n            if not ca_path:\n                self.log_fatal(\n                    idx,\n                    \"ieee802_1x.ca_path specified but not supported by \"\n                    \"NetworkManager. Please update NetworkManager or use \"\n                    \"ieee802_1x.ca_cert.\",\n                )\n        if con_cur is not None:\n            self._remove_duplicate_profile(idx, con_cur, connection.get(\"timeout\"))\n\n    def _remove_duplicate_profile(self, idx, cur_nm_profile, timeout):\n        logger = logging.getLogger()\n        log_handler = NmLogHandler(self.log, idx)\n        logger.addHandler(log_handler)\n\n        for nm_profile in self._nm_provider.get_connections():\n            if (\n                nm_profile.get_id() == cur_nm_profile.get_id()\n                and nm_profile.get_uuid() != cur_nm_profile.get_uuid()\n            ):\n                if self.check_mode == CheckMode.REAL_RUN:\n                    self._nm_provider.volatilize_connection_by_uuid(\n                        uuid=nm_profile.get_uuid(),\n                        timeout=(DEFAULT_TIMEOUT if timeout is None else timeout),\n                        check_mode=True,\n                    )\n                self.connections_data_set_changed(idx)\n        logger.removeHandler(log_handler)\n\n    def run_action_up(self, idx):\n        connection = self.connections[idx]\n\n        con = Util.first(\n            self.nmutil.connection_list(\n                name=connection[\"name\"], uuid=connection[\"nm.uuid\"]\n            )\n        )\n        if not con:\n            if self.check_mode == CheckMode.REAL_RUN:\n                self.log_error(\n                    idx,\n                    \"up connection %s, %s failed: no connection\"\n                    % (connection[\"name\"], connection[\"nm.uuid\"]),\n                )\n            else:\n                self.log_info(\n                    idx,\n                    \"up connection %s, %s\"\n                    % (connection[\"name\"], connection[\"nm.uuid\"]),\n                )\n            return\n\n        is_active = self.nmutil.connection_is_active(con)\n        is_modified = self.connection_modified_earlier(idx)\n        force_state_change = self.connection_force_state_change(connection)\n\n        if is_active and not force_state_change and not is_modified:\n            self.log_info(\n                idx,\n                \"up connection %s, %s skipped because already active\"\n                % (con.get_id(), con.get_uuid()),\n            )\n            return\n\n        self.log_info(\n            idx,\n            \"up connection %s, %s (%s)\"\n            % (\n                con.get_id(),\n                con.get_uuid(),\n                (\n                    \"not-active\"\n                    if not is_active\n                    else \"is-modified\" if is_modified else \"force-state-change\"\n                ),\n            ),\n        )\n        self.connections_data_set_changed(idx)\n        if self.check_mode == CheckMode.REAL_RUN:\n            if self._try_reapply(idx, con):\n                return\n\n            try:\n                ac = self.nmutil.connection_activate(con)\n            except MyError as e:\n                self.log_error(idx, \"up connection failed: %s\" % (e))\n\n            wait_time = connection[\"wait\"]\n            if wait_time is None:\n                wait_time = DEFAULT_ACTIVATION_TIMEOUT\n\n            try:\n                self.nmutil.connection_activate_wait(ac, wait_time)\n            except MyError as e:\n                self.log_error(idx, \"up connection failed while waiting: %s\" % (e))\n\n    def _try_reapply(self, idx, con):\n        \"\"\"Try to reapply a connection\n\n        If there is exactly one active connection with the same UUID activated\n        on exactly one device, ask the device to reapply the connection.\n\n        :returns: `True`, when the connection was reapplied, `False` otherwise\n        :rtype: bool\n        \"\"\"\n        NM = Util.NM()\n\n        acons = list(self.nmutil.active_connection_list(connections=[con]))\n        if len(acons) != 1:\n            return False\n\n        active_connection = acons[0]\n        if active_connection.get_state() == NM.ActiveConnectionState.ACTIVATED:\n            devices = active_connection.get_devices()\n            if len(devices) == 1:\n                try:\n                    self.nmutil.reapply(devices[0])\n                    self.log_info(idx, \"connection reapplied\")\n                    return True\n                except MyError as error:\n                    self.log_info(idx, \"connection reapply failed: %s\" % (error))\n        return False\n\n    def run_action_down(self, idx):\n        connection = self.connections[idx]\n        logger = logging.getLogger()\n        log_handler = NmLogHandler(self.log, idx)\n        logger.addHandler(log_handler)\n        timeout = connection[\"wait\"]\n        if self._nm_provider.deactivate_connection(\n            connection[\"name\"],\n            10 if timeout is None else timeout,\n            self.check_mode != CheckMode.REAL_RUN,\n        ):\n            self.connections_data_set_changed(idx)\n        logger.removeHandler(log_handler)\n\n\n###############################################################################\n\n\nclass Cmd_initscripts(Cmd):\n    def __init__(self, **kwargs):\n        Cmd.__init__(self, **kwargs)\n        self.validate_one_type = (\n            ArgValidator_ListConnections.VALIDATE_ONE_MODE_INITSCRIPTS\n        )\n\n    def run_prepare(self):\n        Cmd.run_prepare(self)\n        for idx, connection in enumerate(self.connections):\n            if connection.get(\"type\") in [\"macvlan\"]:\n                self.log_fatal(\n                    idx,\n                    \"unsupported type %s for initscripts provider\"\n                    % (connection[\"type\"]),\n                )\n\n    def check_name(self, idx, name=None):\n        if name is None:\n            name = self.connections[idx][\"name\"]\n        try:\n            f = IfcfgUtil.ifcfg_path(name)\n        except MyError:\n            self.log_error(idx, \"invalid name %s for connection\" % (name))\n            return None\n        return f\n\n    def forget_nm_connection(self, path):\n        \"\"\"\n        Forget a NetworkManager connection by loading the path of the deleted\n        profile. This inverts the effect of loading a profile with\n        `NM_CONTROLLED=no` earlier, which made NetworkManager ignore the\n        device.\n\n        This does not use the Python libnm bindings because they might not be\n        present on the system, since the module is currently operating for the\n        initscripts provider. If it fails, assume that NetworkManager is not\n        present and did not save any state about the corresponding interface.\n        \"\"\"\n        try:\n            subprocess.call(\n                [\n                    \"busctl\",\n                    \"--system\",\n                    \"call\",\n                    \"org.freedesktop.NetworkManager\",\n                    \"/org/freedesktop/NetworkManager/Settings\",\n                    \"org.freedesktop.NetworkManager.Settings\",\n                    \"LoadConnections\",\n                    \"as\",\n                    \"1\",\n                    path,\n                ]\n            )\n        except Exception:\n            pass\n\n    def run_action_absent(self, idx):\n        n = self.connections[idx][\"name\"]\n        name = n\n        if not name:\n            names = []\n            black_list_names = ArgUtil.connection_get_non_absent_names(self.connections)\n            for f in os.listdir(\"/etc/sysconfig/network-scripts\"):\n                if not f.startswith(\"ifcfg-\"):\n                    continue\n                name = f[6:]\n                if name in black_list_names:\n                    continue\n                if name == \"lo\":\n                    continue\n                names.append(name)\n        else:\n            if not self.check_name(idx):\n                return\n            names = [name]\n\n        changed = False\n        for name in names:\n            for path in IfcfgUtil.ifcfg_paths(name):\n                if not os.path.isfile(path):\n                    continue\n                changed = True\n                self.log_info(idx, \"delete ifcfg-rh file '%s'\" % (path))\n                self.connections_data_set_changed(idx)\n                if self.check_mode == CheckMode.REAL_RUN:\n                    try:\n                        os.unlink(path)\n                        self.forget_nm_connection(path)\n                    except Exception as e:\n                        self.log_error(\n                            idx, \"delete ifcfg-rh file '%s' failed: %s\" % (path, e)\n                        )\n\n        if not changed:\n            self.log_info(\n                idx,\n                \"delete ifcfg-rh files for %s (no files present)\"\n                % (\"'\" + n + \"'\" if n else \"*\"),\n            )\n\n    def run_action_present(self, idx):\n        if not self.check_name(idx):\n            return\n\n        connection = self.connections[idx]\n        name = connection[\"name\"]\n\n        old_content = IfcfgUtil.content_from_file(name)\n\n        if not connection.get(\"type\"):\n            # if the type is not specified, just check that the connection was\n            # found\n            if not old_content.get(\"ifcfg\"):\n                self.log_error(\n                    idx, \"Connection not found on system and 'type' not present\"\n                )\n            return\n\n        ifcfg_all = IfcfgUtil.ifcfg_create(\n            self.connections, idx, lambda msg: self.log_warn(idx, msg), old_content\n        )\n\n        new_content = IfcfgUtil.content_from_dict(\n            ifcfg_all, header=self.run_env.ifcfg_header\n        )\n\n        if old_content == new_content:\n            self.log_info(idx, \"ifcfg-rh profile '%s' already up to date\" % (name))\n            return\n\n        op = \"add\" if (old_content[\"ifcfg\"] is None) else \"update\"\n\n        self.log_info(idx, \"%s ifcfg-rh profile '%s'\" % (op, name))\n\n        self.connections_data_set_changed(idx)\n        if self.check_mode == CheckMode.REAL_RUN:\n            try:\n                IfcfgUtil.content_to_file(name, new_content)\n            except MyError as e:\n                self.log_error(\n                    idx, \"%s ifcfg-rh profile '%s' failed: %s\" % (op, name, e)\n                )\n\n    def _run_action_updown(self, idx, do_up):\n        if not self.check_name(idx):\n            return\n\n        connection = self.connections[idx]\n        name = connection[\"name\"]\n\n        if connection[\"wait\"] is not None:\n            # initscripts don't support wait, they always block until the ifup/ifdown\n            # command completes. Silently ignore the argument.\n            pass\n\n        path = IfcfgUtil.ifcfg_path(name)\n        if not os.path.isfile(path):\n            if (\n                self.check_mode == CheckMode.REAL_RUN\n                and connection.get(PERSISTENT_STATE) != ABSENT_STATE\n            ):\n                self.log_error(idx, \"ifcfg file '%s' does not exist\" % (path))\n            else:\n                if self.check_mode != CheckMode.REAL_RUN:\n                    in_checkmode = \" in check mode\"\n                else:\n                    in_checkmode = \"\"\n                self.log_info(\n                    idx, \"ifcfg file '%s' does not exist%s\" % (path, in_checkmode)\n                )\n            return\n\n        is_active = IfcfgUtil.connection_seems_active(name, self.run_env)\n        is_modified = self.connection_modified_earlier(idx)\n        force_state_change = self.connection_force_state_change(connection)\n\n        if do_up:\n            if is_active is True and not force_state_change and not is_modified:\n                self.log_info(\n                    idx, \"up connection %s skipped because already active\" % (name)\n                )\n                return\n\n            self.log_info(\n                idx,\n                \"up connection %s (%s)\"\n                % (\n                    name,\n                    (\n                        \"not-active\"\n                        if is_active is not True\n                        else \"is-modified\" if is_modified else \"force-state-change\"\n                    ),\n                ),\n            )\n            cmd = \"ifup\"\n        else:\n            if is_active is False and not force_state_change:\n                self.log_info(\n                    idx, \"down connection %s skipped because not active\" % (name)\n                )\n                return\n\n            self.log_info(\n                idx,\n                \"up connection %s (%s)\"\n                % (name, \"active\" if is_active is not False else \"force-state-change\"),\n            )\n            cmd = \"ifdown\"\n\n        self.connections_data_set_changed(idx)\n        if self.check_mode == CheckMode.REAL_RUN:\n            rc, out, err = self.run_env.run_command([cmd, name])\n            self.log_info(\n                idx,\n                \"call '%s %s': rc=%d, out='%s', err='%s'\" % (cmd, name, rc, out, err),\n            )\n            if rc != 0:\n                self.log_error(\n                    idx, \"call '%s %s' failed with exit status %d\" % (cmd, name, rc)\n                )\n\n    def run_action_up(self, idx):\n        self._run_action_updown(idx, True)\n\n    def run_action_down(self, idx):\n        self._run_action_updown(idx, False)\n\n\n###############################################################################\n\n\ndef main():\n    connections = None\n    cmd = None\n    run_env_ansible = RunEnvironmentAnsible()\n    try:\n        params = run_env_ansible.module.params\n        cmd = Cmd.create(\n            params[\"provider\"],\n            run_env=run_env_ansible,\n            connections_unvalidated=params[\"connections\"],\n            connection_validator=ArgValidator_ListConnections(),\n            is_check_mode=run_env_ansible.module.check_mode,\n            ignore_errors=params[\"ignore_errors\"],\n            force_state_change=params[\"force_state_change\"],\n            debug_flags=params[\"__debug_flags\"],\n        )\n        connections = cmd.connections\n        run_env_ansible.on_failure = cmd.on_failure\n        cmd.run()\n    except Exception as e:\n        run_env_ansible.fail_json(\n            connections,\n            \"fatal error: %s\" % (e),\n            changed=(cmd is not None and cmd.is_changed_modified_system),\n            warn_traceback=not isinstance(e, MyError),\n        )\n    run_env_ansible.exit_json(\n        connections, changed=(cmd is not None and cmd.is_changed_modified_system)\n    )\n\n\nif __name__ == \"__main__\":\n    main()",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_enhanced_compatibility_matrix:[17:543]\n==scripts.generate_enhanced_compatibility_matrix:[17:543]\nclass EnhancedCompatibilityMatrix:\n    def __init__(self, project_root=None):\n        if project_root is None:\n            self.project_root = self._detect_project_root()\n        else:\n            self.project_root = Path(project_root)\n\n        self.roles_dir = self.project_root / \"roles\"\n        self.molecule_dir = self.project_root / \"molecule\"\n        self.compatibility_data = {}\n\n    def _detect_project_root(self):\n        \"\"\"Detect project root by looking for key files in multiple locations\"\"\"\n        # Start with current working directory\n        current_dir = Path.cwd()\n\n        # Check current directory first\n        if self._is_project_root(current_dir):\n            return current_dir\n\n        # Check if we're in a subdirectory (like scripts/)\n        for parent in current_dir.parents:\n            if self._is_project_root(parent):\n                return parent\n\n        # Check common GitHub Actions paths\n        github_workspace = os.environ.get('GITHUB_WORKSPACE')\n        if github_workspace:\n            github_path = Path(github_workspace)\n            if self._is_project_root(github_path):\n                return github_path\n\n        # Check if we're in a nested GitHub Actions structure\n        if 'github' in str(current_dir).lower():\n            # Look for the actual project directory\n            for part in current_dir.parts:\n                if 'qubinode_kvmhost_setup_collection' in part:\n                    # Try to construct the path\n                    potential_root = Path('/'.join(current_dir.parts[:current_dir.parts.index(part)+1]))\n                    if self._is_project_root(potential_root):\n                        return potential_root\n\n        # Try to find the project based on the script location\n        script_path = Path(__file__).resolve()\n        script_parent = script_path.parent.parent  # Go up from scripts/ to project root\n        if self._is_project_root(script_parent):\n            return script_parent\n\n        # Look for common project locations\n        common_locations = [\n            Path.home() / \"qubinode_kvmhost_setup_collection\",\n            Path(\"/home/vpcuser/qubinode_kvmhost_setup_collection\"),\n            Path(\"/home/runner/work/qubinode_kvmhost_setup_collection/qubinode_kvmhost_setup_collection\"),\n        ]\n\n        for location in common_locations:\n            if self._is_project_root(location):\n                return location\n\n        # Fallback: return current directory and let the script handle missing roles\n        print(f\"Warning: Could not detect project root, using current directory: {current_dir}\")\n        return current_dir\n\n    def _is_project_root(self, path):\n        \"\"\"Check if a path looks like the project root\"\"\"\n        path = Path(path)\n\n        # Must have roles directory\n        if not (path / \"roles\").exists():\n            return False\n\n        # Should have at least one of these files\n        indicators = [\"galaxy.yml\", \"ansible.cfg\", \"pyproject.toml\", \"requirements.txt\"]\n        return any((path / indicator).exists() for indicator in indicators)\n\n    def detect_rhel_versions(self):\n        \"\"\"Detect supported RHEL versions from role tasks and Molecule scenarios\"\"\"\n        rhel_versions = set()\n\n        # Check if roles directory exists\n        if not self.roles_dir.exists():\n            print(f\"Warning: Roles directory not found at {self.roles_dir}\")\n            return [\"8\", \"9\"]  # Default fallback versions\n\n        # Check Molecule configurations for tested versions\n        if self.molecule_dir.exists():\n            for scenario_dir in self.molecule_dir.iterdir():\n                if scenario_dir.is_dir():\n                    molecule_yml = scenario_dir / \"molecule.yml\"\n                    if molecule_yml.exists():\n                        try:\n                            with open(molecule_yml, 'r') as f:\n                                molecule_config = yaml.safe_load(f)\n                                platforms = molecule_config.get('platforms', [])\n                                for platform in platforms:\n                                    image = platform.get('image', '')\n                                    if 'rockylinux' in image or 'almalinux' in image or 'ubi' in image:\n                                        if ':8' in image or 'rhel8' in image:\n                                            rhel_versions.add(\"8\")\n                                        elif ':9' in image or 'rhel9' in image:\n                                            rhel_versions.add(\"9\")\n                                        elif ':10' in image or 'rhel10' in image:\n                                            rhel_versions.add(\"10\")\n                        except Exception as e:\n                            print(f\"Warning: Could not read {molecule_yml}: {e}\")\n\n        # Fallback: check task files for version-specific logic\n        version_patterns = [\"rhel8\", \"rhel9\", \"rhel10\", \"el8\", \"el9\", \"el10\"]\n        try:\n            for role_dir in self.roles_dir.iterdir():\n                if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                    tasks_dir = role_dir / \"tasks\"\n                    if tasks_dir.exists():\n                        for task_file in tasks_dir.glob(\"*.yml\"):\n                            try:\n                                with open(task_file, 'r') as f:\n                                    content = f.read()\n                                for pattern in version_patterns:\n                                    if pattern in content.lower():\n                                        if \"rhel8\" in pattern or \"el8\" in pattern:\n                                            rhel_versions.add(\"8\")\n                                        elif \"rhel9\" in pattern or \"el9\" in pattern:\n                                            rhel_versions.add(\"9\")\n                                        elif \"rhel10\" in pattern or \"el10\" in pattern:\n                                            rhel_versions.add(\"10\")\n                            except Exception as e:\n                                print(f\"Warning: Could not read {task_file}: {e}\")\n        except Exception as e:\n            print(f\"Warning: Could not scan roles directory: {e}\")\n\n        # Default to supporting 8, 9, 10 if no specific versions found\n        if not rhel_versions:\n            rhel_versions = {\"8\", \"9\", \"10\"}\n\n        return sorted(list(rhel_versions))\n\n    def detect_container_compatibility(self):\n        \"\"\"Detect container compatibility features from recent enhancements\"\"\"\n        container_features = {\n            'advanced_container_detection': {\n                'implemented': False,\n                'criteria': [],\n                'description': 'Multi-criteria container environment detection'\n            },\n            'task_skipping': {\n                'implemented': False,\n                'skipped_tasks': [],\n                'description': 'Container-inappropriate task skipping'\n            },\n            'gpg_verification': {\n                'implemented': False,\n                'strategy': 'unknown',\n                'description': 'Dynamic GPG verification for container environments'\n            },\n            'molecule_testing': {\n                'implemented': False,\n                'scenarios': [],\n                'platforms': [],\n                'description': 'Container-based testing with Molecule'\n            }\n        }\n\n        # Check for advanced container detection in performance_optimization.yml\n        perf_opt_file = self.project_root / \"roles\" / \"kvmhost_setup\" / \"tasks\" / \"performance_optimization.yml\"\n        if perf_opt_file.exists():\n            try:\n                with open(perf_opt_file, 'r') as f:\n                    content = f.read()\n                    if 'is_container_environment' in content:\n                        container_features['advanced_container_detection']['implemented'] = True\n                        if 'ansible_virtualization_type in' in content:\n                            container_features['advanced_container_detection']['criteria'].append('virtualization_type')\n                        if 'ansible_env.container' in content:\n                            container_features['advanced_container_detection']['criteria'].append('environment_variables')\n                        if 'ansible_mounts' in content and 'overlay' in content:\n                            container_features['advanced_container_detection']['criteria'].append('filesystem_analysis')\n                        if 'ansible_selinux' in content and 'docker_t' in content:\n                            container_features['advanced_container_detection']['criteria'].append('selinux_context')\n\n                    # Count tasks with container guards\n                    guard_count = content.count('when: not is_container_environment')\n                    if guard_count > 0:\n                        container_features['task_skipping']['implemented'] = True\n                        container_features['task_skipping']['skipped_tasks'] = [f\"{guard_count} KVM-specific tasks\"]\n            except Exception as e:\n                print(f\"Warning: Could not analyze {perf_opt_file}: {e}\")\n\n        # Check for dynamic GPG verification in main.yml\n        main_file = self.project_root / \"roles\" / \"kvmhost_setup\" / \"tasks\" / \"main.yml\"\n        if main_file.exists():\n            try:\n                with open(main_file, 'r') as f:\n                    content = f.read()\n                    if 'disable_gpg_check' in content and 'container' in content:\n                        container_features['gpg_verification']['implemented'] = True\n                        container_features['gpg_verification']['strategy'] = 'dynamic_container_detection'\n            except Exception as e:\n                print(f\"Warning: Could not analyze {main_file}: {e}\")\n\n        # Check Molecule scenarios for container testing\n        if self.molecule_dir.exists():\n            scenarios = []\n            platforms = []\n            for scenario_dir in self.molecule_dir.iterdir():\n                if scenario_dir.is_dir():\n                    scenarios.append(scenario_dir.name)\n                    molecule_yml = scenario_dir / \"molecule.yml\"\n                    if molecule_yml.exists():\n                        try:\n                            with open(molecule_yml, 'r') as f:\n                                molecule_config = yaml.safe_load(f)\n                                for platform in molecule_config.get('platforms', []):\n                                    image = platform.get('image', '')\n                                    if image not in platforms:\n                                        platforms.append(image)\n                        except Exception as e:\n                            print(f\"Warning: Could not read {molecule_yml}: {e}\")\n\n            if scenarios:\n                container_features['molecule_testing']['implemented'] = True\n                container_features['molecule_testing']['scenarios'] = scenarios\n                container_features['molecule_testing']['platforms'] = platforms\n\n        return container_features\n\n    def analyze_role_features(self, role_name):\n        \"\"\"Analyze features and compatibility for a specific role\"\"\"\n        role_dir = self.roles_dir / role_name\n        features = {}\n\n        # Standard feature detection\n        tasks_dir = role_dir / \"tasks\"\n        if tasks_dir.exists():\n            for task_file in tasks_dir.glob(\"*.yml\"):\n                try:\n                    with open(task_file, 'r') as f:\n                        content = f.read()\n\n                    # Extract feature name from file\n                    feature_name = task_file.stem\n\n                    features[feature_name] = {\n                        'file': str(task_file.relative_to(self.project_root)),\n                        'rhel_compatibility': {},\n                        'container_compatibility': 'unknown',\n                        'requires_physical_host': False\n                    }\n\n                    # Check for container compatibility\n                    if 'when: not is_container_environment' in content:\n                        features[feature_name]['container_compatibility'] = 'skipped_in_containers'\n                        features[feature_name]['requires_physical_host'] = True\n                    elif 'is_container_environment' in content:\n                        features[feature_name]['container_compatibility'] = 'container_aware'\n                    else:\n                        features[feature_name]['container_compatibility'] = 'compatible'\n\n                    # Check RHEL version compatibility\n                    rhel_versions = self.detect_rhel_versions()\n                    for version in rhel_versions:\n                        version_supported = True\n                        notes = []\n\n                        # Look for version-specific conditions\n                        if f\"rhel{version}\" in content.lower():\n                            notes.append(f\"RHEL {version} specifically mentioned\")\n                        if f\"ansible_distribution_major_version\" in content:\n                            if f'== \"{version}\"' in content or f\"== '{version}'\" in content:\n                                notes.append(f\"Version {version} specifically supported\")\n                            elif f'in [' in content and f'\"{version}\"' in content:\n                                notes.append(f\"Version {version} in supported list\")\n\n                        features[feature_name]['rhel_compatibility'][f\"rhel{version}\"] = {\n                            'supported': version_supported,\n                            'notes': notes if notes else [f\"No specific restrictions found for RHEL {version}\"]\n                        }\n\n                except Exception as e:\n                    print(f\"Warning: Could not analyze {task_file}: {e}\")\n\n        return features\n\n    def generate_enhanced_matrix(self):\n        \"\"\"Generate the enhanced compatibility matrix with container support\"\"\"\n        rhel_versions = self.detect_rhel_versions()\n        container_features = self.detect_container_compatibility()\n\n        matrix = {\n            'metadata': {\n                'generated_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),\n                'project': 'Qubinode KVM Host Setup Collection',\n                'version': '2.1.0',\n                'rhel_versions_supported': rhel_versions,\n                'generator_version': '2.0.0',\n                'container_compatibility': 'enhanced',\n                'last_updated_commit': self.get_git_commit_hash()\n            },\n            'container_compatibility': container_features,\n            'platform_support': {\n                'physical_hosts': {\n                    'supported': True,\n                    'features': 'full_kvm_optimization',\n                    'notes': 'All features available including performance optimization'\n                },\n                'virtual_machines': {\n                    'supported': True,\n                    'features': 'limited_optimization',\n                    'notes': 'Some performance features may not be applicable'\n                },\n                'containers': {\n                    'supported': True,\n                    'features': 'testing_only',\n                    'notes': 'Container-inappropriate tasks automatically skipped',\n                    'testing_platforms': ['Podman', 'Docker']\n                }\n            },\n            'rhel_compatibility_matrix': {}\n        }\n\n        # Analyze each kvmhost role\n        if not self.roles_dir.exists():\n            print(f\"\u274c Error: Roles directory not found at {self.roles_dir}\")\n            print(f\"\ud83d\udd0d Current project root: {self.project_root}\")\n            print(\"\ud83d\udca1 Please run this script from the project root or specify the correct path\")\n            raise FileNotFoundError(f\"Roles directory not found: {self.roles_dir}\")\n\n        for role_dir in self.roles_dir.iterdir():\n            if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                role_name = role_dir.name\n                print(f\"Analyzing role: {role_name}\")\n\n                role_features = self.analyze_role_features(role_name)\n                matrix['rhel_compatibility_matrix'][role_name] = {\n                    'description': f\"KVM Host setup role for {role_name.replace('kvmhost_', '')}\",\n                    'features': role_features,\n                    'overall_compatibility': {},\n                    'container_readiness': {\n                        'testing_compatible': True,\n                        'production_deployment': 'physical_vm_only'\n                    }\n                }\n\n                # Calculate overall compatibility per RHEL version\n                for version in rhel_versions:\n                    supported_features = 0\n                    total_features = len(role_features)\n                    container_aware_features = 0\n\n                    for feature_name, feature_data in role_features.items():\n                        if feature_data['rhel_compatibility'].get(f\"rhel{version}\", {}).get('supported', False):\n                            supported_features += 1\n                        if feature_data['container_compatibility'] in ['container_aware', 'skipped_in_containers']:\n                            container_aware_features += 1\n\n                    compatibility_percentage = (supported_features / total_features * 100) if total_features > 0 else 0\n                    container_awareness = (container_aware_features / total_features * 100) if total_features > 0 else 0\n\n                    matrix['rhel_compatibility_matrix'][role_name]['overall_compatibility'][f\"rhel{version}\"] = {\n                        'compatibility_percentage': round(compatibility_percentage, 1),\n                        'supported_features': supported_features,\n                        'total_features': total_features,\n                        'container_awareness_percentage': round(container_awareness, 1),\n                        'status': 'supported' if compatibility_percentage >= 80 else 'partial'\n                    }\n\n        return matrix\n\n    def get_git_commit_hash(self):\n        \"\"\"Get the current git commit hash\"\"\"\n        try:\n            result = subprocess.run(['git', 'rev-parse', 'HEAD'],\n                                  capture_output=True, text=True, cwd=self.project_root)\n            return result.stdout.strip()[:8] if result.returncode == 0 else 'unknown'\n        except:\n            return 'unknown'\n\n    def save_matrix(self, matrix, output_dir=\"docs\"):\n        \"\"\"Save the compatibility matrix to JSON and generate markdown report\"\"\"\n        output_path = self.project_root / output_dir\n        output_path.mkdir(exist_ok=True)\n\n        # Save JSON matrix\n        json_file = output_path / \"compatibility_matrix.json\"\n        with open(json_file, 'w') as f:\n            json.dump(matrix, f, indent=2)\n        print(f\"\u2705 Compatibility matrix saved to: {json_file}\")\n\n        # Generate markdown report\n        self.generate_markdown_report(matrix, output_path)\n\n    def generate_markdown_report(self, matrix, output_path):\n        \"\"\"Generate a human-readable markdown compatibility report\"\"\"\n        md_content = []\n        md_content.append(\"# RHEL Compatibility Matrix Report\")\n        md_content.append(\"\")\n        md_content.append(\"## \ud83d\udcca Overview\")\n        md_content.append(\"\")\n        md_content.append(f\"**Generated:** {matrix['metadata']['generated_date']}\")\n        md_content.append(f\"**Project:** {matrix['metadata']['project']}\")\n        md_content.append(f\"**Version:** {matrix['metadata']['version']}\")\n        md_content.append(f\"**Commit:** {matrix['metadata']['last_updated_commit']}\")\n        md_content.append(\"\")\n\n        # Container compatibility section\n        md_content.append(\"## \ud83d\udc33 Container Compatibility Enhancement\")\n        md_content.append(\"\")\n        container_features = matrix['container_compatibility']\n\n        for feature_name, feature_data in container_features.items():\n            status = \"\u2705\" if feature_data['implemented'] else \"\u274c\"\n            md_content.append(f\"- **{feature_name.replace('_', ' ').title()}** {status}\")\n            md_content.append(f\"  - {feature_data['description']}\")\n\n            if feature_name == 'advanced_container_detection' and feature_data['criteria']:\n                md_content.append(f\"  - Detection criteria: {', '.join(feature_data['criteria'])}\")\n            elif feature_name == 'task_skipping' and feature_data['skipped_tasks']:\n                md_content.append(f\"  - Skipped tasks: {', '.join(feature_data['skipped_tasks'])}\")\n            elif feature_name == 'gpg_verification' and feature_data['strategy']:\n                md_content.append(f\"  - Strategy: {feature_data['strategy']}\")\n            elif feature_name == 'molecule_testing':\n                if feature_data['scenarios']:\n                    md_content.append(f\"  - Test scenarios: {', '.join(feature_data['scenarios'])}\")\n                if feature_data['platforms']:\n                    md_content.append(f\"  - Container platforms: {len(feature_data['platforms'])} images tested\")\n            md_content.append(\"\")\n\n        # Platform support section\n        md_content.append(\"## \ud83d\udda5\ufe0f Platform Support Matrix\")\n        md_content.append(\"\")\n        md_content.append(\"| Platform | Supported | Features | Notes |\")\n        md_content.append(\"|----------|-----------|----------|-------|\")\n\n        for platform, support_data in matrix['platform_support'].items():\n            status = \"\u2705\" if support_data['supported'] else \"\u274c\"\n            platform_name = platform.replace('_', ' ').title()\n            features = support_data['features'].replace('_', ' ').title()\n            notes = support_data['notes']\n            md_content.append(f\"| {platform_name} | {status} | {features} | {notes} |\")\n\n        md_content.append(\"\")\n\n        # RHEL compatibility section\n        md_content.append(\"## \ud83d\udd34 RHEL Version Compatibility\")\n        md_content.append(\"\")\n\n        rhel_versions = matrix['metadata']['rhel_versions_supported']\n        for role_name, role_data in matrix['rhel_compatibility_matrix'].items():\n            md_content.append(f\"### {role_name}\")\n            md_content.append(\"\")\n            md_content.append(role_data['description'])\n            md_content.append(\"\")\n\n            # Compatibility table\n            md_content.append(\"| RHEL Version | Compatibility | Features Supported | Container Awareness | Status |\")\n            md_content.append(\"|--------------|---------------|-------------------|-------------------|--------|\")\n\n            for version in rhel_versions:\n                compat_data = role_data['overall_compatibility'].get(f\"rhel{version}\", {})\n                compat_pct = compat_data.get('compatibility_percentage', 0)\n                container_pct = compat_data.get('container_awareness_percentage', 0)\n                supported = compat_data.get('supported_features', 0)\n                total = compat_data.get('total_features', 0)\n                status = compat_data.get('status', 'unknown')\n\n                status_icon = \"\u2705\" if status == 'supported' else \"\u26a0\ufe0f\" if status == 'partial' else \"\u274c\"\n\n                md_content.append(f\"| RHEL {version} | {compat_pct}% | {supported}/{total} | {container_pct}% | {status_icon} {status} |\")\n\n            md_content.append(\"\")\n\n        # Testing validation section\n        md_content.append(\"## \ud83e\uddea Testing Validation\")\n        md_content.append(\"\")\n\n        if matrix['container_compatibility']['molecule_testing']['implemented']:\n            scenarios = matrix['container_compatibility']['molecule_testing']['scenarios']\n            platforms = matrix['container_compatibility']['molecule_testing']['platforms']\n\n            md_content.append(f\"**Molecule Test Scenarios:** {len(scenarios)}\")\n            for scenario in scenarios:\n                md_content.append(f\"- {scenario}\")\n            md_content.append(\"\")\n\n            md_content.append(f\"**Container Platforms Tested:** {len(platforms)}\")\n            for platform in platforms[:5]:  # Limit to first 5 for readability\n                md_content.append(f\"- {platform}\")\n            if len(platforms) > 5:\n                md_content.append(f\"- ... and {len(platforms) - 5} more\")\n            md_content.append(\"\")\n\n        # Save markdown report\n        md_file = output_path / \"compatibility_report.md\"\n        with open(md_file, 'w') as f:\n            f.write('\\n'.join(md_content))\n        print(f\"\u2705 Compatibility report saved to: {md_file}\")\n\n\ndef main():\n    \"\"\"Main execution function\"\"\"\n    if len(sys.argv) > 1:\n        project_root = sys.argv[1]\n        print(f\"\ud83d\udd0d Using specified project root: {project_root}\")\n        generator = EnhancedCompatibilityMatrix(project_root)\n    else:\n        print(\"\ud83d\udd0d Auto-detecting project root...\")\n        generator = EnhancedCompatibilityMatrix()\n        print(f\"\ud83d\udd0d Detected project root: {generator.project_root}\")\n\n    print(\"\ud83d\udd0d Generating Enhanced Compatibility Matrix...\")\n\n    matrix = generator.generate_enhanced_matrix()\n    generator.save_matrix(matrix)\n\n    print(\"\\n\ud83c\udf89 Enhanced compatibility matrix generation complete!\")\n    print(\"\\n\ud83d\udccb Summary:\")\n    print(f\"- RHEL versions supported: {', '.join(matrix['metadata']['rhel_versions_supported'])}\")\n    print(f\"- Container compatibility: {matrix['metadata']['container_compatibility']}\")\n    print(f\"- Roles analyzed: {len(matrix['rhel_compatibility_matrix'])}\")\n\n    container_features = matrix['container_compatibility']\n    implemented_features = sum(1 for f in container_features.values() if f['implemented'])\n    print(f\"- Container features implemented: {implemented_features}/{len(container_features)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_enhanced_compatibility_matrix:[17:543]\n==scripts.generate_enhanced_compatibility_matrix:[17:543]\nclass EnhancedCompatibilityMatrix:\n    def __init__(self, project_root=None):\n        if project_root is None:\n            self.project_root = self._detect_project_root()\n        else:\n            self.project_root = Path(project_root)\n\n        self.roles_dir = self.project_root / \"roles\"\n        self.molecule_dir = self.project_root / \"molecule\"\n        self.compatibility_data = {}\n\n    def _detect_project_root(self):\n        \"\"\"Detect project root by looking for key files in multiple locations\"\"\"\n        # Start with current working directory\n        current_dir = Path.cwd()\n\n        # Check current directory first\n        if self._is_project_root(current_dir):\n            return current_dir\n\n        # Check if we're in a subdirectory (like scripts/)\n        for parent in current_dir.parents:\n            if self._is_project_root(parent):\n                return parent\n\n        # Check common GitHub Actions paths\n        github_workspace = os.environ.get('GITHUB_WORKSPACE')\n        if github_workspace:\n            github_path = Path(github_workspace)\n            if self._is_project_root(github_path):\n                return github_path\n\n        # Check if we're in a nested GitHub Actions structure\n        if 'github' in str(current_dir).lower():\n            # Look for the actual project directory\n            for part in current_dir.parts:\n                if 'qubinode_kvmhost_setup_collection' in part:\n                    # Try to construct the path\n                    potential_root = Path('/'.join(current_dir.parts[:current_dir.parts.index(part)+1]))\n                    if self._is_project_root(potential_root):\n                        return potential_root\n\n        # Try to find the project based on the script location\n        script_path = Path(__file__).resolve()\n        script_parent = script_path.parent.parent  # Go up from scripts/ to project root\n        if self._is_project_root(script_parent):\n            return script_parent\n\n        # Look for common project locations\n        common_locations = [\n            Path.home() / \"qubinode_kvmhost_setup_collection\",\n            Path(\"/home/vpcuser/qubinode_kvmhost_setup_collection\"),\n            Path(\"/home/runner/work/qubinode_kvmhost_setup_collection/qubinode_kvmhost_setup_collection\"),\n        ]\n\n        for location in common_locations:\n            if self._is_project_root(location):\n                return location\n\n        # Fallback: return current directory and let the script handle missing roles\n        print(f\"Warning: Could not detect project root, using current directory: {current_dir}\")\n        return current_dir\n\n    def _is_project_root(self, path):\n        \"\"\"Check if a path looks like the project root\"\"\"\n        path = Path(path)\n\n        # Must have roles directory\n        if not (path / \"roles\").exists():\n            return False\n\n        # Should have at least one of these files\n        indicators = [\"galaxy.yml\", \"ansible.cfg\", \"pyproject.toml\", \"requirements.txt\"]\n        return any((path / indicator).exists() for indicator in indicators)\n\n    def detect_rhel_versions(self):\n        \"\"\"Detect supported RHEL versions from role tasks and Molecule scenarios\"\"\"\n        rhel_versions = set()\n\n        # Check if roles directory exists\n        if not self.roles_dir.exists():\n            print(f\"Warning: Roles directory not found at {self.roles_dir}\")\n            return [\"8\", \"9\"]  # Default fallback versions\n\n        # Check Molecule configurations for tested versions\n        if self.molecule_dir.exists():\n            for scenario_dir in self.molecule_dir.iterdir():\n                if scenario_dir.is_dir():\n                    molecule_yml = scenario_dir / \"molecule.yml\"\n                    if molecule_yml.exists():\n                        try:\n                            with open(molecule_yml, 'r') as f:\n                                molecule_config = yaml.safe_load(f)\n                                platforms = molecule_config.get('platforms', [])\n                                for platform in platforms:\n                                    image = platform.get('image', '')\n                                    if 'rockylinux' in image or 'almalinux' in image or 'ubi' in image:\n                                        if ':8' in image or 'rhel8' in image:\n                                            rhel_versions.add(\"8\")\n                                        elif ':9' in image or 'rhel9' in image:\n                                            rhel_versions.add(\"9\")\n                                        elif ':10' in image or 'rhel10' in image:\n                                            rhel_versions.add(\"10\")\n                        except Exception as e:\n                            print(f\"Warning: Could not read {molecule_yml}: {e}\")\n\n        # Fallback: check task files for version-specific logic\n        version_patterns = [\"rhel8\", \"rhel9\", \"rhel10\", \"el8\", \"el9\", \"el10\"]\n        try:\n            for role_dir in self.roles_dir.iterdir():\n                if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                    tasks_dir = role_dir / \"tasks\"\n                    if tasks_dir.exists():\n                        for task_file in tasks_dir.glob(\"*.yml\"):\n                            try:\n                                with open(task_file, 'r') as f:\n                                    content = f.read()\n                                for pattern in version_patterns:\n                                    if pattern in content.lower():\n                                        if \"rhel8\" in pattern or \"el8\" in pattern:\n                                            rhel_versions.add(\"8\")\n                                        elif \"rhel9\" in pattern or \"el9\" in pattern:\n                                            rhel_versions.add(\"9\")\n                                        elif \"rhel10\" in pattern or \"el10\" in pattern:\n                                            rhel_versions.add(\"10\")\n                            except Exception as e:\n                                print(f\"Warning: Could not read {task_file}: {e}\")\n        except Exception as e:\n            print(f\"Warning: Could not scan roles directory: {e}\")\n\n        # Default to supporting 8, 9, 10 if no specific versions found\n        if not rhel_versions:\n            rhel_versions = {\"8\", \"9\", \"10\"}\n\n        return sorted(list(rhel_versions))\n\n    def detect_container_compatibility(self):\n        \"\"\"Detect container compatibility features from recent enhancements\"\"\"\n        container_features = {\n            'advanced_container_detection': {\n                'implemented': False,\n                'criteria': [],\n                'description': 'Multi-criteria container environment detection'\n            },\n            'task_skipping': {\n                'implemented': False,\n                'skipped_tasks': [],\n                'description': 'Container-inappropriate task skipping'\n            },\n            'gpg_verification': {\n                'implemented': False,\n                'strategy': 'unknown',\n                'description': 'Dynamic GPG verification for container environments'\n            },\n            'molecule_testing': {\n                'implemented': False,\n                'scenarios': [],\n                'platforms': [],\n                'description': 'Container-based testing with Molecule'\n            }\n        }\n\n        # Check for advanced container detection in performance_optimization.yml\n        perf_opt_file = self.project_root / \"roles\" / \"kvmhost_setup\" / \"tasks\" / \"performance_optimization.yml\"\n        if perf_opt_file.exists():\n            try:\n                with open(perf_opt_file, 'r') as f:\n                    content = f.read()\n                    if 'is_container_environment' in content:\n                        container_features['advanced_container_detection']['implemented'] = True\n                        if 'ansible_virtualization_type in' in content:\n                            container_features['advanced_container_detection']['criteria'].append('virtualization_type')\n                        if 'ansible_env.container' in content:\n                            container_features['advanced_container_detection']['criteria'].append('environment_variables')\n                        if 'ansible_mounts' in content and 'overlay' in content:\n                            container_features['advanced_container_detection']['criteria'].append('filesystem_analysis')\n                        if 'ansible_selinux' in content and 'docker_t' in content:\n                            container_features['advanced_container_detection']['criteria'].append('selinux_context')\n\n                    # Count tasks with container guards\n                    guard_count = content.count('when: not is_container_environment')\n                    if guard_count > 0:\n                        container_features['task_skipping']['implemented'] = True\n                        container_features['task_skipping']['skipped_tasks'] = [f\"{guard_count} KVM-specific tasks\"]\n            except Exception as e:\n                print(f\"Warning: Could not analyze {perf_opt_file}: {e}\")\n\n        # Check for dynamic GPG verification in main.yml\n        main_file = self.project_root / \"roles\" / \"kvmhost_setup\" / \"tasks\" / \"main.yml\"\n        if main_file.exists():\n            try:\n                with open(main_file, 'r') as f:\n                    content = f.read()\n                    if 'disable_gpg_check' in content and 'container' in content:\n                        container_features['gpg_verification']['implemented'] = True\n                        container_features['gpg_verification']['strategy'] = 'dynamic_container_detection'\n            except Exception as e:\n                print(f\"Warning: Could not analyze {main_file}: {e}\")\n\n        # Check Molecule scenarios for container testing\n        if self.molecule_dir.exists():\n            scenarios = []\n            platforms = []\n            for scenario_dir in self.molecule_dir.iterdir():\n                if scenario_dir.is_dir():\n                    scenarios.append(scenario_dir.name)\n                    molecule_yml = scenario_dir / \"molecule.yml\"\n                    if molecule_yml.exists():\n                        try:\n                            with open(molecule_yml, 'r') as f:\n                                molecule_config = yaml.safe_load(f)\n                                for platform in molecule_config.get('platforms', []):\n                                    image = platform.get('image', '')\n                                    if image not in platforms:\n                                        platforms.append(image)\n                        except Exception as e:\n                            print(f\"Warning: Could not read {molecule_yml}: {e}\")\n\n            if scenarios:\n                container_features['molecule_testing']['implemented'] = True\n                container_features['molecule_testing']['scenarios'] = scenarios\n                container_features['molecule_testing']['platforms'] = platforms\n\n        return container_features\n\n    def analyze_role_features(self, role_name):\n        \"\"\"Analyze features and compatibility for a specific role\"\"\"\n        role_dir = self.roles_dir / role_name\n        features = {}\n\n        # Standard feature detection\n        tasks_dir = role_dir / \"tasks\"\n        if tasks_dir.exists():\n            for task_file in tasks_dir.glob(\"*.yml\"):\n                try:\n                    with open(task_file, 'r') as f:\n                        content = f.read()\n\n                    # Extract feature name from file\n                    feature_name = task_file.stem\n\n                    features[feature_name] = {\n                        'file': str(task_file.relative_to(self.project_root)),\n                        'rhel_compatibility': {},\n                        'container_compatibility': 'unknown',\n                        'requires_physical_host': False\n                    }\n\n                    # Check for container compatibility\n                    if 'when: not is_container_environment' in content:\n                        features[feature_name]['container_compatibility'] = 'skipped_in_containers'\n                        features[feature_name]['requires_physical_host'] = True\n                    elif 'is_container_environment' in content:\n                        features[feature_name]['container_compatibility'] = 'container_aware'\n                    else:\n                        features[feature_name]['container_compatibility'] = 'compatible'\n\n                    # Check RHEL version compatibility\n                    rhel_versions = self.detect_rhel_versions()\n                    for version in rhel_versions:\n                        version_supported = True\n                        notes = []\n\n                        # Look for version-specific conditions\n                        if f\"rhel{version}\" in content.lower():\n                            notes.append(f\"RHEL {version} specifically mentioned\")\n                        if f\"ansible_distribution_major_version\" in content:\n                            if f'== \"{version}\"' in content or f\"== '{version}'\" in content:\n                                notes.append(f\"Version {version} specifically supported\")\n                            elif f'in [' in content and f'\"{version}\"' in content:\n                                notes.append(f\"Version {version} in supported list\")\n\n                        features[feature_name]['rhel_compatibility'][f\"rhel{version}\"] = {\n                            'supported': version_supported,\n                            'notes': notes if notes else [f\"No specific restrictions found for RHEL {version}\"]\n                        }\n\n                except Exception as e:\n                    print(f\"Warning: Could not analyze {task_file}: {e}\")\n\n        return features\n\n    def generate_enhanced_matrix(self):\n        \"\"\"Generate the enhanced compatibility matrix with container support\"\"\"\n        rhel_versions = self.detect_rhel_versions()\n        container_features = self.detect_container_compatibility()\n\n        matrix = {\n            'metadata': {\n                'generated_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),\n                'project': 'Qubinode KVM Host Setup Collection',\n                'version': '2.1.0',\n                'rhel_versions_supported': rhel_versions,\n                'generator_version': '2.0.0',\n                'container_compatibility': 'enhanced',\n                'last_updated_commit': self.get_git_commit_hash()\n            },\n            'container_compatibility': container_features,\n            'platform_support': {\n                'physical_hosts': {\n                    'supported': True,\n                    'features': 'full_kvm_optimization',\n                    'notes': 'All features available including performance optimization'\n                },\n                'virtual_machines': {\n                    'supported': True,\n                    'features': 'limited_optimization',\n                    'notes': 'Some performance features may not be applicable'\n                },\n                'containers': {\n                    'supported': True,\n                    'features': 'testing_only',\n                    'notes': 'Container-inappropriate tasks automatically skipped',\n                    'testing_platforms': ['Podman', 'Docker']\n                }\n            },\n            'rhel_compatibility_matrix': {}\n        }\n\n        # Analyze each kvmhost role\n        if not self.roles_dir.exists():\n            print(f\"\u274c Error: Roles directory not found at {self.roles_dir}\")\n            print(f\"\ud83d\udd0d Current project root: {self.project_root}\")\n            print(\"\ud83d\udca1 Please run this script from the project root or specify the correct path\")\n            raise FileNotFoundError(f\"Roles directory not found: {self.roles_dir}\")\n\n        for role_dir in self.roles_dir.iterdir():\n            if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                role_name = role_dir.name\n                print(f\"Analyzing role: {role_name}\")\n\n                role_features = self.analyze_role_features(role_name)\n                matrix['rhel_compatibility_matrix'][role_name] = {\n                    'description': f\"KVM Host setup role for {role_name.replace('kvmhost_', '')}\",\n                    'features': role_features,\n                    'overall_compatibility': {},\n                    'container_readiness': {\n                        'testing_compatible': True,\n                        'production_deployment': 'physical_vm_only'\n                    }\n                }\n\n                # Calculate overall compatibility per RHEL version\n                for version in rhel_versions:\n                    supported_features = 0\n                    total_features = len(role_features)\n                    container_aware_features = 0\n\n                    for feature_name, feature_data in role_features.items():\n                        if feature_data['rhel_compatibility'].get(f\"rhel{version}\", {}).get('supported', False):\n                            supported_features += 1\n                        if feature_data['container_compatibility'] in ['container_aware', 'skipped_in_containers']:\n                            container_aware_features += 1\n\n                    compatibility_percentage = (supported_features / total_features * 100) if total_features > 0 else 0\n                    container_awareness = (container_aware_features / total_features * 100) if total_features > 0 else 0\n\n                    matrix['rhel_compatibility_matrix'][role_name]['overall_compatibility'][f\"rhel{version}\"] = {\n                        'compatibility_percentage': round(compatibility_percentage, 1),\n                        'supported_features': supported_features,\n                        'total_features': total_features,\n                        'container_awareness_percentage': round(container_awareness, 1),\n                        'status': 'supported' if compatibility_percentage >= 80 else 'partial'\n                    }\n\n        return matrix\n\n    def get_git_commit_hash(self):\n        \"\"\"Get the current git commit hash\"\"\"\n        try:\n            result = subprocess.run(['git', 'rev-parse', 'HEAD'],\n                                  capture_output=True, text=True, cwd=self.project_root)\n            return result.stdout.strip()[:8] if result.returncode == 0 else 'unknown'\n        except:\n            return 'unknown'\n\n    def save_matrix(self, matrix, output_dir=\"docs\"):\n        \"\"\"Save the compatibility matrix to JSON and generate markdown report\"\"\"\n        output_path = self.project_root / output_dir\n        output_path.mkdir(exist_ok=True)\n\n        # Save JSON matrix\n        json_file = output_path / \"compatibility_matrix.json\"\n        with open(json_file, 'w') as f:\n            json.dump(matrix, f, indent=2)\n        print(f\"\u2705 Compatibility matrix saved to: {json_file}\")\n\n        # Generate markdown report\n        self.generate_markdown_report(matrix, output_path)\n\n    def generate_markdown_report(self, matrix, output_path):\n        \"\"\"Generate a human-readable markdown compatibility report\"\"\"\n        md_content = []\n        md_content.append(\"# RHEL Compatibility Matrix Report\")\n        md_content.append(\"\")\n        md_content.append(\"## \ud83d\udcca Overview\")\n        md_content.append(\"\")\n        md_content.append(f\"**Generated:** {matrix['metadata']['generated_date']}\")\n        md_content.append(f\"**Project:** {matrix['metadata']['project']}\")\n        md_content.append(f\"**Version:** {matrix['metadata']['version']}\")\n        md_content.append(f\"**Commit:** {matrix['metadata']['last_updated_commit']}\")\n        md_content.append(\"\")\n\n        # Container compatibility section\n        md_content.append(\"## \ud83d\udc33 Container Compatibility Enhancement\")\n        md_content.append(\"\")\n        container_features = matrix['container_compatibility']\n\n        for feature_name, feature_data in container_features.items():\n            status = \"\u2705\" if feature_data['implemented'] else \"\u274c\"\n            md_content.append(f\"- **{feature_name.replace('_', ' ').title()}** {status}\")\n            md_content.append(f\"  - {feature_data['description']}\")\n\n            if feature_name == 'advanced_container_detection' and feature_data['criteria']:\n                md_content.append(f\"  - Detection criteria: {', '.join(feature_data['criteria'])}\")\n            elif feature_name == 'task_skipping' and feature_data['skipped_tasks']:\n                md_content.append(f\"  - Skipped tasks: {', '.join(feature_data['skipped_tasks'])}\")\n            elif feature_name == 'gpg_verification' and feature_data['strategy']:\n                md_content.append(f\"  - Strategy: {feature_data['strategy']}\")\n            elif feature_name == 'molecule_testing':\n                if feature_data['scenarios']:\n                    md_content.append(f\"  - Test scenarios: {', '.join(feature_data['scenarios'])}\")\n                if feature_data['platforms']:\n                    md_content.append(f\"  - Container platforms: {len(feature_data['platforms'])} images tested\")\n            md_content.append(\"\")\n\n        # Platform support section\n        md_content.append(\"## \ud83d\udda5\ufe0f Platform Support Matrix\")\n        md_content.append(\"\")\n        md_content.append(\"| Platform | Supported | Features | Notes |\")\n        md_content.append(\"|----------|-----------|----------|-------|\")\n\n        for platform, support_data in matrix['platform_support'].items():\n            status = \"\u2705\" if support_data['supported'] else \"\u274c\"\n            platform_name = platform.replace('_', ' ').title()\n            features = support_data['features'].replace('_', ' ').title()\n            notes = support_data['notes']\n            md_content.append(f\"| {platform_name} | {status} | {features} | {notes} |\")\n\n        md_content.append(\"\")\n\n        # RHEL compatibility section\n        md_content.append(\"## \ud83d\udd34 RHEL Version Compatibility\")\n        md_content.append(\"\")\n\n        rhel_versions = matrix['metadata']['rhel_versions_supported']\n        for role_name, role_data in matrix['rhel_compatibility_matrix'].items():\n            md_content.append(f\"### {role_name}\")\n            md_content.append(\"\")\n            md_content.append(role_data['description'])\n            md_content.append(\"\")\n\n            # Compatibility table\n            md_content.append(\"| RHEL Version | Compatibility | Features Supported | Container Awareness | Status |\")\n            md_content.append(\"|--------------|---------------|-------------------|-------------------|--------|\")\n\n            for version in rhel_versions:\n                compat_data = role_data['overall_compatibility'].get(f\"rhel{version}\", {})\n                compat_pct = compat_data.get('compatibility_percentage', 0)\n                container_pct = compat_data.get('container_awareness_percentage', 0)\n                supported = compat_data.get('supported_features', 0)\n                total = compat_data.get('total_features', 0)\n                status = compat_data.get('status', 'unknown')\n\n                status_icon = \"\u2705\" if status == 'supported' else \"\u26a0\ufe0f\" if status == 'partial' else \"\u274c\"\n\n                md_content.append(f\"| RHEL {version} | {compat_pct}% | {supported}/{total} | {container_pct}% | {status_icon} {status} |\")\n\n            md_content.append(\"\")\n\n        # Testing validation section\n        md_content.append(\"## \ud83e\uddea Testing Validation\")\n        md_content.append(\"\")\n\n        if matrix['container_compatibility']['molecule_testing']['implemented']:\n            scenarios = matrix['container_compatibility']['molecule_testing']['scenarios']\n            platforms = matrix['container_compatibility']['molecule_testing']['platforms']\n\n            md_content.append(f\"**Molecule Test Scenarios:** {len(scenarios)}\")\n            for scenario in scenarios:\n                md_content.append(f\"- {scenario}\")\n            md_content.append(\"\")\n\n            md_content.append(f\"**Container Platforms Tested:** {len(platforms)}\")\n            for platform in platforms[:5]:  # Limit to first 5 for readability\n                md_content.append(f\"- {platform}\")\n            if len(platforms) > 5:\n                md_content.append(f\"- ... and {len(platforms) - 5} more\")\n            md_content.append(\"\")\n\n        # Save markdown report\n        md_file = output_path / \"compatibility_report.md\"\n        with open(md_file, 'w') as f:\n            f.write('\\n'.join(md_content))\n        print(f\"\u2705 Compatibility report saved to: {md_file}\")\n\n\ndef main():\n    \"\"\"Main execution function\"\"\"\n    if len(sys.argv) > 1:\n        project_root = sys.argv[1]\n        print(f\"\ud83d\udd0d Using specified project root: {project_root}\")\n        generator = EnhancedCompatibilityMatrix(project_root)\n    else:\n        print(\"\ud83d\udd0d Auto-detecting project root...\")\n        generator = EnhancedCompatibilityMatrix()\n        print(f\"\ud83d\udd0d Detected project root: {generator.project_root}\")\n\n    print(\"\ud83d\udd0d Generating Enhanced Compatibility Matrix...\")\n\n    matrix = generator.generate_enhanced_matrix()\n    generator.save_matrix(matrix)\n\n    print(\"\\n\ud83c\udf89 Enhanced compatibility matrix generation complete!\")\n    print(\"\\n\ud83d\udccb Summary:\")\n    print(f\"- RHEL versions supported: {', '.join(matrix['metadata']['rhel_versions_supported'])}\")\n    print(f\"- Container compatibility: {matrix['metadata']['container_compatibility']}\")\n    print(f\"- Roles analyzed: {len(matrix['rhel_compatibility_matrix'])}\")\n\n    container_features = matrix['container_compatibility']\n    implemented_features = sum(1 for f in container_features.values() if f['implemented'])\n    print(f\"- Container features implemented: {implemented_features}/{len(container_features)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[3:372]\n==blivet:[3:372]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: blivet\n\nshort_description: Module for management of linux block device stacks\n\nversion_added: \"2.13.0\"\n\ndescription:\n    - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n    - \"Module configures storage pools and volumes to match the state specified\n       in input parameters.\"\n\noptions:\n    pools:\n        description: pools\n        type: list\n        elements: dict\n        suboptions:\n            disks:\n                description: disks\n                type: list\n                default: []\n                elements: str\n            encryption:\n                description: encryption\n                type: bool\n            encryption_cipher:\n                description: encryption_cipher\n                type: str\n            encryption_key:\n                description: encryption_key file, not the actual key\n                type: str\n            encryption_key_size:\n                description: encryption_key_size\n                type: int\n            encryption_luks_version:\n                description: encryption_luks_version\n                type: str\n            encryption_password:\n                description: encryption_password\n                type: str\n            encryption_clevis_pin:\n                description: encryption_clevis_pin\n                type: str\n            encryption_tang_url:\n                description: encryption_tang_url\n                type: str\n            encryption_tang_thumbprint:\n                description: encryption_tang_thumbprint\n                type: str\n            grow_to_fill:\n                description: grow_to_fill\n                type: bool\n            name:\n                description: name\n                type: str\n            raid_level:\n                description: raid_level\n                type: str\n            raid_device_count:\n                description: raid_device_count\n                type: int\n            raid_spare_count:\n                description: raid_spare_count\n                type: int\n            raid_metadata_version:\n                description: raid_metadata_version\n                type: str\n            raid_chunk_size:\n                description: raid_chunk_size\n                type: str\n            shared:\n                description: shared\n                type: bool\n            state:\n                description: state\n                type: str\n                default: present\n                choices: ['present', 'absent']\n            type:\n                description: type\n                type: str\n            volumes:\n                description: volumes\n                type: list\n                default: []\n                elements: dict\n                suboptions:\n                    encryption:\n                        description: encryption\n                        type: bool\n                    encryption_cipher:\n                        description: encryption_cipher\n                        type: str\n                    encryption_key:\n                        description: encryption_key file, not the actual key\n                        type: str\n                    encryption_key_size:\n                        description: encryption_key_size\n                        type: int\n                    encryption_luks_version:\n                        description: encryption_luks_version\n                        type: str\n                    encryption_password:\n                        description: encryption_password\n                        type: str\n                    fs_create_options:\n                        description: fs_create_options\n                        type: str\n                    fs_label:\n                        description: fs_label\n                        type: str\n                    fs_type:\n                        description: fs_type\n                        type: str\n                    mount_options:\n                        description: mount_options\n                        type: str\n                    mount_point:\n                        description: mount_point\n                        type: str\n                    mount_user:\n                        description: mount_user\n                        type: str\n                    mount_group:\n                        description: mount_group\n                        type: str\n                    mount_mode:\n                        description: mount_mode\n                        type: str\n                    name:\n                        description: name\n                        type: str\n                    raid_level:\n                        description: raid_level\n                        type: str\n                    size:\n                        description: size\n                        type: str\n                    state:\n                        description: state\n                        type: str\n                        default: present\n                        choices: ['present', 'absent']\n                    type:\n                        description: type\n                        type: str\n                    cached:\n                        description: cached\n                        type: bool\n                    cache_devices:\n                        description: cache_devices\n                        type: list\n                        default: []\n                        elements: str\n                    cache_mode:\n                        description: cache_mode\n                        type: str\n                    cache_size:\n                        description: cache_size\n                        type: str\n                    compression:\n                        description: compression\n                        type: bool\n                    deduplication:\n                        description: deduplication\n                        type: bool\n                    raid_disks:\n                        description: raid_disks\n                        type: list\n                        default: []\n                        elements: str\n                    raid_stripe_size:\n                        description: raid_stripe_size\n                        type: str\n                    thin_pool_name:\n                        description: thin_pool_name\n                        type: str\n                    thin_pool_size:\n                        description: thin_pool_size\n                        type: str\n                    thin:\n                        description: thin\n                        type: bool\n                        default: false\n                    vdo_pool_size:\n                        description: vdo_pool_size\n                        type: str\n    volumes:\n        description: volumes\n        type: list\n        elements: dict\n        suboptions:\n            encryption:\n                description: encryption\n                type: bool\n            encryption_cipher:\n                description: encryption_cipher\n                type: str\n            encryption_key:\n                description: encryption_key file, not the actual key\n                type: str\n            encryption_key_size:\n                description: encryption_key_size\n                type: int\n            encryption_luks_version:\n                description: encryption_luks_version\n                type: str\n            encryption_password:\n                description: encryption_password\n                type: str\n            fs_create_options:\n                description: fs_create_options\n                type: str\n            fs_label:\n                description: fs_label\n                type: str\n            fs_type:\n                description: fs_type\n                type: str\n            mount_options:\n                description: mount_options\n                type: str\n            mount_point:\n                description: mount_point\n                type: str\n            mount_user:\n                description: mount_user\n                type: str\n            mount_group:\n                description: mount_group\n                type: str\n            mount_mode:\n                description: mount_mode\n                type: str\n            name:\n                description: name\n                type: str\n            raid_level:\n                description: raid_level\n                type: str\n            size:\n                description: size\n                type: str\n            state:\n                description: state\n                type: str\n                default: present\n                choices: ['present', 'absent']\n            type:\n                description: type\n                type: str\n            disks:\n                description: disks\n                type: list\n                default: []\n                elements: str\n            raid_device_count:\n                description: raid_device_count\n                type: int\n            raid_spare_count:\n                description: raid_spare_count\n                type: int\n            raid_metadata_version:\n                description: raid_metadata_version\n                type: str\n            raid_chunk_size:\n                description: raid_chunk_size\n                type: str\n    packages_only:\n        description: packages_only\n        type: bool\n        default: false\n    disklabel_type:\n        description:\n            - |\n              disklabel type string (eg: 'gpt') to use, overriding the built-in logic in blivet\n        type: str\n    safe_mode:\n        description:\n            - boolean indicating that we should fail rather than implicitly/automatically\n              removing devices or formatting\n        type: bool\n        default: true\n    pool_defaults:\n        description: pool_defaults\n        type: dict\n    volume_defaults:\n        description: volume_defaults\n        type: dict\n    use_partitions:\n        description: boolean indicating whether to create partitions on disks for pool backing devices\n        type: bool\n    diskvolume_mkfs_option_map:\n        description:\n            - dict which maps filesystem names to additional mkfs options that should be used\n              when creating a disk volume (that is, a whole disk filesystem)\n        type: dict\n        default: {}\n    uses_kmod_kvdo:\n        description:\n            - bool - set if platform uses_kmod_kvdo\n        type: bool\n        default: false\nauthor:\n    - David Lehman (@dwlehman)\n'''\n\nEXAMPLES = '''\n- name: Manage devices\n  blivet:\n    pools:\n      - name: \"{{ app_pool }}\"\n        disks: [\"sdd\", \"sde\"]\n        volumes:\n          - name: shared\n            size: \"10 GiB\"\n            mount_point: /opt/{{ app_pool }}/shared\n          - name: web\n            size: 8g\n            mount_point: /opt/{{ app_pool }}/web\n    volumes:\n      - name: whole_disk1\n        disks: ['sdc']\n        mount_point: /whole_disk1\n        fs_type: ext4\n        mount_options: journal_checksum,async,noexec\n'''\n\nRETURN = '''\nactions:\n    description: list of dicts describing actions taken\n    returned: success\n    type: list\n    elements: dict\nleaves:\n    description: list of paths to leaf devices\n    returned: success\n    type: list\n    elements: dict\nmounts:\n    description: list of dicts describing mounts to set up\n    returned: success\n    type: list\n    elements: dict\ncrypts:\n    description: list of dicts describing crypttab entries to set up\n    returned: success\n    type: list\n    elements: dict\npools:\n    description: list of dicts describing the pools w/ device path for each volume\n    returned: success\n    type: list\n    elements: dict\nvolumes:\n    description: list of dicts describing the volumes w/ device path for each\n    returned: success\n    type: list\n    elements: dict",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[3:372]\n==blivet:[3:372]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: blivet\n\nshort_description: Module for management of linux block device stacks\n\nversion_added: \"2.13.0\"\n\ndescription:\n    - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n    - \"Module configures storage pools and volumes to match the state specified\n       in input parameters.\"\n\noptions:\n    pools:\n        description: pools\n        type: list\n        elements: dict\n        suboptions:\n            disks:\n                description: disks\n                type: list\n                default: []\n                elements: str\n            encryption:\n                description: encryption\n                type: bool\n            encryption_cipher:\n                description: encryption_cipher\n                type: str\n            encryption_key:\n                description: encryption_key file, not the actual key\n                type: str\n            encryption_key_size:\n                description: encryption_key_size\n                type: int\n            encryption_luks_version:\n                description: encryption_luks_version\n                type: str\n            encryption_password:\n                description: encryption_password\n                type: str\n            encryption_clevis_pin:\n                description: encryption_clevis_pin\n                type: str\n            encryption_tang_url:\n                description: encryption_tang_url\n                type: str\n            encryption_tang_thumbprint:\n                description: encryption_tang_thumbprint\n                type: str\n            grow_to_fill:\n                description: grow_to_fill\n                type: bool\n            name:\n                description: name\n                type: str\n            raid_level:\n                description: raid_level\n                type: str\n            raid_device_count:\n                description: raid_device_count\n                type: int\n            raid_spare_count:\n                description: raid_spare_count\n                type: int\n            raid_metadata_version:\n                description: raid_metadata_version\n                type: str\n            raid_chunk_size:\n                description: raid_chunk_size\n                type: str\n            shared:\n                description: shared\n                type: bool\n            state:\n                description: state\n                type: str\n                default: present\n                choices: ['present', 'absent']\n            type:\n                description: type\n                type: str\n            volumes:\n                description: volumes\n                type: list\n                default: []\n                elements: dict\n                suboptions:\n                    encryption:\n                        description: encryption\n                        type: bool\n                    encryption_cipher:\n                        description: encryption_cipher\n                        type: str\n                    encryption_key:\n                        description: encryption_key file, not the actual key\n                        type: str\n                    encryption_key_size:\n                        description: encryption_key_size\n                        type: int\n                    encryption_luks_version:\n                        description: encryption_luks_version\n                        type: str\n                    encryption_password:\n                        description: encryption_password\n                        type: str\n                    fs_create_options:\n                        description: fs_create_options\n                        type: str\n                    fs_label:\n                        description: fs_label\n                        type: str\n                    fs_type:\n                        description: fs_type\n                        type: str\n                    mount_options:\n                        description: mount_options\n                        type: str\n                    mount_point:\n                        description: mount_point\n                        type: str\n                    mount_user:\n                        description: mount_user\n                        type: str\n                    mount_group:\n                        description: mount_group\n                        type: str\n                    mount_mode:\n                        description: mount_mode\n                        type: str\n                    name:\n                        description: name\n                        type: str\n                    raid_level:\n                        description: raid_level\n                        type: str\n                    size:\n                        description: size\n                        type: str\n                    state:\n                        description: state\n                        type: str\n                        default: present\n                        choices: ['present', 'absent']\n                    type:\n                        description: type\n                        type: str\n                    cached:\n                        description: cached\n                        type: bool\n                    cache_devices:\n                        description: cache_devices\n                        type: list\n                        default: []\n                        elements: str\n                    cache_mode:\n                        description: cache_mode\n                        type: str\n                    cache_size:\n                        description: cache_size\n                        type: str\n                    compression:\n                        description: compression\n                        type: bool\n                    deduplication:\n                        description: deduplication\n                        type: bool\n                    raid_disks:\n                        description: raid_disks\n                        type: list\n                        default: []\n                        elements: str\n                    raid_stripe_size:\n                        description: raid_stripe_size\n                        type: str\n                    thin_pool_name:\n                        description: thin_pool_name\n                        type: str\n                    thin_pool_size:\n                        description: thin_pool_size\n                        type: str\n                    thin:\n                        description: thin\n                        type: bool\n                        default: false\n                    vdo_pool_size:\n                        description: vdo_pool_size\n                        type: str\n    volumes:\n        description: volumes\n        type: list\n        elements: dict\n        suboptions:\n            encryption:\n                description: encryption\n                type: bool\n            encryption_cipher:\n                description: encryption_cipher\n                type: str\n            encryption_key:\n                description: encryption_key file, not the actual key\n                type: str\n            encryption_key_size:\n                description: encryption_key_size\n                type: int\n            encryption_luks_version:\n                description: encryption_luks_version\n                type: str\n            encryption_password:\n                description: encryption_password\n                type: str\n            fs_create_options:\n                description: fs_create_options\n                type: str\n            fs_label:\n                description: fs_label\n                type: str\n            fs_type:\n                description: fs_type\n                type: str\n            mount_options:\n                description: mount_options\n                type: str\n            mount_point:\n                description: mount_point\n                type: str\n            mount_user:\n                description: mount_user\n                type: str\n            mount_group:\n                description: mount_group\n                type: str\n            mount_mode:\n                description: mount_mode\n                type: str\n            name:\n                description: name\n                type: str\n            raid_level:\n                description: raid_level\n                type: str\n            size:\n                description: size\n                type: str\n            state:\n                description: state\n                type: str\n                default: present\n                choices: ['present', 'absent']\n            type:\n                description: type\n                type: str\n            disks:\n                description: disks\n                type: list\n                default: []\n                elements: str\n            raid_device_count:\n                description: raid_device_count\n                type: int\n            raid_spare_count:\n                description: raid_spare_count\n                type: int\n            raid_metadata_version:\n                description: raid_metadata_version\n                type: str\n            raid_chunk_size:\n                description: raid_chunk_size\n                type: str\n    packages_only:\n        description: packages_only\n        type: bool\n        default: false\n    disklabel_type:\n        description:\n            - |\n              disklabel type string (eg: 'gpt') to use, overriding the built-in logic in blivet\n        type: str\n    safe_mode:\n        description:\n            - boolean indicating that we should fail rather than implicitly/automatically\n              removing devices or formatting\n        type: bool\n        default: true\n    pool_defaults:\n        description: pool_defaults\n        type: dict\n    volume_defaults:\n        description: volume_defaults\n        type: dict\n    use_partitions:\n        description: boolean indicating whether to create partitions on disks for pool backing devices\n        type: bool\n    diskvolume_mkfs_option_map:\n        description:\n            - dict which maps filesystem names to additional mkfs options that should be used\n              when creating a disk volume (that is, a whole disk filesystem)\n        type: dict\n        default: {}\n    uses_kmod_kvdo:\n        description:\n            - bool - set if platform uses_kmod_kvdo\n        type: bool\n        default: false\nauthor:\n    - David Lehman (@dwlehman)\n'''\n\nEXAMPLES = '''\n- name: Manage devices\n  blivet:\n    pools:\n      - name: \"{{ app_pool }}\"\n        disks: [\"sdd\", \"sde\"]\n        volumes:\n          - name: shared\n            size: \"10 GiB\"\n            mount_point: /opt/{{ app_pool }}/shared\n          - name: web\n            size: 8g\n            mount_point: /opt/{{ app_pool }}/web\n    volumes:\n      - name: whole_disk1\n        disks: ['sdc']\n        mount_point: /whole_disk1\n        fs_type: ext4\n        mount_options: journal_checksum,async,noexec\n'''\n\nRETURN = '''\nactions:\n    description: list of dicts describing actions taken\n    returned: success\n    type: list\n    elements: dict\nleaves:\n    description: list of paths to leaf devices\n    returned: success\n    type: list\n    elements: dict\nmounts:\n    description: list of dicts describing mounts to set up\n    returned: success\n    type: list\n    elements: dict\ncrypts:\n    description: list of dicts describing crypttab entries to set up\n    returned: success\n    type: list\n    elements: dict\npools:\n    description: list of dicts describing the pools w/ device path for each volume\n    returned: success\n    type: list\n    elements: dict\nvolumes:\n    description: list of dicts describing the volumes w/ device path for each\n    returned: success\n    type: list\n    elements: dict",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_yaml_parsing:[13:370]\n==scripts.fix_yaml_parsing:[13:370]\nclass YAMLParsingFixer:\n    def __init__(self, base_path: str = \".\"):\n        self.base_path = Path(base_path)\n        self.fixes_applied = []\n\n    def validate_yaml_syntax(self, file_path: Path) -> Tuple[bool, str]:\n        \"\"\"Validate YAML syntax and return error if any\"\"\"\n        try:\n            with open(file_path, 'r', encoding='utf-8') as f:\n                yaml.safe_load(f)\n            return True, \"\"\n        except yaml.YAMLError as e:\n            return False, str(e)\n        except Exception as e:\n            return False, f\"File read error: {str(e)}\"\n\n    def fix_double_module_names(self) -> int:\n        \"\"\"Fix doubled module names like ansible.builtin.ansible.builtin.file\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        patterns = [\n            (r'ansible\\.builtin\\.ansible\\.builtin\\.', 'ansible.builtin.'),\n            (r'community\\.general\\.community\\.general\\.', 'community.general.'),\n            (r'ansible\\.posix\\.ansible\\.posix\\.', 'ansible.posix.'),\n            (r'containers\\.podman\\.containers\\.podman\\.', 'containers.podman.'),\n        ]\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                for pattern, replacement in patterns:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed double module names in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing double module names in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_malformed_jinja_escaping(self) -> int:\n        \"\"\"Fix malformed Jinja template escaping\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various malformed escaping patterns\n                fixes = [\n                    # Fix \\'string\\' -> 'string'\n                    (r\"\\\\\\'([^\\\\\\']*?)\\\\\\'\", r\"'\\1'\"),\n                    # Fix \\\"string\\\" -> \"string\"\n                    (r'\\\\\"([^\\\\\"]*?)\\\\\"', r'\"\\1\"'),\n                    # Fix spacing in filters with escaped quotes\n                    (r'default\\(\\\\\\'([^\\\\\\']*)\\\\\\'\\)', r\"default('\\1')\"),\n                    (r'default\\(\\\\\"([^\\\\\"]*)\\\\\"\\\\)', r'default(\"\\1\")'),\n                    # Fix malformed Jinja spacing artifacts\n                    (r'\\{\\{\\s*([^}]+?)\\s*\\|\\s*default\\s*\\(\\s*\\\\\\'([^\\\\\\']*)\\\\\\'\\s*\\)\\s*\\}\\}', r\"{{ \\1 | default('\\2') }}\"),\n                    (r'\\{\\{\\s*([^}]+?)\\s*\\|\\s*default\\s*\\(\\s*\\\\\"([^\\\\\"]*)\\\\\"\\\\s*\\)\\s*\\}\\}', r'{{ \\1 | default(\"\\2\") }}'),\n                ]\n\n                for pattern, replacement in fixes:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed malformed Jinja escaping in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing Jinja escaping in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_jinja_spacing_artifacts(self) -> int:\n        \"\"\"Fix spacing artifacts from previous automated fixes\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various spacing artifacts\n                fixes = [\n                    # Fix excessive spaces around pipes\n                    (r'\\|\\s{2,}default\\s*\\(', '| default('),\n                    (r'\\|\\s{2,}join\\s*\\(', '| join('),\n                    (r'\\|\\s{2,}length\\s*', '| length'),\n                    (r'\\|\\s{2,}int\\s*', '| int'),\n                    (r'\\|\\s{2,}bool\\s*', '| bool'),\n\n                    # Fix multiple spaces in Jinja templates\n                    (r'\\{\\{\\s{2,}', '{{ '),\n                    (r'\\s{2,}\\}\\}', ' }}'),\n\n                    # Fix spacing around operators in Jinja\n                    (r'\\s+\\|\\s+default\\s+\\(\\s+', ' | default('),\n                    (r'\\s+\\|\\s+join\\s+\\(\\s+', ' | join('),\n\n                    # Fix line continuation artifacts\n                    (r'\\s+\\|\\s+\\n\\s+default', ' | default'),\n                ]\n\n                for pattern, replacement in fixes:\n                    content = re.sub(pattern, replacement, content, flags=re.MULTILINE)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed Jinja spacing artifacts in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing Jinja spacing artifacts in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_quote_inconsistencies(self) -> int:\n        \"\"\"Fix quote inconsistencies that can cause YAML parsing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix mixed quotes in YAML values\n                fixes = [\n                    # Fix mode values to be consistent\n                    (r'mode:\\s*\"([^\"]*)\"', r\"mode: '\\1'\"),\n                    # Fix path values with mixed quotes\n                    (r'path:\\s*\"([^\"]*)\"', r\"path: '\\1'\"),\n                    # Fix name values with mixed quotes in loops\n                    (r'name:\\s*\"([^\"]*)\"', r\"name: '\\1'\"),\n                ]\n\n                for pattern, replacement in fixes:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed quote inconsistencies in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing quote inconsistencies in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_indentation_issues(self) -> int:\n        \"\"\"Fix common indentation issues that break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    lines = f.readlines()\n\n                fixed_lines = []\n                changed = False\n\n                for i, line in enumerate(lines):\n                    original_line = line\n\n                    # Fix common indentation issues\n                    # Remove tabs and replace with spaces\n                    if '\\t' in line:\n                        line = line.expandtabs(2)\n                        changed = True\n\n                    # Fix lines that start with spaces but should be at root level\n                    if line.strip().startswith('---') and line.startswith(' '):\n                        line = line.lstrip()\n                        changed = True\n\n                    # Fix mixed indentation in task lists\n                    if re.match(r'^\\s*-\\s+name:', line):\n                        # Ensure consistent 2-space indentation\n                        indent_level = (len(line) - len(line.lstrip())) // 2 * 2\n                        line = ' ' * indent_level + line.lstrip()\n                        if line != original_line:\n                            changed = True\n\n                    fixed_lines.append(line)\n\n                if changed:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.writelines(fixed_lines)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed indentation issues in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing indentation in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_unicode_and_encoding_issues(self) -> int:\n        \"\"\"Fix unicode and encoding issues that can break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                # Try to read with different encodings\n                content = None\n                for encoding in ['utf-8', 'latin1', 'cp1252']:\n                    try:\n                        with open(file_path, 'r', encoding=encoding) as f:\n                            content = f.read()\n                        break\n                    except UnicodeDecodeError:\n                        continue\n\n                if content is None:\n                    continue\n\n                original_content = content\n\n                # Fix common unicode issues\n                fixes = [\n                    # Fix smart quotes\n                    ('\"', '\"'),\n                    ('\"', '\"'),\n                    (''', \"'\"),\n                    (''', \"'\"),\n                    # Fix em/en dashes\n                    ('\u2014', '-'),\n                    ('\u2013', '-'),\n                    # Fix ellipsis\n                    ('\u2026', '...'),\n                ]\n\n                for old_char, new_char in fixes:\n                    content = content.replace(old_char, new_char)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed unicode/encoding issues in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing unicode/encoding in {file_path}: {e}\")\n\n        return fixed_count\n\n    def validate_all_yaml_files(self) -> Tuple[int, List[str]]:\n        \"\"\"Validate all YAML files and return count of valid files and list of errors\"\"\"\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n        valid_count = 0\n        errors = []\n\n        for file_path in yaml_files:\n            is_valid, error = self.validate_yaml_syntax(file_path)\n            if is_valid:\n                valid_count += 1\n            else:\n                errors.append(f\"{file_path}: {error}\")\n\n        return valid_count, errors\n\n    def run_all_fixes(self) -> Dict[str, int]:\n        \"\"\"Run all YAML parsing fixes\"\"\"\n        print(\"\ud83d\udd27 Starting comprehensive YAML parsing fixes...\")\n\n        # Validate before fixes\n        total_files = len(list(self.base_path.glob(\"roles/**/*.yml\")))\n        valid_before, errors_before = self.validate_all_yaml_files()\n        print(f\"\ufffd Before fixes: {valid_before}/{total_files} files are valid YAML\")\n\n        if errors_before:\n            print(f\"\u274c Found {len(errors_before)} YAML parsing errors\")\n            for error in errors_before[:5]:  # Show first 5 errors\n                print(f\"   - {error}\")\n            if len(errors_before) > 5:\n                print(f\"   ... and {len(errors_before) - 5} more errors\")\n\n        results = {\n            \"double_module_names\": self.fix_double_module_names(),\n            \"malformed_jinja_escaping\": self.fix_malformed_jinja_escaping(),\n            \"jinja_spacing_artifacts\": self.fix_jinja_spacing_artifacts(),\n            \"quote_inconsistencies\": self.fix_quote_inconsistencies(),\n            \"indentation_issues\": self.fix_indentation_issues(),\n            \"unicode_encoding_issues\": self.fix_unicode_and_encoding_issues(),\n        }\n\n        # Validate after fixes\n        valid_after, errors_after = self.validate_all_yaml_files()\n\n        total_fixes = sum(results.values())\n\n        print(f\"\\n\u2705 YAML parsing fixes completed!\")\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")\n        print(f\"\ud83d\udcc8 YAML validity improved: {valid_before}/{total_files} \u2192 {valid_after}/{total_files}\")\n\n        if valid_after > valid_before:\n            print(f\"\ud83c\udf89 Fixed {valid_after - valid_before} previously broken YAML files!\")\n\n        if errors_after:\n            print(f\"\\n\u26a0\ufe0f  Remaining YAML errors ({len(errors_after)}):\")\n            for error in errors_after[:3]:  # Show first 3 remaining errors\n                print(f\"   - {error}\")\n            if len(errors_after) > 3:\n                print(f\"   ... and {len(errors_after) - 3} more errors\")\n\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():\n    fixer = YAMLParsingFixer()\n    results = fixer.run_all_fixes()\n\n    total_fixes = sum(results.values())\n    if total_fixes > 0:\n        print(f\"\\n\ud83d\udd0d Run 'ansible-lint roles/' again to see if parsing errors are resolved\")\n        return 0\n    else:\n        print(f\"\\n\u2705 No YAML parsing fixes were needed\")\n        return 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_yaml_parsing:[13:370]\n==scripts.fix_yaml_parsing:[13:370]\nclass YAMLParsingFixer:\n    def __init__(self, base_path: str = \".\"):\n        self.base_path = Path(base_path)\n        self.fixes_applied = []\n\n    def validate_yaml_syntax(self, file_path: Path) -> Tuple[bool, str]:\n        \"\"\"Validate YAML syntax and return error if any\"\"\"\n        try:\n            with open(file_path, 'r', encoding='utf-8') as f:\n                yaml.safe_load(f)\n            return True, \"\"\n        except yaml.YAMLError as e:\n            return False, str(e)\n        except Exception as e:\n            return False, f\"File read error: {str(e)}\"\n\n    def fix_double_module_names(self) -> int:\n        \"\"\"Fix doubled module names like ansible.builtin.ansible.builtin.file\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        patterns = [\n            (r'ansible\\.builtin\\.ansible\\.builtin\\.', 'ansible.builtin.'),\n            (r'community\\.general\\.community\\.general\\.', 'community.general.'),\n            (r'ansible\\.posix\\.ansible\\.posix\\.', 'ansible.posix.'),\n            (r'containers\\.podman\\.containers\\.podman\\.', 'containers.podman.'),\n        ]\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                for pattern, replacement in patterns:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed double module names in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing double module names in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_malformed_jinja_escaping(self) -> int:\n        \"\"\"Fix malformed Jinja template escaping\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various malformed escaping patterns\n                fixes = [\n                    # Fix \\'string\\' -> 'string'\n                    (r\"\\\\\\'([^\\\\\\']*?)\\\\\\'\", r\"'\\1'\"),\n                    # Fix \\\"string\\\" -> \"string\"\n                    (r'\\\\\"([^\\\\\"]*?)\\\\\"', r'\"\\1\"'),\n                    # Fix spacing in filters with escaped quotes\n                    (r'default\\(\\\\\\'([^\\\\\\']*)\\\\\\'\\)', r\"default('\\1')\"),\n                    (r'default\\(\\\\\"([^\\\\\"]*)\\\\\"\\\\)', r'default(\"\\1\")'),\n                    # Fix malformed Jinja spacing artifacts\n                    (r'\\{\\{\\s*([^}]+?)\\s*\\|\\s*default\\s*\\(\\s*\\\\\\'([^\\\\\\']*)\\\\\\'\\s*\\)\\s*\\}\\}', r\"{{ \\1 | default('\\2') }}\"),\n                    (r'\\{\\{\\s*([^}]+?)\\s*\\|\\s*default\\s*\\(\\s*\\\\\"([^\\\\\"]*)\\\\\"\\\\s*\\)\\s*\\}\\}', r'{{ \\1 | default(\"\\2\") }}'),\n                ]\n\n                for pattern, replacement in fixes:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed malformed Jinja escaping in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing Jinja escaping in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_jinja_spacing_artifacts(self) -> int:\n        \"\"\"Fix spacing artifacts from previous automated fixes\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various spacing artifacts\n                fixes = [\n                    # Fix excessive spaces around pipes\n                    (r'\\|\\s{2,}default\\s*\\(', '| default('),\n                    (r'\\|\\s{2,}join\\s*\\(', '| join('),\n                    (r'\\|\\s{2,}length\\s*', '| length'),\n                    (r'\\|\\s{2,}int\\s*', '| int'),\n                    (r'\\|\\s{2,}bool\\s*', '| bool'),\n\n                    # Fix multiple spaces in Jinja templates\n                    (r'\\{\\{\\s{2,}', '{{ '),\n                    (r'\\s{2,}\\}\\}', ' }}'),\n\n                    # Fix spacing around operators in Jinja\n                    (r'\\s+\\|\\s+default\\s+\\(\\s+', ' | default('),\n                    (r'\\s+\\|\\s+join\\s+\\(\\s+', ' | join('),\n\n                    # Fix line continuation artifacts\n                    (r'\\s+\\|\\s+\\n\\s+default', ' | default'),\n                ]\n\n                for pattern, replacement in fixes:\n                    content = re.sub(pattern, replacement, content, flags=re.MULTILINE)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed Jinja spacing artifacts in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing Jinja spacing artifacts in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_quote_inconsistencies(self) -> int:\n        \"\"\"Fix quote inconsistencies that can cause YAML parsing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix mixed quotes in YAML values\n                fixes = [\n                    # Fix mode values to be consistent\n                    (r'mode:\\s*\"([^\"]*)\"', r\"mode: '\\1'\"),\n                    # Fix path values with mixed quotes\n                    (r'path:\\s*\"([^\"]*)\"', r\"path: '\\1'\"),\n                    # Fix name values with mixed quotes in loops\n                    (r'name:\\s*\"([^\"]*)\"', r\"name: '\\1'\"),\n                ]\n\n                for pattern, replacement in fixes:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed quote inconsistencies in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing quote inconsistencies in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_indentation_issues(self) -> int:\n        \"\"\"Fix common indentation issues that break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    lines = f.readlines()\n\n                fixed_lines = []\n                changed = False\n\n                for i, line in enumerate(lines):\n                    original_line = line\n\n                    # Fix common indentation issues\n                    # Remove tabs and replace with spaces\n                    if '\\t' in line:\n                        line = line.expandtabs(2)\n                        changed = True\n\n                    # Fix lines that start with spaces but should be at root level\n                    if line.strip().startswith('---') and line.startswith(' '):\n                        line = line.lstrip()\n                        changed = True\n\n                    # Fix mixed indentation in task lists\n                    if re.match(r'^\\s*-\\s+name:', line):\n                        # Ensure consistent 2-space indentation\n                        indent_level = (len(line) - len(line.lstrip())) // 2 * 2\n                        line = ' ' * indent_level + line.lstrip()\n                        if line != original_line:\n                            changed = True\n\n                    fixed_lines.append(line)\n\n                if changed:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.writelines(fixed_lines)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed indentation issues in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing indentation in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_unicode_and_encoding_issues(self) -> int:\n        \"\"\"Fix unicode and encoding issues that can break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                # Try to read with different encodings\n                content = None\n                for encoding in ['utf-8', 'latin1', 'cp1252']:\n                    try:\n                        with open(file_path, 'r', encoding=encoding) as f:\n                            content = f.read()\n                        break\n                    except UnicodeDecodeError:\n                        continue\n\n                if content is None:\n                    continue\n\n                original_content = content\n\n                # Fix common unicode issues\n                fixes = [\n                    # Fix smart quotes\n                    ('\"', '\"'),\n                    ('\"', '\"'),\n                    (''', \"'\"),\n                    (''', \"'\"),\n                    # Fix em/en dashes\n                    ('\u2014', '-'),\n                    ('\u2013', '-'),\n                    # Fix ellipsis\n                    ('\u2026', '...'),\n                ]\n\n                for old_char, new_char in fixes:\n                    content = content.replace(old_char, new_char)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed unicode/encoding issues in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing unicode/encoding in {file_path}: {e}\")\n\n        return fixed_count\n\n    def validate_all_yaml_files(self) -> Tuple[int, List[str]]:\n        \"\"\"Validate all YAML files and return count of valid files and list of errors\"\"\"\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n        valid_count = 0\n        errors = []\n\n        for file_path in yaml_files:\n            is_valid, error = self.validate_yaml_syntax(file_path)\n            if is_valid:\n                valid_count += 1\n            else:\n                errors.append(f\"{file_path}: {error}\")\n\n        return valid_count, errors\n\n    def run_all_fixes(self) -> Dict[str, int]:\n        \"\"\"Run all YAML parsing fixes\"\"\"\n        print(\"\ud83d\udd27 Starting comprehensive YAML parsing fixes...\")\n\n        # Validate before fixes\n        total_files = len(list(self.base_path.glob(\"roles/**/*.yml\")))\n        valid_before, errors_before = self.validate_all_yaml_files()\n        print(f\"\ufffd Before fixes: {valid_before}/{total_files} files are valid YAML\")\n\n        if errors_before:\n            print(f\"\u274c Found {len(errors_before)} YAML parsing errors\")\n            for error in errors_before[:5]:  # Show first 5 errors\n                print(f\"   - {error}\")\n            if len(errors_before) > 5:\n                print(f\"   ... and {len(errors_before) - 5} more errors\")\n\n        results = {\n            \"double_module_names\": self.fix_double_module_names(),\n            \"malformed_jinja_escaping\": self.fix_malformed_jinja_escaping(),\n            \"jinja_spacing_artifacts\": self.fix_jinja_spacing_artifacts(),\n            \"quote_inconsistencies\": self.fix_quote_inconsistencies(),\n            \"indentation_issues\": self.fix_indentation_issues(),\n            \"unicode_encoding_issues\": self.fix_unicode_and_encoding_issues(),\n        }\n\n        # Validate after fixes\n        valid_after, errors_after = self.validate_all_yaml_files()\n\n        total_fixes = sum(results.values())\n\n        print(f\"\\n\u2705 YAML parsing fixes completed!\")\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")\n        print(f\"\ud83d\udcc8 YAML validity improved: {valid_before}/{total_files} \u2192 {valid_after}/{total_files}\")\n\n        if valid_after > valid_before:\n            print(f\"\ud83c\udf89 Fixed {valid_after - valid_before} previously broken YAML files!\")\n\n        if errors_after:\n            print(f\"\\n\u26a0\ufe0f  Remaining YAML errors ({len(errors_after)}):\")\n            for error in errors_after[:3]:  # Show first 3 remaining errors\n                print(f\"   - {error}\")\n            if len(errors_after) > 3:\n                print(f\"   ... and {len(errors_after) - 3} more errors\")\n\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():\n    fixer = YAMLParsingFixer()\n    results = fixer.run_all_fixes()\n\n    total_fixes = sum(results.values())\n    if total_fixes > 0:\n        print(f\"\\n\ud83d\udd0d Run 'ansible-lint roles/' again to see if parsing errors are resolved\")\n        return 0\n    else:\n        print(f\"\\n\u2705 No YAML parsing fixes were needed\")\n        return 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[14:351]\n==scripts.fix_ansible_lint_advanced:[14:351]\nclass AdvancedAnsibleLintFixer:\n    def __init__(self, base_path: str = \".\"):\n        self.base_path = Path(base_path)\n        self.fixes_applied = []\n\n    def fix_advanced_jinja_spacing(self) -> int:\n        \"\"\"Fix complex Jinja2 spacing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix complex Jinja patterns with multiple pipes and spaces\n                patterns = [\n                    # {{ var|filter|filter }} -> {{ var | filter | filter }}\n                    (r'\\{\\{\\s*([^}|]+)\\|([^}|]+)\\|([^}]+)\\s*\\}\\}', r'{{ \\1 | \\2 | \\3 }}'),\n                    # {{ var      |      filter }} -> {{ var | filter }}\n                    (r'\\{\\{\\s*([^}|]+)\\s+\\|\\s+([^}]+)\\s*\\}\\}', r'{{ \\1 | \\2 }}'),\n                    # Fix multi-space issues in joins\n                    (r'\\|\\s*join\\(\\s*[\\'\"]([^\\'\"]*)[\\'\"]\\s*\\)\\s*\\|\\s*', r'| join(\\'\\1\\') | '),\n                    # Fix spacing around default filter\n                    (r'\\|\\s*default\\s*\\(\\s*[\\'\"]([^\\'\"]*)[\\'\"]\\s*\\)', r'| default(\\'\\1\\')'),\n                ]\n\n                for pattern, replacement in patterns:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed advanced Jinja spacing in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing advanced Jinja spacing in {file_path}: {e}\")\n\n        return fixed_count\n\n    def add_changed_when_conditions(self) -> int:\n        \"\"\"Add changed_when: false to shell/command tasks that shouldn't report changes\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        # Common patterns for tasks that are typically idempotent checks\n        read_only_patterns = [\n            r'check\\s+if',\n            r'verify\\s+',\n            r'get\\s+(current|existing)',\n            r'test\\s+',\n            r'validate\\s+',\n            r'show\\s+',\n            r'list\\s+',\n            r'cat\\s+',\n            r'grep\\s+',\n            r'find\\s+',\n            r'stat\\s+',\n        ]\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n                lines = content.split('\\n')\n                new_lines = []\n                i = 0\n\n                while i < len(lines):\n                    line = lines[i]\n\n                    # Look for shell/command tasks\n                    if re.match(r'\\s*-\\s+(name|shell|command):', line) or \\\n                       'module: shell' in line or 'module: command' in line:\n\n                        # Check if this is a task block\n                        task_lines = [line]\n                        indent_level = len(line) - len(line.lstrip())\n                        j = i + 1\n\n                        # Collect the full task\n                        while j < len(lines):\n                            next_line = lines[j]\n                            next_indent = len(next_line) - len(next_line.lstrip())\n\n                            if next_line.strip() == '':\n                                task_lines.append(next_line)\n                                j += 1\n                                continue\n\n                            if next_indent <= indent_level and next_line.strip().startswith('-'):\n                                break\n\n                            task_lines.append(next_line)\n                            j += 1\n\n                        task_content = '\\n'.join(task_lines)\n\n                        # Check if it's a shell/command task without changed_when\n                        if ('shell:' in task_content or 'command:' in task_content) and \\\n                           'changed_when:' not in task_content and \\\n                           'register:' not in task_content:\n\n                            # Check if it matches read-only patterns\n                            command_text = task_content.lower()\n                            is_readonly = any(re.search(pattern, command_text) for pattern in read_only_patterns)\n\n                            if is_readonly:\n                                # Add changed_when: false\n                                last_task_line = len(task_lines) - 1\n                                while last_task_line >= 0 and task_lines[last_task_line].strip() == '':\n                                    last_task_line -= 1\n\n                                if last_task_line >= 0:\n                                    base_indent = ' ' * (indent_level + 2)\n                                    task_lines.insert(last_task_line + 1, f\"{base_indent}changed_when: false\")\n                                    self.fixes_applied.append(f\"Added changed_when: false to read-only task in {file_path}\")\n\n                        new_lines.extend(task_lines)\n                        i = j\n                        continue\n\n                    new_lines.append(line)\n                    i += 1\n\n                new_content = '\\n'.join(new_lines)\n                if new_content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(new_content)\n                    fixed_count += 1\n\n            except Exception as e:\n                print(f\"Error adding changed_when in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_fqcn_actions(self) -> int:\n        \"\"\"Fix FQCN (Fully Qualified Collection Name) issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        # Common FQCN replacements\n        fqcn_mappings = {\n            'modprobe': 'community.general.modprobe',\n            'setup': 'ansible.builtin.setup',\n            'ping': 'ansible.builtin.ping',\n            'copy': 'ansible.builtin.copy',\n            'template': 'ansible.builtin.template',\n            'file': 'ansible.builtin.file',\n            'lineinfile': 'ansible.builtin.lineinfile',\n            'replace': 'ansible.builtin.replace',\n            'package': 'ansible.builtin.package',\n            'service': 'ansible.builtin.service',\n            'systemd': 'ansible.builtin.systemd',\n            'mount': 'ansible.posix.mount',\n            'firewalld': 'ansible.posix.firewalld',\n            'sysctl': 'ansible.posix.sysctl',\n        }\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                for short_name, fqcn in fqcn_mappings.items():\n                    # Replace module usage patterns\n                    patterns = [\n                        (f'{short_name}:', f'{fqcn}:'),\n                        (f'module: {short_name}', f'module: {fqcn}'),\n                    ]\n\n                    for pattern, replacement in patterns:\n                        content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed FQCN actions in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing FQCN in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_partial_become_tasks(self) -> int:\n        \"\"\"Fix partial become tasks by adding become: true\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n                lines = content.split('\\n')\n                new_lines = []\n                i = 0\n\n                while i < len(lines):\n                    line = lines[i]\n\n                    # Look for tasks with become_user but no become\n                    if 'become_user:' in line:\n                        # Check the context for this task\n                        task_start = i\n                        indent_level = len(line) - len(line.lstrip())\n\n                        # Find the start of this task\n                        while task_start > 0:\n                            prev_line = lines[task_start - 1]\n                            prev_indent = len(prev_line) - len(prev_line.lstrip())\n                            if prev_line.strip().startswith('- name:') or prev_indent < indent_level:\n                                break\n                            task_start -= 1\n\n                        # Collect the task block\n                        task_lines = []\n                        j = task_start\n                        while j < len(lines):\n                            task_line = lines[j]\n                            task_indent = len(task_line) - len(task_line.lstrip())\n\n                            if j > task_start and task_line.strip().startswith('-') and task_indent <= indent_level:\n                                break\n\n                            task_lines.append((j, task_line))\n                            j += 1\n\n                        # Check if become: is already present\n                        task_text = '\\n'.join([line for _, line in task_lines])\n                        if 'become_user:' in task_text and 'become:' not in task_text:\n                            # Add become: true before become_user\n                            base_indent = ' ' * indent_level\n                            new_lines.append(f\"{base_indent}become: true\")\n                            self.fixes_applied.append(f\"Added become: true to task with become_user in {file_path}\")\n\n                    new_lines.append(line)\n                    i += 1\n\n                new_content = '\\n'.join(new_lines)\n                if new_content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(new_content)\n                    fixed_count += 1\n\n            except Exception as e:\n                print(f\"Error fixing partial become in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_literal_compare(self) -> int:\n        \"\"\"Fix literal True/False comparisons\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix literal comparisons\n                patterns = [\n                    (r'==\\s*True\\b', ''),\n                    (r'==\\s*False\\b', ' == false'),\n                    (r'!=\\s*True\\b', ' == false'),\n                    (r'!=\\s*False\\b', ''),\n                    (r'\\bis\\s+True\\b', ''),\n                    (r'\\bis\\s+False\\b', ' == false'),\n                    (r'\\bis\\s+not\\s+True\\b', ' == false'),\n                    (r'\\bis\\s+not\\s+False\\b', ''),\n                ]\n\n                for pattern, replacement in patterns:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed literal comparisons in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing literal compare in {file_path}: {e}\")\n\n        return fixed_count\n\n    def run_all_fixes(self) -> Dict[str, int]:\n        \"\"\"Run all advanced automated fixes\"\"\"\n        print(\"\ud83d\udd27 Starting advanced automated ansible-lint fixes...\")\n\n        results = {\n            \"advanced_jinja_spacing\": self.fix_advanced_jinja_spacing(),\n            \"changed_when_conditions\": self.add_changed_when_conditions(),\n            \"fqcn_actions\": self.fix_fqcn_actions(),\n            \"partial_become_tasks\": self.fix_partial_become_tasks(),\n            \"literal_compare\": self.fix_literal_compare(),\n        }\n\n        total_fixes = sum(results.values())\n\n        print(f\"\\n\u2705 Advanced automated fixes completed!\")\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")\n\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():\n    fixer = AdvancedAnsibleLintFixer()\n    results = fixer.run_all_fixes()\n\n    print(f\"\\n\ud83d\udd0d Run 'ansible-lint roles/' again to see remaining issues\")\n    return 0 if sum(results.values()) > 0 else 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[14:351]\n==scripts.fix_ansible_lint_advanced:[14:351]\nclass AdvancedAnsibleLintFixer:\n    def __init__(self, base_path: str = \".\"):\n        self.base_path = Path(base_path)\n        self.fixes_applied = []\n\n    def fix_advanced_jinja_spacing(self) -> int:\n        \"\"\"Fix complex Jinja2 spacing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix complex Jinja patterns with multiple pipes and spaces\n                patterns = [\n                    # {{ var|filter|filter }} -> {{ var | filter | filter }}\n                    (r'\\{\\{\\s*([^}|]+)\\|([^}|]+)\\|([^}]+)\\s*\\}\\}', r'{{ \\1 | \\2 | \\3 }}'),\n                    # {{ var      |      filter }} -> {{ var | filter }}\n                    (r'\\{\\{\\s*([^}|]+)\\s+\\|\\s+([^}]+)\\s*\\}\\}', r'{{ \\1 | \\2 }}'),\n                    # Fix multi-space issues in joins\n                    (r'\\|\\s*join\\(\\s*[\\'\"]([^\\'\"]*)[\\'\"]\\s*\\)\\s*\\|\\s*', r'| join(\\'\\1\\') | '),\n                    # Fix spacing around default filter\n                    (r'\\|\\s*default\\s*\\(\\s*[\\'\"]([^\\'\"]*)[\\'\"]\\s*\\)', r'| default(\\'\\1\\')'),\n                ]\n\n                for pattern, replacement in patterns:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed advanced Jinja spacing in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing advanced Jinja spacing in {file_path}: {e}\")\n\n        return fixed_count\n\n    def add_changed_when_conditions(self) -> int:\n        \"\"\"Add changed_when: false to shell/command tasks that shouldn't report changes\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        # Common patterns for tasks that are typically idempotent checks\n        read_only_patterns = [\n            r'check\\s+if',\n            r'verify\\s+',\n            r'get\\s+(current|existing)',\n            r'test\\s+',\n            r'validate\\s+',\n            r'show\\s+',\n            r'list\\s+',\n            r'cat\\s+',\n            r'grep\\s+',\n            r'find\\s+',\n            r'stat\\s+',\n        ]\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n                lines = content.split('\\n')\n                new_lines = []\n                i = 0\n\n                while i < len(lines):\n                    line = lines[i]\n\n                    # Look for shell/command tasks\n                    if re.match(r'\\s*-\\s+(name|shell|command):', line) or \\\n                       'module: shell' in line or 'module: command' in line:\n\n                        # Check if this is a task block\n                        task_lines = [line]\n                        indent_level = len(line) - len(line.lstrip())\n                        j = i + 1\n\n                        # Collect the full task\n                        while j < len(lines):\n                            next_line = lines[j]\n                            next_indent = len(next_line) - len(next_line.lstrip())\n\n                            if next_line.strip() == '':\n                                task_lines.append(next_line)\n                                j += 1\n                                continue\n\n                            if next_indent <= indent_level and next_line.strip().startswith('-'):\n                                break\n\n                            task_lines.append(next_line)\n                            j += 1\n\n                        task_content = '\\n'.join(task_lines)\n\n                        # Check if it's a shell/command task without changed_when\n                        if ('shell:' in task_content or 'command:' in task_content) and \\\n                           'changed_when:' not in task_content and \\\n                           'register:' not in task_content:\n\n                            # Check if it matches read-only patterns\n                            command_text = task_content.lower()\n                            is_readonly = any(re.search(pattern, command_text) for pattern in read_only_patterns)\n\n                            if is_readonly:\n                                # Add changed_when: false\n                                last_task_line = len(task_lines) - 1\n                                while last_task_line >= 0 and task_lines[last_task_line].strip() == '':\n                                    last_task_line -= 1\n\n                                if last_task_line >= 0:\n                                    base_indent = ' ' * (indent_level + 2)\n                                    task_lines.insert(last_task_line + 1, f\"{base_indent}changed_when: false\")\n                                    self.fixes_applied.append(f\"Added changed_when: false to read-only task in {file_path}\")\n\n                        new_lines.extend(task_lines)\n                        i = j\n                        continue\n\n                    new_lines.append(line)\n                    i += 1\n\n                new_content = '\\n'.join(new_lines)\n                if new_content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(new_content)\n                    fixed_count += 1\n\n            except Exception as e:\n                print(f\"Error adding changed_when in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_fqcn_actions(self) -> int:\n        \"\"\"Fix FQCN (Fully Qualified Collection Name) issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        # Common FQCN replacements\n        fqcn_mappings = {\n            'modprobe': 'community.general.modprobe',\n            'setup': 'ansible.builtin.setup',\n            'ping': 'ansible.builtin.ping',\n            'copy': 'ansible.builtin.copy',\n            'template': 'ansible.builtin.template',\n            'file': 'ansible.builtin.file',\n            'lineinfile': 'ansible.builtin.lineinfile',\n            'replace': 'ansible.builtin.replace',\n            'package': 'ansible.builtin.package',\n            'service': 'ansible.builtin.service',\n            'systemd': 'ansible.builtin.systemd',\n            'mount': 'ansible.posix.mount',\n            'firewalld': 'ansible.posix.firewalld',\n            'sysctl': 'ansible.posix.sysctl',\n        }\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                for short_name, fqcn in fqcn_mappings.items():\n                    # Replace module usage patterns\n                    patterns = [\n                        (f'{short_name}:', f'{fqcn}:'),\n                        (f'module: {short_name}', f'module: {fqcn}'),\n                    ]\n\n                    for pattern, replacement in patterns:\n                        content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed FQCN actions in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing FQCN in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_partial_become_tasks(self) -> int:\n        \"\"\"Fix partial become tasks by adding become: true\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n                lines = content.split('\\n')\n                new_lines = []\n                i = 0\n\n                while i < len(lines):\n                    line = lines[i]\n\n                    # Look for tasks with become_user but no become\n                    if 'become_user:' in line:\n                        # Check the context for this task\n                        task_start = i\n                        indent_level = len(line) - len(line.lstrip())\n\n                        # Find the start of this task\n                        while task_start > 0:\n                            prev_line = lines[task_start - 1]\n                            prev_indent = len(prev_line) - len(prev_line.lstrip())\n                            if prev_line.strip().startswith('- name:') or prev_indent < indent_level:\n                                break\n                            task_start -= 1\n\n                        # Collect the task block\n                        task_lines = []\n                        j = task_start\n                        while j < len(lines):\n                            task_line = lines[j]\n                            task_indent = len(task_line) - len(task_line.lstrip())\n\n                            if j > task_start and task_line.strip().startswith('-') and task_indent <= indent_level:\n                                break\n\n                            task_lines.append((j, task_line))\n                            j += 1\n\n                        # Check if become: is already present\n                        task_text = '\\n'.join([line for _, line in task_lines])\n                        if 'become_user:' in task_text and 'become:' not in task_text:\n                            # Add become: true before become_user\n                            base_indent = ' ' * indent_level\n                            new_lines.append(f\"{base_indent}become: true\")\n                            self.fixes_applied.append(f\"Added become: true to task with become_user in {file_path}\")\n\n                    new_lines.append(line)\n                    i += 1\n\n                new_content = '\\n'.join(new_lines)\n                if new_content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(new_content)\n                    fixed_count += 1\n\n            except Exception as e:\n                print(f\"Error fixing partial become in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_literal_compare(self) -> int:\n        \"\"\"Fix literal True/False comparisons\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix literal comparisons\n                patterns = [\n                    (r'==\\s*True\\b', ''),\n                    (r'==\\s*False\\b', ' == false'),\n                    (r'!=\\s*True\\b', ' == false'),\n                    (r'!=\\s*False\\b', ''),\n                    (r'\\bis\\s+True\\b', ''),\n                    (r'\\bis\\s+False\\b', ' == false'),\n                    (r'\\bis\\s+not\\s+True\\b', ' == false'),\n                    (r'\\bis\\s+not\\s+False\\b', ''),\n                ]\n\n                for pattern, replacement in patterns:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed literal comparisons in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing literal compare in {file_path}: {e}\")\n\n        return fixed_count\n\n    def run_all_fixes(self) -> Dict[str, int]:\n        \"\"\"Run all advanced automated fixes\"\"\"\n        print(\"\ud83d\udd27 Starting advanced automated ansible-lint fixes...\")\n\n        results = {\n            \"advanced_jinja_spacing\": self.fix_advanced_jinja_spacing(),\n            \"changed_when_conditions\": self.add_changed_when_conditions(),\n            \"fqcn_actions\": self.fix_fqcn_actions(),\n            \"partial_become_tasks\": self.fix_partial_become_tasks(),\n            \"literal_compare\": self.fix_literal_compare(),\n        }\n\n        total_fixes = sum(results.values())\n\n        print(f\"\\n\u2705 Advanced automated fixes completed!\")\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")\n\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():\n    fixer = AdvancedAnsibleLintFixer()\n    results = fixer.run_all_fixes()\n\n    print(f\"\\n\ud83d\udd0d Run 'ansible-lint roles/' again to see remaining issues\")\n    return 0 if sum(results.values()) > 0 else 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==storage_lsr.argument_validator:[4:355]\n==storage_lsr.argument_validator:[4:355]\n__metaclass__ = type\n\n# pylint: disable=undefined-variable\nSTRING_TYPE = str if sys.version_info.major == 3 else basestring  # noqa:F821\n\nBOOLEANS_TRUE = ['y', 'yes', 'on', '1', 'true', 't', 1, 1.0, True]\nBOOLEANS_FALSE = ['n', 'no', 'off', '0', 'false', 'f', 0, 0.0, False]\n\n# Combinations of parameters (and their values) that will raise exception\n# use [] if value does not matter\n\n# example: {'options': {'pools.encryption:[True]', pools.volumes.deduplication:[True]}, 'err_msg:' 'deduplication cannot be used with encryption'}\nUNSUPPORTED_COMBOS = [{'options': {'pools.volumes.encryption': BOOLEANS_TRUE,\n                                   'pools.volumes.deduplication': BOOLEANS_TRUE},\n                       'err_msg': \"Deduplication is not supported on encrypted volumes\"},\n                      {'options': {'pools.volumes.encryption': BOOLEANS_TRUE,\n                                   'pools.volumes.compression': BOOLEANS_TRUE},\n                       'err_msg': \"Compression is not supported on encrypted volumes\"},\n                      {'options': {'pools.volumes.thin': BOOLEANS_TRUE,\n                                   'pools.volumes.compression': BOOLEANS_TRUE},\n                       'err_msg': \"Dedupliation is not supported on thin pool volumes\"},\n                      {'options': {'pools.volumes.thin': BOOLEANS_TRUE,\n                                   'pools.volumes.deduplication': BOOLEANS_TRUE},\n                       'err_msg': \"Compression is not supported on thin pool volumes\"}]\n\n\nclass ArgValidator(object):\n\n    @classmethod\n    def _validate_list(cls, value):\n        if isinstance(value, list):\n            return value\n\n        if isinstance(value, STRING_TYPE):\n            return value.split(\",\")\n\n        if isinstance(value, int) or isinstance(value, float):\n            return [value]\n\n        raise TypeError(\"'%s' has to be a list\" % value)\n\n    @classmethod\n    def _validate_str(cls, value):\n        return str(value)\n\n    @classmethod\n    def _validate_bool(cls, value):\n\n        if value in BOOLEANS_TRUE:\n            return True\n        if value in BOOLEANS_FALSE:\n            return False\n        if value is None:\n            return None\n        raise TypeError(\"'%s' has to be convertible to a bool\" % value)\n\n    @classmethod\n    def _validate_int(cls, value):\n        try:\n            return int(value)\n        except ValueError:\n            raise TypeError(\"'%s' has to be an integer\" % value)\n\n    @classmethod\n    def _validate_float(cls, value):\n        try:\n            return float(value)\n        except ValueError:\n            raise TypeError(\"'%s' has to be a float\" % value)\n\n    @classmethod\n    def validate_item(cls, spec, param, key):\n        # validate and return normalized value of a given parameter based on spec\n        # raises TypeError, ValueError on failure\n\n        if key not in param or param[key] is None:\n            # if the parameter is not specified, use default if defined\n            return spec[key].get('default', None)\n\n        choices = spec[key].get('choices')\n        if choices is not None and param[key] not in choices:\n            raise ValueError(\"'%s' has to be one of: %s\" % (param[key], ', '.join(choices)))\n\n        validate = cls.VALIDATION_TYPE_DISPATCHER[spec[key].get('type', 'str')]\n\n        normalized_value = validate(param[key])\n\n        return normalized_value\n\n    @classmethod\n    def validate_list(cls, spec_type, values):\n        # raises TypeError, ValueError on failure\n\n        normalized_list = list()\n        for value in values:\n            validate = cls.VALIDATION_TYPE_DISPATCHER[spec_type]\n            normalized_value = validate(value)\n            normalized_list.append(normalized_value)\n\n        return normalized_list\n\n\nArgValidator.VALIDATION_TYPE_DISPATCHER = dict(list=ArgValidator._validate_list,\n                                               str=ArgValidator._validate_str,\n                                               bool=ArgValidator._validate_bool,\n                                               int=ArgValidator._validate_int,\n                                               float=ArgValidator._validate_float)\n\n\ndef _validate_parameters(argument_spec, parameters, error_log=None, updated_params=None):\n    # recursively validate and normalize all parameters based on argument specifications\n\n    if error_log is None:\n        error_log = list()\n    if updated_params is None:\n        updated_params = dict()\n\n    for spec, value in argument_spec.items():\n\n        if spec not in parameters:\n            # normalize unused parameters\n            try:\n                # value is not defined, try to use default\n                updated_params[spec] = value['default']\n                # cannot use value.get('default', *); * could be the default\n            except KeyError:\n                # value is not defined and has no default value\n                if value['type'] == 'list':\n                    updated_params[spec] = list()\n                elif value['type'] == 'dict':\n                    updated_params[spec] = dict()\n                else:\n                    updated_params[spec] = None\n\n        elif value.get('type') == 'dict':\n            if 'options' not in value:\n                # generic dict, no way to check its contents\n                updated_params[spec] = parameters[spec]\n            else:\n                # nested dict\n                errors, up_params = _validate_parameters(value['options'], parameters[spec])\n                if errors:\n                    # recursion will build prefixes of the error messages\n                    errors = [spec + '->' + x for x in errors]\n                    error_log.extend(errors)\n                updated_params[spec] = up_params\n\n        elif value.get('type') == 'list':\n            if 'options' in value and value.get('elements', '') == 'dict':\n                # nested list of dicts\n                updated_params[spec] = list()\n                for item in parameters[spec]:\n                    errors, up_params = _validate_parameters(value['options'], item)\n                    if errors:\n                        # recursion will build prefixes of the error messages\n                        errors = [spec + '->' + x for x in errors]\n                        error_log.extend(errors)\n                    updated_params[spec].append(up_params)\n            elif 'elements' not in value:\n                # generic list, no way to check its contents\n                updated_params[spec] = parameters[spec]\n            else:\n                # list of items of defined type\n                try:\n                    normalized_list = ArgValidator.validate_list(value['elements'], parameters[spec])\n                except (TypeError, ValueError) as e:\n                    normalized_list = \"ERROR\"\n                    error_log.append(spec + ': ' + str(e))\n\n                updated_params[spec] = normalized_list\n\n        else:\n            # ordinary type\n            try:\n                normalized_value = ArgValidator.validate_item(argument_spec, parameters, spec)\n            except (TypeError, ValueError) as e:\n                normalized_value = \"ERROR\"\n                error_log.append(spec + ': ' + str(e))\n\n            updated_params[spec] = normalized_value\n\n    return (error_log, updated_params)\n\n\ndef generate_combinations(input_list):\n    # Create list of all valid combinations of parameters\n    # (Note: 'valid' means 'worth exploring')\n\n    # Fill in the stack with the first item to expand\n    stack = [[{'path': input_list[0]['path'],\n               'indices': x,\n               'backtrack_indices': input_list[0]['backtrack_indices']}]\n             for x in input_list[0]['indices']]\n\n    result = []\n\n    while stack:\n        sequence = stack.pop()\n        for item in input_list[len(sequence)]['indices']:\n            new_sequence = sequence + [{'path': input_list[len(sequence)]['path'],\n                                        'indices': item,\n                                        'backtrack_indices': input_list[len(sequence)]['backtrack_indices']}]\n            if len(new_sequence) < len(input_list):\n                stack.append(new_sequence)\n            else:\n                # sequence is complete, now to make sure the combination is valid\n\n                # 'valid' means that all the same path roots have the same indices\n                indices_pairs = {}\n                for rule in new_sequence:\n                    encountered_index = indices_pairs.get(rule['path'][0], -1)\n                    if encountered_index == -1:\n                        # path not yet encountered\n                        indices_pairs[rule['path'][0]] = rule['indices'][0]\n                    elif encountered_index != rule['indices'][0]:\n                        # invalid combination\n                        break\n                else:\n                    # for loop ended without break - combination is valid\n                    result.append(new_sequence)\n\n    return result\n\n\ndef locate_parameter(params, path, param_value):\n    # path: complete path of searched parameter e.g. \"['pools', 'volumes', 'deduplication']\"\n    # param_value: list of searched values or [] if value doesn't matter\n    # returns list of \"hash\" of matching items or [] when not found\n\n    # Stack. Each item consists of\n    # - \"value\"   - (part of) nested dictionary\n    # - \"level\"   - depth of nest (e.g. for \"pool[1].volume[0].size\": level=1 ~ \"pool[1].volume[0]\")\n    # - \"indices\" - list of indices (e.g. for \"pool[1].volume[0].size\": indices == [1, 0, None])\n    stack = [{'value': params, 'level': 0, 'indices': []}]\n    result = {'path': path, 'indices': []}\n\n    while stack:\n\n        stack_item = stack.pop()\n\n        if stack_item['level'] < len(path):\n\n            path_step = path[stack_item['level']]\n            # Expand stack item\n            item = stack_item['value'].get(path_step)\n\n            if isinstance(item, list):\n                # Push each list item back into the stack\n                for idx in range(len(item)):\n                    stack.append({'value': item[idx],\n                                  'level': stack_item['level'] + 1,\n                                  'indices': stack_item['indices'] + [idx]})\n            else:\n                # Push expanded item back into the stack\n                stack.append({'value': item,\n                              'level': stack_item['level'] + 1,\n                              'indices': stack_item['indices'] + [None]})\n        else:\n            # The end of given path\n            if param_value == list() or stack_item['value'] in param_value:\n                result['indices'].append(stack_item['indices'])\n\n    if result['indices'] == []:\n        return None\n\n    return result\n\n\ndef format_result(combo):\n    rules_list = list()\n    for rule in combo:\n        path_list = rule['path'][0].split('.')\n        indices = rule['backtrack_indices']\n\n        rule_str = \"\"\n        for i in range(len(path_list)):\n            rule_str += path_list[i]\n            if i < len(indices) and indices[i] is not None:\n                rule_str += '[' + str(indices[i]) + ']'\n            rule_str += '.'\n        rules_list.append(rule_str[:-1])\n    return rules_list\n\n\ndef check_param_combos(params):\n    all_combos = list()\n\n    for combo in UNSUPPORTED_COMBOS:\n\n        found_combos = list()\n        recorded_matches = list()\n\n        for key, value in combo['options'].items():\n            found = locate_parameter(params, key.split('.'), value)\n            if found is None:\n                # Locate found nothing => the whole combo is clean, no need to continue\n                break\n            else:\n                recorded_matches.append(found)\n        else:\n            # No break happened in loop => need to check result combinations\n\n            for match in recorded_matches:\n                match['backtrack_indices'] = list()\n\n            stack = [recorded_matches]\n\n            while stack:\n                match = stack.pop()\n                combinations = generate_combinations(match)\n\n                # It is now possible to dive by shifting the root one level\n                for combination in combinations:\n                    shifted_combo = list()\n                    combo_found = True\n                    for rule in combination:\n                        if len(rule['path']) > 1:\n                            path = rule['path'][1:]\n                            path[0] = rule['path'][0] + '.' + path[0]\n                            indices = [rule['indices'][1:]]\n                            backtrack_indices = rule['backtrack_indices'] + [rule['indices'][0]]\n                            combo_found = False\n                        else:\n                            path = rule['path']\n                            indices = [rule['indices']]\n                            backtrack_indices = rule['backtrack_indices']\n\n                        shifted_combo.append({'path': path,\n                                              'indices': indices,\n                                              'backtrack_indices': backtrack_indices})\n\n                    if combo_found:\n                        # Forbidden combination of parameters confirmed\n                        found_combos.append(format_result(combination))\n                    else:\n                        stack.append(shifted_combo)\n        if found_combos != list():\n            all_combos.append({'matches': found_combos, 'msg': combo['err_msg']})\n\n    return all_combos\n\n\ndef validate_parameters(argument_spec, parameters, error_log=None, updated_params=None):\n\n    errors, up_params = _validate_parameters(argument_spec, parameters)\n\n    found_combos = check_param_combos(up_params)\n    for combo in found_combos:\n        errors.append('%s: %s' % (combo['msg'], combo['matches']))\n\n    return errors, up_params",
      "message": "duplicate-code: Similar lines in 2 files\n==storage_lsr.argument_validator:[4:355]\n==storage_lsr.argument_validator:[4:355]\n__metaclass__ = type\n\n# pylint: disable=undefined-variable\nSTRING_TYPE = str if sys.version_info.major == 3 else basestring  # noqa:F821\n\nBOOLEANS_TRUE = ['y', 'yes', 'on', '1', 'true', 't', 1, 1.0, True]\nBOOLEANS_FALSE = ['n', 'no', 'off', '0', 'false', 'f', 0, 0.0, False]\n\n# Combinations of parameters (and their values) that will raise exception\n# use [] if value does not matter\n\n# example: {'options': {'pools.encryption:[True]', pools.volumes.deduplication:[True]}, 'err_msg:' 'deduplication cannot be used with encryption'}\nUNSUPPORTED_COMBOS = [{'options': {'pools.volumes.encryption': BOOLEANS_TRUE,\n                                   'pools.volumes.deduplication': BOOLEANS_TRUE},\n                       'err_msg': \"Deduplication is not supported on encrypted volumes\"},\n                      {'options': {'pools.volumes.encryption': BOOLEANS_TRUE,\n                                   'pools.volumes.compression': BOOLEANS_TRUE},\n                       'err_msg': \"Compression is not supported on encrypted volumes\"},\n                      {'options': {'pools.volumes.thin': BOOLEANS_TRUE,\n                                   'pools.volumes.compression': BOOLEANS_TRUE},\n                       'err_msg': \"Dedupliation is not supported on thin pool volumes\"},\n                      {'options': {'pools.volumes.thin': BOOLEANS_TRUE,\n                                   'pools.volumes.deduplication': BOOLEANS_TRUE},\n                       'err_msg': \"Compression is not supported on thin pool volumes\"}]\n\n\nclass ArgValidator(object):\n\n    @classmethod\n    def _validate_list(cls, value):\n        if isinstance(value, list):\n            return value\n\n        if isinstance(value, STRING_TYPE):\n            return value.split(\",\")\n\n        if isinstance(value, int) or isinstance(value, float):\n            return [value]\n\n        raise TypeError(\"'%s' has to be a list\" % value)\n\n    @classmethod\n    def _validate_str(cls, value):\n        return str(value)\n\n    @classmethod\n    def _validate_bool(cls, value):\n\n        if value in BOOLEANS_TRUE:\n            return True\n        if value in BOOLEANS_FALSE:\n            return False\n        if value is None:\n            return None\n        raise TypeError(\"'%s' has to be convertible to a bool\" % value)\n\n    @classmethod\n    def _validate_int(cls, value):\n        try:\n            return int(value)\n        except ValueError:\n            raise TypeError(\"'%s' has to be an integer\" % value)\n\n    @classmethod\n    def _validate_float(cls, value):\n        try:\n            return float(value)\n        except ValueError:\n            raise TypeError(\"'%s' has to be a float\" % value)\n\n    @classmethod\n    def validate_item(cls, spec, param, key):\n        # validate and return normalized value of a given parameter based on spec\n        # raises TypeError, ValueError on failure\n\n        if key not in param or param[key] is None:\n            # if the parameter is not specified, use default if defined\n            return spec[key].get('default', None)\n\n        choices = spec[key].get('choices')\n        if choices is not None and param[key] not in choices:\n            raise ValueError(\"'%s' has to be one of: %s\" % (param[key], ', '.join(choices)))\n\n        validate = cls.VALIDATION_TYPE_DISPATCHER[spec[key].get('type', 'str')]\n\n        normalized_value = validate(param[key])\n\n        return normalized_value\n\n    @classmethod\n    def validate_list(cls, spec_type, values):\n        # raises TypeError, ValueError on failure\n\n        normalized_list = list()\n        for value in values:\n            validate = cls.VALIDATION_TYPE_DISPATCHER[spec_type]\n            normalized_value = validate(value)\n            normalized_list.append(normalized_value)\n\n        return normalized_list\n\n\nArgValidator.VALIDATION_TYPE_DISPATCHER = dict(list=ArgValidator._validate_list,\n                                               str=ArgValidator._validate_str,\n                                               bool=ArgValidator._validate_bool,\n                                               int=ArgValidator._validate_int,\n                                               float=ArgValidator._validate_float)\n\n\ndef _validate_parameters(argument_spec, parameters, error_log=None, updated_params=None):\n    # recursively validate and normalize all parameters based on argument specifications\n\n    if error_log is None:\n        error_log = list()\n    if updated_params is None:\n        updated_params = dict()\n\n    for spec, value in argument_spec.items():\n\n        if spec not in parameters:\n            # normalize unused parameters\n            try:\n                # value is not defined, try to use default\n                updated_params[spec] = value['default']\n                # cannot use value.get('default', *); * could be the default\n            except KeyError:\n                # value is not defined and has no default value\n                if value['type'] == 'list':\n                    updated_params[spec] = list()\n                elif value['type'] == 'dict':\n                    updated_params[spec] = dict()\n                else:\n                    updated_params[spec] = None\n\n        elif value.get('type') == 'dict':\n            if 'options' not in value:\n                # generic dict, no way to check its contents\n                updated_params[spec] = parameters[spec]\n            else:\n                # nested dict\n                errors, up_params = _validate_parameters(value['options'], parameters[spec])\n                if errors:\n                    # recursion will build prefixes of the error messages\n                    errors = [spec + '->' + x for x in errors]\n                    error_log.extend(errors)\n                updated_params[spec] = up_params\n\n        elif value.get('type') == 'list':\n            if 'options' in value and value.get('elements', '') == 'dict':\n                # nested list of dicts\n                updated_params[spec] = list()\n                for item in parameters[spec]:\n                    errors, up_params = _validate_parameters(value['options'], item)\n                    if errors:\n                        # recursion will build prefixes of the error messages\n                        errors = [spec + '->' + x for x in errors]\n                        error_log.extend(errors)\n                    updated_params[spec].append(up_params)\n            elif 'elements' not in value:\n                # generic list, no way to check its contents\n                updated_params[spec] = parameters[spec]\n            else:\n                # list of items of defined type\n                try:\n                    normalized_list = ArgValidator.validate_list(value['elements'], parameters[spec])\n                except (TypeError, ValueError) as e:\n                    normalized_list = \"ERROR\"\n                    error_log.append(spec + ': ' + str(e))\n\n                updated_params[spec] = normalized_list\n\n        else:\n            # ordinary type\n            try:\n                normalized_value = ArgValidator.validate_item(argument_spec, parameters, spec)\n            except (TypeError, ValueError) as e:\n                normalized_value = \"ERROR\"\n                error_log.append(spec + ': ' + str(e))\n\n            updated_params[spec] = normalized_value\n\n    return (error_log, updated_params)\n\n\ndef generate_combinations(input_list):\n    # Create list of all valid combinations of parameters\n    # (Note: 'valid' means 'worth exploring')\n\n    # Fill in the stack with the first item to expand\n    stack = [[{'path': input_list[0]['path'],\n               'indices': x,\n               'backtrack_indices': input_list[0]['backtrack_indices']}]\n             for x in input_list[0]['indices']]\n\n    result = []\n\n    while stack:\n        sequence = stack.pop()\n        for item in input_list[len(sequence)]['indices']:\n            new_sequence = sequence + [{'path': input_list[len(sequence)]['path'],\n                                        'indices': item,\n                                        'backtrack_indices': input_list[len(sequence)]['backtrack_indices']}]\n            if len(new_sequence) < len(input_list):\n                stack.append(new_sequence)\n            else:\n                # sequence is complete, now to make sure the combination is valid\n\n                # 'valid' means that all the same path roots have the same indices\n                indices_pairs = {}\n                for rule in new_sequence:\n                    encountered_index = indices_pairs.get(rule['path'][0], -1)\n                    if encountered_index == -1:\n                        # path not yet encountered\n                        indices_pairs[rule['path'][0]] = rule['indices'][0]\n                    elif encountered_index != rule['indices'][0]:\n                        # invalid combination\n                        break\n                else:\n                    # for loop ended without break - combination is valid\n                    result.append(new_sequence)\n\n    return result\n\n\ndef locate_parameter(params, path, param_value):\n    # path: complete path of searched parameter e.g. \"['pools', 'volumes', 'deduplication']\"\n    # param_value: list of searched values or [] if value doesn't matter\n    # returns list of \"hash\" of matching items or [] when not found\n\n    # Stack. Each item consists of\n    # - \"value\"   - (part of) nested dictionary\n    # - \"level\"   - depth of nest (e.g. for \"pool[1].volume[0].size\": level=1 ~ \"pool[1].volume[0]\")\n    # - \"indices\" - list of indices (e.g. for \"pool[1].volume[0].size\": indices == [1, 0, None])\n    stack = [{'value': params, 'level': 0, 'indices': []}]\n    result = {'path': path, 'indices': []}\n\n    while stack:\n\n        stack_item = stack.pop()\n\n        if stack_item['level'] < len(path):\n\n            path_step = path[stack_item['level']]\n            # Expand stack item\n            item = stack_item['value'].get(path_step)\n\n            if isinstance(item, list):\n                # Push each list item back into the stack\n                for idx in range(len(item)):\n                    stack.append({'value': item[idx],\n                                  'level': stack_item['level'] + 1,\n                                  'indices': stack_item['indices'] + [idx]})\n            else:\n                # Push expanded item back into the stack\n                stack.append({'value': item,\n                              'level': stack_item['level'] + 1,\n                              'indices': stack_item['indices'] + [None]})\n        else:\n            # The end of given path\n            if param_value == list() or stack_item['value'] in param_value:\n                result['indices'].append(stack_item['indices'])\n\n    if result['indices'] == []:\n        return None\n\n    return result\n\n\ndef format_result(combo):\n    rules_list = list()\n    for rule in combo:\n        path_list = rule['path'][0].split('.')\n        indices = rule['backtrack_indices']\n\n        rule_str = \"\"\n        for i in range(len(path_list)):\n            rule_str += path_list[i]\n            if i < len(indices) and indices[i] is not None:\n                rule_str += '[' + str(indices[i]) + ']'\n            rule_str += '.'\n        rules_list.append(rule_str[:-1])\n    return rules_list\n\n\ndef check_param_combos(params):\n    all_combos = list()\n\n    for combo in UNSUPPORTED_COMBOS:\n\n        found_combos = list()\n        recorded_matches = list()\n\n        for key, value in combo['options'].items():\n            found = locate_parameter(params, key.split('.'), value)\n            if found is None:\n                # Locate found nothing => the whole combo is clean, no need to continue\n                break\n            else:\n                recorded_matches.append(found)\n        else:\n            # No break happened in loop => need to check result combinations\n\n            for match in recorded_matches:\n                match['backtrack_indices'] = list()\n\n            stack = [recorded_matches]\n\n            while stack:\n                match = stack.pop()\n                combinations = generate_combinations(match)\n\n                # It is now possible to dive by shifting the root one level\n                for combination in combinations:\n                    shifted_combo = list()\n                    combo_found = True\n                    for rule in combination:\n                        if len(rule['path']) > 1:\n                            path = rule['path'][1:]\n                            path[0] = rule['path'][0] + '.' + path[0]\n                            indices = [rule['indices'][1:]]\n                            backtrack_indices = rule['backtrack_indices'] + [rule['indices'][0]]\n                            combo_found = False\n                        else:\n                            path = rule['path']\n                            indices = [rule['indices']]\n                            backtrack_indices = rule['backtrack_indices']\n\n                        shifted_combo.append({'path': path,\n                                              'indices': indices,\n                                              'backtrack_indices': backtrack_indices})\n\n                    if combo_found:\n                        # Forbidden combination of parameters confirmed\n                        found_combos.append(format_result(combination))\n                    else:\n                        stack.append(shifted_combo)\n        if found_combos != list():\n            all_combos.append({'matches': found_combos, 'msg': combo['err_msg']})\n\n    return all_combos\n\n\ndef validate_parameters(argument_spec, parameters, error_log=None, updated_params=None):\n\n    errors, up_params = _validate_parameters(argument_spec, parameters)\n\n    found_combos = check_param_combos(up_params)\n    for combo in found_combos:\n        errors.append('%s: %s' % (combo['msg'], combo['matches']))\n\n    return errors, up_params",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.utils:[5:372]\n==module_utils.network_lsr.utils:[5:372]\n__metaclass__ = type\n\nimport socket\nimport sys\nimport uuid\n\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.myerror import MyError  # noqa:E501\n\n\nclass Util:\n\n    PY3 = sys.version_info[0] == 3\n\n    # pylint: disable=undefined-variable\n    STRING_TYPE = str if PY3 else basestring  # noqa:F821\n\n    @staticmethod\n    def first(iterable, default=None, pred=None):\n        for v in iterable:\n            if pred is None or pred(v):\n                return v\n        return default\n\n    @staticmethod\n    def path_to_glib_bytes(path):\n        \"\"\"\n        Converts a path to a GLib.Bytes object that can be accepted by NM\n        \"\"\"\n        return Util.GLib().Bytes.new((\"file://%s\\x00\" % path).encode(\"utf-8\"))\n\n    @staticmethod\n    def convert_passwd_flags_nm(secret_flags):\n        \"\"\"\n        Converts an array of \"secret flags\" strings\n        to an integer represantion understood by NetworkManager\n        \"\"\"\n\n        flag_int = 0\n\n        if \"none\" in secret_flags:\n            flag_int += 0\n        if \"agent-owned\" in secret_flags:\n            flag_int += 1\n        if \"not-saved\" in secret_flags:\n            flag_int += 2\n        if \"not-required\" in secret_flags:\n            flag_int += 4\n\n        return flag_int\n\n    @classmethod\n    def create_uuid(cls):\n        return str(uuid.uuid4())\n\n    @classmethod\n    def NM(cls):\n        n = getattr(cls, \"_NM\", None)\n        if n is None:\n            # Installing pygobject in a tox virtualenv does not work out of the\n            # box\n            # pylint: disable=import-error\n            import gi\n\n            gi.require_version(\"NM\", \"1.0\")\n            from gi.repository import NM, GLib, Gio, GObject\n\n            cls._NM = NM\n            cls._GLib = GLib\n            cls._Gio = Gio\n            cls._GObject = GObject\n            n = NM\n        return n\n\n    @classmethod\n    def GLib(cls):\n        cls.NM()\n        return cls._GLib\n\n    @classmethod\n    def Gio(cls):\n        cls.NM()\n        return cls._Gio\n\n    @classmethod\n    def GObject(cls):\n        cls.NM()\n        return cls._GObject\n\n    @classmethod\n    def Timestamp(cls):\n        return cls.GLib().get_monotonic_time()\n\n    @classmethod\n    def GMainLoop(cls):\n        gmainloop = getattr(cls, \"_GMainLoop\", None)\n        if gmainloop is None:\n            gmainloop = cls.GLib().MainLoop()\n            cls._GMainLoop = gmainloop\n        return gmainloop\n\n    @classmethod\n    def GMainLoop_run(cls, timeout=None):\n        if timeout is None:\n            cls.GMainLoop().run()\n            return True\n\n        GLib = cls.GLib()\n        timeout_reached = []\n        loop = cls.GMainLoop()\n\n        def _timeout_cb(unused):\n            timeout_reached.append(1)\n            loop.quit()\n            return False\n\n        timeout_id = GLib.timeout_add(int(timeout * 1000), _timeout_cb, None)\n        loop.run()\n        if not timeout_reached:\n            GLib.source_remove(timeout_id)\n        return not timeout_reached\n\n    @classmethod\n    def GMainLoop_iterate(cls, may_block=False):\n        return cls.GMainLoop().get_context().iteration(may_block)\n\n    @classmethod\n    def GMainLoop_iterate_all(cls):\n        c = 0\n        while cls.GMainLoop_iterate():\n            c += 1\n        return c\n\n    @classmethod\n    def call_async_method(cls, object_, action, args, mainloop_timeout=10):\n        \"\"\"Asynchronously call a NetworkManager method\"\"\"\n        cancellable = cls.create_cancellable()\n        async_action = action + \"_async\"\n        # NM does not use a uniform naming for the async methods,\n        # for checkpoints it is:\n        # NMClient.checkpoint_create() and NMClient.checkpoint_create_finish(),\n        # but for reapply it is:\n        # NMDevice.reapply_async() and NMDevice.reapply_finish()\n        # NMDevice.reapply() is a synchronous version\n        # Therefore check if there is a method if an `async` suffix and use the\n        # one without the suffix otherwise\n        if not hasattr(object_, async_action):\n            async_action = action\n        finish = action + \"_finish\"\n        user_data = {}\n\n        fullargs = []\n        fullargs += args\n        fullargs += (cancellable, cls.create_callback(finish), user_data)\n\n        getattr(object_, async_action)(*fullargs)\n\n        if not cls.GMainLoop_run(mainloop_timeout):\n            cancellable.cancel()\n            raise MyError(\"failure to call %s.%s(): timeout\" % (object_, async_action))\n\n        success = user_data.get(\"success\", None)\n        if success is not None:\n            return success\n\n        raise MyError(\n            \"failure to %s checkpoint: %s: %r\"\n            % (action, user_data.get(\"error\", \"unknown error\"), user_data)\n        )\n\n    @classmethod\n    def create_cancellable(cls):\n        return cls.Gio().Cancellable.new()\n\n    @classmethod\n    def create_callback(cls, finish_method):\n        \"\"\"\n        Create a callback that will return the result of the finish method and\n        quit the GMainLoop\n\n        :param finish_method str: Name of the finish method to call from the\n        source object in the callback\n        \"\"\"\n\n        def callback(source_object, res, user_data):\n            success = None\n            try:\n                success = getattr(source_object, finish_method)(res)\n            except Exception as e:\n                if cls.error_is_cancelled(e):\n                    return\n                user_data[\"error\"] = str(e)\n            user_data[\"success\"] = success\n            cls.GMainLoop().quit()\n\n        return callback\n\n    @classmethod\n    def error_is_cancelled(cls, e):\n        GLib = cls.GLib()\n        if isinstance(e, GLib.GError):\n            if (\n                e.domain == \"g-io-error-quark\"\n                and e.code == cls.Gio().IOErrorEnum.CANCELLED\n            ):\n                return True\n        return False\n\n    @staticmethod\n    def ifname_valid(ifname):\n        # see dev_valid_name() in kernel's net/core/dev.c\n        if not ifname:\n            return False\n        if ifname in [\".\", \"..\"]:\n            return False\n        if len(ifname) >= 16:\n            return False\n        if any(c == \"/\" or c == \":\" or c.isspace() for c in ifname):\n            return False\n        # FIXME: encoding issues regarding python unicode string\n        return True\n\n    @staticmethod\n    def mac_aton(mac_str, force_len=None):\n        # we also accept None and '' for convenience.\n        # - None yiels None\n        # - '' yields []\n        if mac_str is None:\n            return mac_str\n        i = 0\n        byte_array = []\n        for c in mac_str:\n            if i == 2:\n                if c != \":\":\n                    raise MyError(\"not a valid MAC address: '%s'\" % (mac_str))\n                i = 0\n                continue\n            try:\n                if i == 0:\n                    n = int(c, 16) * 16\n                    i = 1\n                else:\n                    if not i == 1:\n                        raise AssertionError(\"i != 1 - value is {0}\".format(i))\n                    n = n + int(c, 16)\n                    i = 2\n                    byte_array.append(n)\n            except Exception:\n                raise MyError(\"not a valid MAC address: '%s'\" % (mac_str))\n        if i == 1:\n            raise MyError(\"not a valid MAC address: '%s'\" % (mac_str))\n        if force_len is not None:\n            if force_len != len(byte_array):\n                raise MyError(\n                    \"not a valid MAC address of length %s: '%s'\" % (force_len, mac_str)\n                )\n        return byte_array\n\n    @staticmethod\n    def mac_ntoa(mac):\n        if mac is None:\n            return None\n        # bytearray() is needed for python2 compatibility\n        return \":\".join([\"%02x\" % c for c in bytearray(mac)])\n\n    @staticmethod\n    def mac_norm(mac_str, force_len=None):\n        return Util.mac_ntoa(Util.mac_aton(mac_str, force_len))\n\n    @staticmethod\n    def boolean(arg):\n        if arg is None or isinstance(arg, bool):\n            return arg\n        arg0 = arg\n        if isinstance(arg, Util.STRING_TYPE):\n            arg = arg.lower()\n\n        if arg in [\"y\", \"yes\", \"on\", \"1\", \"true\", 1, True]:\n            return True\n        if arg in [\"n\", \"no\", \"off\", \"0\", \"false\", 0, False]:\n            return False\n\n        raise MyError(\"value '%s' is not a boolean\" % (arg0))\n\n    @staticmethod\n    def parse_ip(addr, family=None):\n        if addr is None:\n            return (None, None)\n        if family is not None:\n            Util.addr_family_check(family)\n            a = socket.inet_pton(family, addr)\n        else:\n            a = None\n            family = None\n            try:\n                a = socket.inet_pton(socket.AF_INET, addr)\n                family = socket.AF_INET\n            except Exception:\n                a = socket.inet_pton(socket.AF_INET6, addr)\n                family = socket.AF_INET6\n        return (socket.inet_ntop(family, a), family)\n\n    @staticmethod\n    def addr_family_check(family):\n        if family != socket.AF_INET and family != socket.AF_INET6:\n            raise MyError(\"invalid address family %s\" % (family))\n\n    @staticmethod\n    def addr_family_to_v(family):\n        if family is None:\n            return \"\"\n        if family == socket.AF_INET:\n            return \"v4\"\n        if family == socket.AF_INET6:\n            return \"v6\"\n        raise MyError(\"invalid address family '%s'\" % (family))\n\n    @staticmethod\n    def addr_family_default_prefix(family):\n        Util.addr_family_check(family)\n        if family == socket.AF_INET:\n            return 24\n        else:\n            return 64\n\n    @staticmethod\n    def addr_family_norm(addr_family):\n        if addr_family in [socket.AF_INET, socket.AF_INET6]:\n            return addr_family\n        if addr_family is None or addr_family == socket.AF_UNSPEC:\n            return None\n        if addr_family in [\"4\", \"inet\", \"ip4\", \"ipv4\", \"IPv4\"]:\n            return socket.AF_INET\n        if addr_family in [\"6\", \"inet6\", \"ip6\", \"ipv6\", \"IPv6\"]:\n            return socket.AF_INET6\n        Util.addr_family_check(addr_family)\n\n    @staticmethod\n    def addr_family_prefix_length(family):\n        addr_family = Util.addr_family_norm(family)\n        if addr_family == socket.AF_INET:\n            return 32\n        if addr_family == socket.AF_INET6:\n            return 128\n        Util.addr_family_check(addr_family)\n\n    @staticmethod\n    def addr_family_valid_prefix(family, prefix):\n        m = Util.addr_family_prefix_length(family)\n        return prefix >= 0 and prefix <= m\n\n    @staticmethod\n    def parse_address(address, family=None):\n        try:\n            parts = address.split()\n            addr_parts = parts[0].split(\"/\")\n            if len(addr_parts) != 2:\n                raise MyError(\"expect two addr-parts: ADDR/PLEN\")\n            a, family = Util.parse_ip(addr_parts[0], family)\n            prefix = int(addr_parts[1])\n            if not Util.addr_family_valid_prefix(family, prefix):\n                raise MyError(\"invalid prefix %s\" % (prefix))\n            if len(parts) > 1:\n                raise MyError(\"too many parts\")\n            return {\"address\": a, \"family\": family, \"prefix\": prefix}\n        except Exception:\n            raise MyError(\"invalid address '%s'\" % (address))",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.utils:[5:372]\n==module_utils.network_lsr.utils:[5:372]\n__metaclass__ = type\n\nimport socket\nimport sys\nimport uuid\n\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.myerror import MyError  # noqa:E501\n\n\nclass Util:\n\n    PY3 = sys.version_info[0] == 3\n\n    # pylint: disable=undefined-variable\n    STRING_TYPE = str if PY3 else basestring  # noqa:F821\n\n    @staticmethod\n    def first(iterable, default=None, pred=None):\n        for v in iterable:\n            if pred is None or pred(v):\n                return v\n        return default\n\n    @staticmethod\n    def path_to_glib_bytes(path):\n        \"\"\"\n        Converts a path to a GLib.Bytes object that can be accepted by NM\n        \"\"\"\n        return Util.GLib().Bytes.new((\"file://%s\\x00\" % path).encode(\"utf-8\"))\n\n    @staticmethod\n    def convert_passwd_flags_nm(secret_flags):\n        \"\"\"\n        Converts an array of \"secret flags\" strings\n        to an integer represantion understood by NetworkManager\n        \"\"\"\n\n        flag_int = 0\n\n        if \"none\" in secret_flags:\n            flag_int += 0\n        if \"agent-owned\" in secret_flags:\n            flag_int += 1\n        if \"not-saved\" in secret_flags:\n            flag_int += 2\n        if \"not-required\" in secret_flags:\n            flag_int += 4\n\n        return flag_int\n\n    @classmethod\n    def create_uuid(cls):\n        return str(uuid.uuid4())\n\n    @classmethod\n    def NM(cls):\n        n = getattr(cls, \"_NM\", None)\n        if n is None:\n            # Installing pygobject in a tox virtualenv does not work out of the\n            # box\n            # pylint: disable=import-error\n            import gi\n\n            gi.require_version(\"NM\", \"1.0\")\n            from gi.repository import NM, GLib, Gio, GObject\n\n            cls._NM = NM\n            cls._GLib = GLib\n            cls._Gio = Gio\n            cls._GObject = GObject\n            n = NM\n        return n\n\n    @classmethod\n    def GLib(cls):\n        cls.NM()\n        return cls._GLib\n\n    @classmethod\n    def Gio(cls):\n        cls.NM()\n        return cls._Gio\n\n    @classmethod\n    def GObject(cls):\n        cls.NM()\n        return cls._GObject\n\n    @classmethod\n    def Timestamp(cls):\n        return cls.GLib().get_monotonic_time()\n\n    @classmethod\n    def GMainLoop(cls):\n        gmainloop = getattr(cls, \"_GMainLoop\", None)\n        if gmainloop is None:\n            gmainloop = cls.GLib().MainLoop()\n            cls._GMainLoop = gmainloop\n        return gmainloop\n\n    @classmethod\n    def GMainLoop_run(cls, timeout=None):\n        if timeout is None:\n            cls.GMainLoop().run()\n            return True\n\n        GLib = cls.GLib()\n        timeout_reached = []\n        loop = cls.GMainLoop()\n\n        def _timeout_cb(unused):\n            timeout_reached.append(1)\n            loop.quit()\n            return False\n\n        timeout_id = GLib.timeout_add(int(timeout * 1000), _timeout_cb, None)\n        loop.run()\n        if not timeout_reached:\n            GLib.source_remove(timeout_id)\n        return not timeout_reached\n\n    @classmethod\n    def GMainLoop_iterate(cls, may_block=False):\n        return cls.GMainLoop().get_context().iteration(may_block)\n\n    @classmethod\n    def GMainLoop_iterate_all(cls):\n        c = 0\n        while cls.GMainLoop_iterate():\n            c += 1\n        return c\n\n    @classmethod\n    def call_async_method(cls, object_, action, args, mainloop_timeout=10):\n        \"\"\"Asynchronously call a NetworkManager method\"\"\"\n        cancellable = cls.create_cancellable()\n        async_action = action + \"_async\"\n        # NM does not use a uniform naming for the async methods,\n        # for checkpoints it is:\n        # NMClient.checkpoint_create() and NMClient.checkpoint_create_finish(),\n        # but for reapply it is:\n        # NMDevice.reapply_async() and NMDevice.reapply_finish()\n        # NMDevice.reapply() is a synchronous version\n        # Therefore check if there is a method if an `async` suffix and use the\n        # one without the suffix otherwise\n        if not hasattr(object_, async_action):\n            async_action = action\n        finish = action + \"_finish\"\n        user_data = {}\n\n        fullargs = []\n        fullargs += args\n        fullargs += (cancellable, cls.create_callback(finish), user_data)\n\n        getattr(object_, async_action)(*fullargs)\n\n        if not cls.GMainLoop_run(mainloop_timeout):\n            cancellable.cancel()\n            raise MyError(\"failure to call %s.%s(): timeout\" % (object_, async_action))\n\n        success = user_data.get(\"success\", None)\n        if success is not None:\n            return success\n\n        raise MyError(\n            \"failure to %s checkpoint: %s: %r\"\n            % (action, user_data.get(\"error\", \"unknown error\"), user_data)\n        )\n\n    @classmethod\n    def create_cancellable(cls):\n        return cls.Gio().Cancellable.new()\n\n    @classmethod\n    def create_callback(cls, finish_method):\n        \"\"\"\n        Create a callback that will return the result of the finish method and\n        quit the GMainLoop\n\n        :param finish_method str: Name of the finish method to call from the\n        source object in the callback\n        \"\"\"\n\n        def callback(source_object, res, user_data):\n            success = None\n            try:\n                success = getattr(source_object, finish_method)(res)\n            except Exception as e:\n                if cls.error_is_cancelled(e):\n                    return\n                user_data[\"error\"] = str(e)\n            user_data[\"success\"] = success\n            cls.GMainLoop().quit()\n\n        return callback\n\n    @classmethod\n    def error_is_cancelled(cls, e):\n        GLib = cls.GLib()\n        if isinstance(e, GLib.GError):\n            if (\n                e.domain == \"g-io-error-quark\"\n                and e.code == cls.Gio().IOErrorEnum.CANCELLED\n            ):\n                return True\n        return False\n\n    @staticmethod\n    def ifname_valid(ifname):\n        # see dev_valid_name() in kernel's net/core/dev.c\n        if not ifname:\n            return False\n        if ifname in [\".\", \"..\"]:\n            return False\n        if len(ifname) >= 16:\n            return False\n        if any(c == \"/\" or c == \":\" or c.isspace() for c in ifname):\n            return False\n        # FIXME: encoding issues regarding python unicode string\n        return True\n\n    @staticmethod\n    def mac_aton(mac_str, force_len=None):\n        # we also accept None and '' for convenience.\n        # - None yiels None\n        # - '' yields []\n        if mac_str is None:\n            return mac_str\n        i = 0\n        byte_array = []\n        for c in mac_str:\n            if i == 2:\n                if c != \":\":\n                    raise MyError(\"not a valid MAC address: '%s'\" % (mac_str))\n                i = 0\n                continue\n            try:\n                if i == 0:\n                    n = int(c, 16) * 16\n                    i = 1\n                else:\n                    if not i == 1:\n                        raise AssertionError(\"i != 1 - value is {0}\".format(i))\n                    n = n + int(c, 16)\n                    i = 2\n                    byte_array.append(n)\n            except Exception:\n                raise MyError(\"not a valid MAC address: '%s'\" % (mac_str))\n        if i == 1:\n            raise MyError(\"not a valid MAC address: '%s'\" % (mac_str))\n        if force_len is not None:\n            if force_len != len(byte_array):\n                raise MyError(\n                    \"not a valid MAC address of length %s: '%s'\" % (force_len, mac_str)\n                )\n        return byte_array\n\n    @staticmethod\n    def mac_ntoa(mac):\n        if mac is None:\n            return None\n        # bytearray() is needed for python2 compatibility\n        return \":\".join([\"%02x\" % c for c in bytearray(mac)])\n\n    @staticmethod\n    def mac_norm(mac_str, force_len=None):\n        return Util.mac_ntoa(Util.mac_aton(mac_str, force_len))\n\n    @staticmethod\n    def boolean(arg):\n        if arg is None or isinstance(arg, bool):\n            return arg\n        arg0 = arg\n        if isinstance(arg, Util.STRING_TYPE):\n            arg = arg.lower()\n\n        if arg in [\"y\", \"yes\", \"on\", \"1\", \"true\", 1, True]:\n            return True\n        if arg in [\"n\", \"no\", \"off\", \"0\", \"false\", 0, False]:\n            return False\n\n        raise MyError(\"value '%s' is not a boolean\" % (arg0))\n\n    @staticmethod\n    def parse_ip(addr, family=None):\n        if addr is None:\n            return (None, None)\n        if family is not None:\n            Util.addr_family_check(family)\n            a = socket.inet_pton(family, addr)\n        else:\n            a = None\n            family = None\n            try:\n                a = socket.inet_pton(socket.AF_INET, addr)\n                family = socket.AF_INET\n            except Exception:\n                a = socket.inet_pton(socket.AF_INET6, addr)\n                family = socket.AF_INET6\n        return (socket.inet_ntop(family, a), family)\n\n    @staticmethod\n    def addr_family_check(family):\n        if family != socket.AF_INET and family != socket.AF_INET6:\n            raise MyError(\"invalid address family %s\" % (family))\n\n    @staticmethod\n    def addr_family_to_v(family):\n        if family is None:\n            return \"\"\n        if family == socket.AF_INET:\n            return \"v4\"\n        if family == socket.AF_INET6:\n            return \"v6\"\n        raise MyError(\"invalid address family '%s'\" % (family))\n\n    @staticmethod\n    def addr_family_default_prefix(family):\n        Util.addr_family_check(family)\n        if family == socket.AF_INET:\n            return 24\n        else:\n            return 64\n\n    @staticmethod\n    def addr_family_norm(addr_family):\n        if addr_family in [socket.AF_INET, socket.AF_INET6]:\n            return addr_family\n        if addr_family is None or addr_family == socket.AF_UNSPEC:\n            return None\n        if addr_family in [\"4\", \"inet\", \"ip4\", \"ipv4\", \"IPv4\"]:\n            return socket.AF_INET\n        if addr_family in [\"6\", \"inet6\", \"ip6\", \"ipv6\", \"IPv6\"]:\n            return socket.AF_INET6\n        Util.addr_family_check(addr_family)\n\n    @staticmethod\n    def addr_family_prefix_length(family):\n        addr_family = Util.addr_family_norm(family)\n        if addr_family == socket.AF_INET:\n            return 32\n        if addr_family == socket.AF_INET6:\n            return 128\n        Util.addr_family_check(addr_family)\n\n    @staticmethod\n    def addr_family_valid_prefix(family, prefix):\n        m = Util.addr_family_prefix_length(family)\n        return prefix >= 0 and prefix <= m\n\n    @staticmethod\n    def parse_address(address, family=None):\n        try:\n            parts = address.split()\n            addr_parts = parts[0].split(\"/\")\n            if len(addr_parts) != 2:\n                raise MyError(\"expect two addr-parts: ADDR/PLEN\")\n            a, family = Util.parse_ip(addr_parts[0], family)\n            prefix = int(addr_parts[1])\n            if not Util.addr_family_valid_prefix(family, prefix):\n                raise MyError(\"invalid prefix %s\" % (prefix))\n            if len(parts) > 1:\n                raise MyError(\"too many parts\")\n            return {\"address\": a, \"family\": family, \"prefix\": prefix}\n        except Exception:\n            raise MyError(\"invalid address '%s'\" % (address))",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[14:303]\n==scripts.fix_ansible_lint:[14:303]\nclass AnsibleLintFixer:\n    def __init__(self, base_path: str = \".\"):\n        self.base_path = Path(base_path)\n        self.fixes_applied = []\n\n    def fix_trailing_spaces(self) -> int:\n        \"\"\"Remove trailing spaces from YAML files\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\")) + \\\n                    list(self.base_path.glob(\"roles/**/*.yaml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    original_content = f.read()\n\n                # Remove trailing spaces from each line\n                lines = original_content.splitlines()\n                fixed_lines = [line.rstrip() for line in lines]\n                fixed_content = '\\n'.join(fixed_lines)\n\n                # Add final newline if missing\n                if fixed_content and not fixed_content.endswith('\\n'):\n                    fixed_content += '\\n'\n\n                if fixed_content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(fixed_content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed trailing spaces in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing trailing spaces in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_handler_names(self) -> int:\n        \"\"\"Fix handler name casing to start with uppercase\"\"\"\n        fixed_count = 0\n        handler_files = list(self.base_path.glob(\"roles/**/handlers/main.yml\"))\n\n        for file_path in handler_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                # Fix handler names to start with uppercase\n                # Pattern: - name: lowercase_name\n                def fix_name_case(match):\n                    name = match.group(1)\n                    if name and name[0].islower():\n                        return f'- name: {name[0].upper()}{name[1:]}'\n                    return match.group(0)\n\n                fixed_content = re.sub(r'- name: ([^A-Z][^\\n]*)', fix_name_case, content)\n\n                if fixed_content != content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(fixed_content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed handler name casing in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing handler names in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_meta_galaxy_info(self) -> int:\n        \"\"\"Fix meta/main.yml galaxy_info issues\"\"\"\n        fixed_count = 0\n        meta_files = list(self.base_path.glob(\"roles/**/meta/main.yml\"))\n\n        for file_path in meta_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix min_ansible_version to be string\n                content = re.sub(r'min_ansible_version:\\s*(\\d+\\.\\d+)',\n                               r'min_ansible_version: \"\\1\"', content)\n\n                # Fix platform versions for RHEL-like systems\n                rhel_versions = [\"7\", \"8\", \"9\", \"10\"]\n                for version in rhel_versions:\n                    if f\"'{version}'\" in content:\n                        # Replace invalid versions with 'all'\n                        content = re.sub(f\"'{version}'\", \"'all'\", content)\n                    elif f'\"{version}\"' in content:\n                        content = re.sub(f'\"{version}\"', '\"all\"', content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed meta galaxy_info in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing meta file {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_jinja_spacing(self) -> int:\n        \"\"\"Fix Jinja2 template spacing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix common Jinja spacing issues\n                # {{ var|filter }} -> {{ var | filter }}\n                content = re.sub(r'\\{\\{\\s*([^}]+)\\|([^}]+)\\s*\\}\\}',\n                               r'{{ \\1 | \\2 }}', content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed Jinja spacing in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing Jinja spacing in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_yaml_truthy_values(self) -> int:\n        \"\"\"Fix YAML truthy values to use true/false\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        truthy_replacements = {\n            r'\\byes\\b': 'true',\n            r'\\bno\\b': 'false',\n            r'\\bYes\\b': 'true',\n            r'\\bNo\\b': 'false',\n            r'\\bYES\\b': 'true',\n            r'\\bNO\\b': 'false',\n            r'\\bon\\b': 'true',\n            r'\\boff\\b': 'false',\n        }\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                for pattern, replacement in truthy_replacements.items():\n                    # Only replace when it's a YAML value (after colon)\n                    content = re.sub(f'(:\\\\s*){pattern}(\\\\s*$)', f'\\\\1{replacement}\\\\2',\n                                   content, flags=re.MULTILINE)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed YAML truthy values in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing YAML truthy values in {file_path}: {e}\")\n\n        return fixed_count\n\n    def create_missing_validation_files(self) -> int:\n        \"\"\"Create missing validation files that cause load-failure errors\"\"\"\n        fixed_count = 0\n\n        missing_files = [\n            \"roles/kvmhost_base/tasks/validation/validation/schema_validation_base.yml\",\n            \"roles/kvmhost_networking/tasks/validation/validation/schema_validation_networking.yml\",\n            \"roles/kvmhost_setup/tasks/validation/validation/schema_validation.yml\"\n        ]\n\n        validation_template = \"\"\"---\n# Schema validation placeholder\n# This file was auto-generated to resolve ansible-lint load-failure errors\n# TODO: Implement proper schema validation logic\n\n- name: Schema validation placeholder\n  debug:\n    msg: \"Schema validation not yet implemented\"\n  tags:\n    - validation\n    - schema\n\"\"\"\n\n        for file_path in missing_files:\n            full_path = self.base_path / file_path\n            if not full_path.exists():\n                try:\n                    full_path.parent.mkdir(parents=True, exist_ok=True)\n                    with open(full_path, 'w', encoding='utf-8') as f:\n                        f.write(validation_template)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Created missing validation file {file_path}\")\n                except Exception as e:\n                    print(f\"Error creating {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_line_length_issues(self) -> int:\n        \"\"\"Fix basic line length issues by adding line breaks\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    lines = f.readlines()\n\n                fixed_lines = []\n                changed = False\n\n                for line in lines:\n                    if len(line.rstrip()) > 160:\n                        # Simple fix for long URLs or strings\n                        if 'http' in line and '- name:' in line:\n                            # Split long task names\n                            indent = len(line) - len(line.lstrip())\n                            if ': ' in line:\n                                key, value = line.split(': ', 1)\n                                if len(value.strip()) > 100:\n                                    fixed_lines.append(f\"{key}: >\\n\")\n                                    fixed_lines.append(f\"{' ' * (indent + 2)}{value}\")\n                                    changed = True\n                                    continue\n\n                    fixed_lines.append(line)\n\n                if changed:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.writelines(fixed_lines)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed line length issues in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing line length in {file_path}: {e}\")\n\n        return fixed_count\n\n    def run_all_fixes(self) -> Dict[str, int]:\n        \"\"\"Run all automated fixes\"\"\"\n        print(\"\ud83d\udd27 Starting automated ansible-lint fixes...\")\n\n        results = {\n            \"trailing_spaces\": self.fix_trailing_spaces(),\n            \"handler_names\": self.fix_handler_names(),\n            \"meta_galaxy_info\": self.fix_meta_galaxy_info(),\n            \"jinja_spacing\": self.fix_jinja_spacing(),\n            \"yaml_truthy\": self.fix_yaml_truthy_values(),\n            \"missing_files\": self.create_missing_validation_files(),\n            \"line_length\": self.fix_line_length_issues(),\n        }\n\n        total_fixes = sum(results.values())\n\n        print(f\"\\n\u2705 Automated fixes completed!\")\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")\n\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():\n    fixer = AnsibleLintFixer()\n    results = fixer.run_all_fixes()\n\n    print(f\"\\n\ud83d\udd0d Run 'ansible-lint roles/' again to see remaining issues\")\n    return 0 if sum(results.values()) > 0 else 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[14:303]\n==scripts.fix_ansible_lint:[14:303]\nclass AnsibleLintFixer:\n    def __init__(self, base_path: str = \".\"):\n        self.base_path = Path(base_path)\n        self.fixes_applied = []\n\n    def fix_trailing_spaces(self) -> int:\n        \"\"\"Remove trailing spaces from YAML files\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\")) + \\\n                    list(self.base_path.glob(\"roles/**/*.yaml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    original_content = f.read()\n\n                # Remove trailing spaces from each line\n                lines = original_content.splitlines()\n                fixed_lines = [line.rstrip() for line in lines]\n                fixed_content = '\\n'.join(fixed_lines)\n\n                # Add final newline if missing\n                if fixed_content and not fixed_content.endswith('\\n'):\n                    fixed_content += '\\n'\n\n                if fixed_content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(fixed_content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed trailing spaces in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing trailing spaces in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_handler_names(self) -> int:\n        \"\"\"Fix handler name casing to start with uppercase\"\"\"\n        fixed_count = 0\n        handler_files = list(self.base_path.glob(\"roles/**/handlers/main.yml\"))\n\n        for file_path in handler_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                # Fix handler names to start with uppercase\n                # Pattern: - name: lowercase_name\n                def fix_name_case(match):\n                    name = match.group(1)\n                    if name and name[0].islower():\n                        return f'- name: {name[0].upper()}{name[1:]}'\n                    return match.group(0)\n\n                fixed_content = re.sub(r'- name: ([^A-Z][^\\n]*)', fix_name_case, content)\n\n                if fixed_content != content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(fixed_content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed handler name casing in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing handler names in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_meta_galaxy_info(self) -> int:\n        \"\"\"Fix meta/main.yml galaxy_info issues\"\"\"\n        fixed_count = 0\n        meta_files = list(self.base_path.glob(\"roles/**/meta/main.yml\"))\n\n        for file_path in meta_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix min_ansible_version to be string\n                content = re.sub(r'min_ansible_version:\\s*(\\d+\\.\\d+)',\n                               r'min_ansible_version: \"\\1\"', content)\n\n                # Fix platform versions for RHEL-like systems\n                rhel_versions = [\"7\", \"8\", \"9\", \"10\"]\n                for version in rhel_versions:\n                    if f\"'{version}'\" in content:\n                        # Replace invalid versions with 'all'\n                        content = re.sub(f\"'{version}'\", \"'all'\", content)\n                    elif f'\"{version}\"' in content:\n                        content = re.sub(f'\"{version}\"', '\"all\"', content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed meta galaxy_info in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing meta file {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_jinja_spacing(self) -> int:\n        \"\"\"Fix Jinja2 template spacing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix common Jinja spacing issues\n                # {{ var|filter }} -> {{ var | filter }}\n                content = re.sub(r'\\{\\{\\s*([^}]+)\\|([^}]+)\\s*\\}\\}',\n                               r'{{ \\1 | \\2 }}', content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed Jinja spacing in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing Jinja spacing in {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_yaml_truthy_values(self) -> int:\n        \"\"\"Fix YAML truthy values to use true/false\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        truthy_replacements = {\n            r'\\byes\\b': 'true',\n            r'\\bno\\b': 'false',\n            r'\\bYes\\b': 'true',\n            r'\\bNo\\b': 'false',\n            r'\\bYES\\b': 'true',\n            r'\\bNO\\b': 'false',\n            r'\\bon\\b': 'true',\n            r'\\boff\\b': 'false',\n        }\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                for pattern, replacement in truthy_replacements.items():\n                    # Only replace when it's a YAML value (after colon)\n                    content = re.sub(f'(:\\\\s*){pattern}(\\\\s*$)', f'\\\\1{replacement}\\\\2',\n                                   content, flags=re.MULTILINE)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed YAML truthy values in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing YAML truthy values in {file_path}: {e}\")\n\n        return fixed_count\n\n    def create_missing_validation_files(self) -> int:\n        \"\"\"Create missing validation files that cause load-failure errors\"\"\"\n        fixed_count = 0\n\n        missing_files = [\n            \"roles/kvmhost_base/tasks/validation/validation/schema_validation_base.yml\",\n            \"roles/kvmhost_networking/tasks/validation/validation/schema_validation_networking.yml\",\n            \"roles/kvmhost_setup/tasks/validation/validation/schema_validation.yml\"\n        ]\n\n        validation_template = \"\"\"---\n# Schema validation placeholder\n# This file was auto-generated to resolve ansible-lint load-failure errors\n# TODO: Implement proper schema validation logic\n\n- name: Schema validation placeholder\n  debug:\n    msg: \"Schema validation not yet implemented\"\n  tags:\n    - validation\n    - schema\n\"\"\"\n\n        for file_path in missing_files:\n            full_path = self.base_path / file_path\n            if not full_path.exists():\n                try:\n                    full_path.parent.mkdir(parents=True, exist_ok=True)\n                    with open(full_path, 'w', encoding='utf-8') as f:\n                        f.write(validation_template)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Created missing validation file {file_path}\")\n                except Exception as e:\n                    print(f\"Error creating {file_path}: {e}\")\n\n        return fixed_count\n\n    def fix_line_length_issues(self) -> int:\n        \"\"\"Fix basic line length issues by adding line breaks\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    lines = f.readlines()\n\n                fixed_lines = []\n                changed = False\n\n                for line in lines:\n                    if len(line.rstrip()) > 160:\n                        # Simple fix for long URLs or strings\n                        if 'http' in line and '- name:' in line:\n                            # Split long task names\n                            indent = len(line) - len(line.lstrip())\n                            if ': ' in line:\n                                key, value = line.split(': ', 1)\n                                if len(value.strip()) > 100:\n                                    fixed_lines.append(f\"{key}: >\\n\")\n                                    fixed_lines.append(f\"{' ' * (indent + 2)}{value}\")\n                                    changed = True\n                                    continue\n\n                    fixed_lines.append(line)\n\n                if changed:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.writelines(fixed_lines)\n                    fixed_count += 1\n                    self.fixes_applied.append(f\"Fixed line length issues in {file_path}\")\n\n            except Exception as e:\n                print(f\"Error fixing line length in {file_path}: {e}\")\n\n        return fixed_count\n\n    def run_all_fixes(self) -> Dict[str, int]:\n        \"\"\"Run all automated fixes\"\"\"\n        print(\"\ud83d\udd27 Starting automated ansible-lint fixes...\")\n\n        results = {\n            \"trailing_spaces\": self.fix_trailing_spaces(),\n            \"handler_names\": self.fix_handler_names(),\n            \"meta_galaxy_info\": self.fix_meta_galaxy_info(),\n            \"jinja_spacing\": self.fix_jinja_spacing(),\n            \"yaml_truthy\": self.fix_yaml_truthy_values(),\n            \"missing_files\": self.create_missing_validation_files(),\n            \"line_length\": self.fix_line_length_issues(),\n        }\n\n        total_fixes = sum(results.values())\n\n        print(f\"\\n\u2705 Automated fixes completed!\")\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")\n\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():\n    fixer = AnsibleLintFixer()\n    results = fixer.run_all_fixes()\n\n    print(f\"\\n\ud83d\udd0d Run 'ansible-lint roles/' again to see remaining issues\")\n    return 0 if sum(results.values()) > 0 else 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[15:282]\n==scripts.generate_compatibility_matrix:[15:282]\nclass CompatibilityMatrix:\n    def __init__(self, project_root=\"/home/vpcuser/qubinode_kvmhost_setup_collection\"):\n        self.project_root = Path(project_root)\n        self.roles_dir = self.project_root / \"roles\"\n        self.compatibility_data = {}\n\n    def detect_rhel_versions(self):\n        \"\"\"Detect supported RHEL versions from role tasks and vars\"\"\"\n        rhel_versions = set()\n\n        # Common RHEL version patterns\n        version_patterns = [\"rhel8\", \"rhel9\", \"rhel10\", \"el8\", \"el9\", \"el10\"]\n\n        for role_dir in self.roles_dir.iterdir():\n            if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                # Check tasks for version-specific logic\n                tasks_dir = role_dir / \"tasks\"\n                if tasks_dir.exists():\n                    for task_file in tasks_dir.glob(\"*.yml\"):\n                        try:\n                            with open(task_file, 'r') as f:\n                                content = f.read()\n                                for pattern in version_patterns:\n                                    if pattern in content.lower():\n                                        # Extract version number\n                                        if \"rhel8\" in pattern or \"el8\" in pattern:\n                                            rhel_versions.add(\"8\")\n                                        elif \"rhel9\" in pattern or \"el9\" in pattern:\n                                            rhel_versions.add(\"9\")\n                                        elif \"rhel10\" in pattern or \"el10\" in pattern:\n                                            rhel_versions.add(\"10\")\n                        except Exception as e:\n                            print(f\"Warning: Could not read {task_file}: {e}\")\n\n        # Default to supporting 8, 9, 10 if no specific versions found\n        if not rhel_versions:\n            rhel_versions = {\"8\", \"9\", \"10\"}\n\n        return sorted(list(rhel_versions))\n\n    def analyze_role_features(self, role_name):\n        \"\"\"Analyze features and compatibility for a specific role\"\"\"\n        role_path = self.roles_dir / role_name\n        features = {}\n\n        if not role_path.exists():\n            return features\n\n        # Analyze defaults/main.yml for feature flags\n        defaults_file = role_path / \"defaults\" / \"main.yml\"\n        if defaults_file.exists():\n            try:\n                with open(defaults_file, 'r') as f:\n                    defaults = yaml.safe_load(f) or {}\n\n                # Look for feature-related variables\n                for key, value in defaults.items():\n                    if any(keyword in key.lower() for keyword in\n                          ['enable', 'install', 'configure', 'feature']):\n                        features[key] = {\n                            'default': value,\n                            'description': f\"Feature flag for {key}\",\n                            'rhel_compatibility': {}\n                        }\n            except Exception as e:\n                print(f\"Warning: Could not parse {defaults_file}: {e}\")\n\n        # Analyze tasks for version-specific features\n        tasks_dir = role_path / \"tasks\"\n        if tasks_dir.exists():\n            for task_file in tasks_dir.glob(\"*.yml\"):\n                try:\n                    with open(task_file, 'r') as f:\n                        content = f.read()\n\n                    # Extract feature names from task file names\n                    feature_name = task_file.stem\n                    if feature_name not in features:\n                        features[feature_name] = {\n                            'description': f\"Task group: {feature_name}\",\n                            'rhel_compatibility': {}\n                        }\n\n                    # Check for RHEL version conditions\n                    rhel_versions = self.detect_rhel_versions()\n                    for version in rhel_versions:\n                        version_supported = True\n\n                        # Look for version-specific conditions\n                        if f\"rhel{version}\" in content.lower() or f\"el{version}\" in content.lower():\n                            version_supported = True\n                        elif \"when:\" in content and \"ansible_distribution_major_version\" in content:\n                            # More sophisticated parsing could be added here\n                            version_supported = True\n\n                        features[feature_name]['rhel_compatibility'][f\"rhel{version}\"] = {\n                            'supported': version_supported,\n                            'notes': f\"Detected from {task_file.name}\"\n                        }\n\n                except Exception as e:\n                    print(f\"Warning: Could not analyze {task_file}: {e}\")\n\n        return features\n\n    def generate_matrix(self):\n        \"\"\"Generate the complete compatibility matrix\"\"\"\n        rhel_versions = self.detect_rhel_versions()\n        matrix = {\n            'metadata': {\n                'generated_date': str(subprocess.check_output(['date', '+%Y-%m-%d %H:%M:%S']).decode().strip()),\n                'project': 'Qubinode KVM Host Setup Collection',\n                'rhel_versions_detected': rhel_versions,\n                'generator_version': '1.0.0'\n            },\n            'compatibility_matrix': {}\n        }\n\n        # Analyze each kvmhost role\n        for role_dir in self.roles_dir.iterdir():\n            if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                role_name = role_dir.name\n                print(f\"Analyzing role: {role_name}\")\n\n                role_features = self.analyze_role_features(role_name)\n                matrix['compatibility_matrix'][role_name] = {\n                    'description': f\"KVM Host setup role for {role_name.replace('kvmhost_', '')}\",\n                    'features': role_features,\n                    'overall_compatibility': {}\n                }\n\n                # Calculate overall compatibility per RHEL version\n                for version in rhel_versions:\n                    supported_features = 0\n                    total_features = len(role_features)\n\n                    for feature_name, feature_data in role_features.items():\n                        rhel_compat = feature_data.get('rhel_compatibility', {})\n                        if rhel_compat.get(f\"rhel{version}\", {}).get('supported', True):\n                            supported_features += 1\n\n                    compatibility_percentage = (supported_features / total_features * 100) if total_features > 0 else 100\n                    matrix['compatibility_matrix'][role_name]['overall_compatibility'][f\"rhel{version}\"] = {\n                        'supported_features': supported_features,\n                        'total_features': total_features,\n                        'compatibility_percentage': round(compatibility_percentage, 2),\n                        'status': 'full' if compatibility_percentage == 100 else 'partial' if compatibility_percentage > 50 else 'limited'\n                    }\n\n        return matrix\n\n    def save_matrix(self, output_file=\"compatibility_matrix.json\"):\n        \"\"\"Save the compatibility matrix to a file\"\"\"\n        matrix = self.generate_matrix()\n        output_path = self.project_root / \"docs\" / output_file\n\n        # Ensure docs directory exists\n        output_path.parent.mkdir(exist_ok=True)\n\n        with open(output_path, 'w') as f:\n            json.dump(matrix, f, indent=2)\n\n        print(f\"Compatibility matrix saved to: {output_path}\")\n        return output_path\n\n    def generate_report(self):\n        \"\"\"Generate a human-readable compatibility report\"\"\"\n        matrix = self.generate_matrix()\n        report_lines = []\n\n        report_lines.append(\"# RHEL Compatibility Matrix Report\")\n        report_lines.append(f\"**Generated**: {matrix['metadata']['generated_date']}\")\n        report_lines.append(f\"**Project**: {matrix['metadata']['project']}\")\n        report_lines.append(\"\")\n\n        # Summary table\n        report_lines.append(\"## Compatibility Summary\")\n        report_lines.append(\"\")\n        report_lines.append(\"| Role | RHEL 8 | RHEL 9 | RHEL 10 | Notes |\")\n        report_lines.append(\"|------|--------|--------|---------|-------|\")\n\n        for role_name, role_data in matrix['compatibility_matrix'].items():\n            compat = role_data['overall_compatibility']\n            rhel8_status = compat.get('rhel8', {}).get('status', 'unknown')\n            rhel9_status = compat.get('rhel9', {}).get('status', 'unknown')\n            rhel10_status = compat.get('rhel10', {}).get('status', 'unknown')\n\n            # Convert status to emoji\n            status_emoji = {'full': '\u2705', 'partial': '\u26a0\ufe0f', 'limited': '\u274c', 'unknown': '\u2753'}\n            rhel8_emoji = status_emoji.get(rhel8_status, '\u2753')\n            rhel9_emoji = status_emoji.get(rhel9_status, '\u2753')\n            rhel10_emoji = status_emoji.get(rhel10_status, '\u2753')\n\n            notes = f\"{rhel8_status.title()}/{rhel9_status.title()}/{rhel10_status.title()}\"\n            report_lines.append(f\"| {role_name} | {rhel8_emoji} | {rhel9_emoji} | {rhel10_emoji} | {notes} |\")\n\n        # Detailed breakdown\n        report_lines.append(\"\")\n        report_lines.append(\"## Detailed Analysis\")\n\n        for role_name, role_data in matrix['compatibility_matrix'].items():\n            report_lines.append(f\"### {role_name}\")\n            report_lines.append(f\"*{role_data['description']}*\")\n            report_lines.append(\"\")\n\n            # Feature compatibility table\n            features = role_data['features']\n            if features:\n                report_lines.append(\"| Feature | RHEL 8 | RHEL 9 | RHEL 10 |\")\n                report_lines.append(\"|---------|--------|--------|---------|\")\n\n                for feature_name, feature_data in features.items():\n                    rhel_compat = feature_data.get('rhel_compatibility', {})\n                    rhel8_support = rhel_compat.get('rhel8', {}).get('supported', True)\n                    rhel9_support = rhel_compat.get('rhel9', {}).get('supported', True)\n                    rhel10_support = rhel_compat.get('rhel10', {}).get('supported', True)\n\n                    rhel8_icon = '\u2705' if rhel8_support else '\u274c'\n                    rhel9_icon = '\u2705' if rhel9_support else '\u274c'\n                    rhel10_icon = '\u2705' if rhel10_support else '\u274c'\n\n                    report_lines.append(f\"| {feature_name} | {rhel8_icon} | {rhel9_icon} | {rhel10_icon} |\")\n            else:\n                report_lines.append(\"*No specific features detected*\")\n\n            report_lines.append(\"\")\n\n        return '\\n'.join(report_lines)\n\n    def save_report(self, output_file=\"compatibility_report.md\"):\n        \"\"\"Save the human-readable report\"\"\"\n        report = self.generate_report()\n        output_path = self.project_root / \"docs\" / output_file\n\n        with open(output_path, 'w') as f:\n            f.write(report)\n\n        print(f\"Compatibility report saved to: {output_path}\")\n        return output_path\n\n\ndef main():\n    \"\"\"Main function to generate compatibility matrix\"\"\"\n    print(\"Generating RHEL Compatibility Matrix...\")\n\n    matrix_generator = CompatibilityMatrix()\n\n    # Generate and save JSON matrix\n    json_path = matrix_generator.save_matrix()\n\n    # Generate and save human-readable report\n    report_path = matrix_generator.save_report()\n\n    print(\"\\n\" + \"=\"*50)\n    print(\"COMPATIBILITY MATRIX GENERATION COMPLETE\")\n    print(\"=\"*50)\n    print(f\"JSON Matrix: {json_path}\")\n    print(f\"Report: {report_path}\")\n    print(\"\\nNext steps:\")\n    print(\"1. Review the generated compatibility report\")\n    print(\"2. Add version-specific tests to your Molecule scenarios\")\n    print(\"3. Update role documentation with compatibility info\")\n    print(\"4. Integrate with CI/CD for automated compatibility testing\")\n\n\nif __name__ == \"__main__\":\n    main()",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[15:282]\n==scripts.generate_compatibility_matrix:[15:282]\nclass CompatibilityMatrix:\n    def __init__(self, project_root=\"/home/vpcuser/qubinode_kvmhost_setup_collection\"):\n        self.project_root = Path(project_root)\n        self.roles_dir = self.project_root / \"roles\"\n        self.compatibility_data = {}\n\n    def detect_rhel_versions(self):\n        \"\"\"Detect supported RHEL versions from role tasks and vars\"\"\"\n        rhel_versions = set()\n\n        # Common RHEL version patterns\n        version_patterns = [\"rhel8\", \"rhel9\", \"rhel10\", \"el8\", \"el9\", \"el10\"]\n\n        for role_dir in self.roles_dir.iterdir():\n            if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                # Check tasks for version-specific logic\n                tasks_dir = role_dir / \"tasks\"\n                if tasks_dir.exists():\n                    for task_file in tasks_dir.glob(\"*.yml\"):\n                        try:\n                            with open(task_file, 'r') as f:\n                                content = f.read()\n                                for pattern in version_patterns:\n                                    if pattern in content.lower():\n                                        # Extract version number\n                                        if \"rhel8\" in pattern or \"el8\" in pattern:\n                                            rhel_versions.add(\"8\")\n                                        elif \"rhel9\" in pattern or \"el9\" in pattern:\n                                            rhel_versions.add(\"9\")\n                                        elif \"rhel10\" in pattern or \"el10\" in pattern:\n                                            rhel_versions.add(\"10\")\n                        except Exception as e:\n                            print(f\"Warning: Could not read {task_file}: {e}\")\n\n        # Default to supporting 8, 9, 10 if no specific versions found\n        if not rhel_versions:\n            rhel_versions = {\"8\", \"9\", \"10\"}\n\n        return sorted(list(rhel_versions))\n\n    def analyze_role_features(self, role_name):\n        \"\"\"Analyze features and compatibility for a specific role\"\"\"\n        role_path = self.roles_dir / role_name\n        features = {}\n\n        if not role_path.exists():\n            return features\n\n        # Analyze defaults/main.yml for feature flags\n        defaults_file = role_path / \"defaults\" / \"main.yml\"\n        if defaults_file.exists():\n            try:\n                with open(defaults_file, 'r') as f:\n                    defaults = yaml.safe_load(f) or {}\n\n                # Look for feature-related variables\n                for key, value in defaults.items():\n                    if any(keyword in key.lower() for keyword in\n                          ['enable', 'install', 'configure', 'feature']):\n                        features[key] = {\n                            'default': value,\n                            'description': f\"Feature flag for {key}\",\n                            'rhel_compatibility': {}\n                        }\n            except Exception as e:\n                print(f\"Warning: Could not parse {defaults_file}: {e}\")\n\n        # Analyze tasks for version-specific features\n        tasks_dir = role_path / \"tasks\"\n        if tasks_dir.exists():\n            for task_file in tasks_dir.glob(\"*.yml\"):\n                try:\n                    with open(task_file, 'r') as f:\n                        content = f.read()\n\n                    # Extract feature names from task file names\n                    feature_name = task_file.stem\n                    if feature_name not in features:\n                        features[feature_name] = {\n                            'description': f\"Task group: {feature_name}\",\n                            'rhel_compatibility': {}\n                        }\n\n                    # Check for RHEL version conditions\n                    rhel_versions = self.detect_rhel_versions()\n                    for version in rhel_versions:\n                        version_supported = True\n\n                        # Look for version-specific conditions\n                        if f\"rhel{version}\" in content.lower() or f\"el{version}\" in content.lower():\n                            version_supported = True\n                        elif \"when:\" in content and \"ansible_distribution_major_version\" in content:\n                            # More sophisticated parsing could be added here\n                            version_supported = True\n\n                        features[feature_name]['rhel_compatibility'][f\"rhel{version}\"] = {\n                            'supported': version_supported,\n                            'notes': f\"Detected from {task_file.name}\"\n                        }\n\n                except Exception as e:\n                    print(f\"Warning: Could not analyze {task_file}: {e}\")\n\n        return features\n\n    def generate_matrix(self):\n        \"\"\"Generate the complete compatibility matrix\"\"\"\n        rhel_versions = self.detect_rhel_versions()\n        matrix = {\n            'metadata': {\n                'generated_date': str(subprocess.check_output(['date', '+%Y-%m-%d %H:%M:%S']).decode().strip()),\n                'project': 'Qubinode KVM Host Setup Collection',\n                'rhel_versions_detected': rhel_versions,\n                'generator_version': '1.0.0'\n            },\n            'compatibility_matrix': {}\n        }\n\n        # Analyze each kvmhost role\n        for role_dir in self.roles_dir.iterdir():\n            if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                role_name = role_dir.name\n                print(f\"Analyzing role: {role_name}\")\n\n                role_features = self.analyze_role_features(role_name)\n                matrix['compatibility_matrix'][role_name] = {\n                    'description': f\"KVM Host setup role for {role_name.replace('kvmhost_', '')}\",\n                    'features': role_features,\n                    'overall_compatibility': {}\n                }\n\n                # Calculate overall compatibility per RHEL version\n                for version in rhel_versions:\n                    supported_features = 0\n                    total_features = len(role_features)\n\n                    for feature_name, feature_data in role_features.items():\n                        rhel_compat = feature_data.get('rhel_compatibility', {})\n                        if rhel_compat.get(f\"rhel{version}\", {}).get('supported', True):\n                            supported_features += 1\n\n                    compatibility_percentage = (supported_features / total_features * 100) if total_features > 0 else 100\n                    matrix['compatibility_matrix'][role_name]['overall_compatibility'][f\"rhel{version}\"] = {\n                        'supported_features': supported_features,\n                        'total_features': total_features,\n                        'compatibility_percentage': round(compatibility_percentage, 2),\n                        'status': 'full' if compatibility_percentage == 100 else 'partial' if compatibility_percentage > 50 else 'limited'\n                    }\n\n        return matrix\n\n    def save_matrix(self, output_file=\"compatibility_matrix.json\"):\n        \"\"\"Save the compatibility matrix to a file\"\"\"\n        matrix = self.generate_matrix()\n        output_path = self.project_root / \"docs\" / output_file\n\n        # Ensure docs directory exists\n        output_path.parent.mkdir(exist_ok=True)\n\n        with open(output_path, 'w') as f:\n            json.dump(matrix, f, indent=2)\n\n        print(f\"Compatibility matrix saved to: {output_path}\")\n        return output_path\n\n    def generate_report(self):\n        \"\"\"Generate a human-readable compatibility report\"\"\"\n        matrix = self.generate_matrix()\n        report_lines = []\n\n        report_lines.append(\"# RHEL Compatibility Matrix Report\")\n        report_lines.append(f\"**Generated**: {matrix['metadata']['generated_date']}\")\n        report_lines.append(f\"**Project**: {matrix['metadata']['project']}\")\n        report_lines.append(\"\")\n\n        # Summary table\n        report_lines.append(\"## Compatibility Summary\")\n        report_lines.append(\"\")\n        report_lines.append(\"| Role | RHEL 8 | RHEL 9 | RHEL 10 | Notes |\")\n        report_lines.append(\"|------|--------|--------|---------|-------|\")\n\n        for role_name, role_data in matrix['compatibility_matrix'].items():\n            compat = role_data['overall_compatibility']\n            rhel8_status = compat.get('rhel8', {}).get('status', 'unknown')\n            rhel9_status = compat.get('rhel9', {}).get('status', 'unknown')\n            rhel10_status = compat.get('rhel10', {}).get('status', 'unknown')\n\n            # Convert status to emoji\n            status_emoji = {'full': '\u2705', 'partial': '\u26a0\ufe0f', 'limited': '\u274c', 'unknown': '\u2753'}\n            rhel8_emoji = status_emoji.get(rhel8_status, '\u2753')\n            rhel9_emoji = status_emoji.get(rhel9_status, '\u2753')\n            rhel10_emoji = status_emoji.get(rhel10_status, '\u2753')\n\n            notes = f\"{rhel8_status.title()}/{rhel9_status.title()}/{rhel10_status.title()}\"\n            report_lines.append(f\"| {role_name} | {rhel8_emoji} | {rhel9_emoji} | {rhel10_emoji} | {notes} |\")\n\n        # Detailed breakdown\n        report_lines.append(\"\")\n        report_lines.append(\"## Detailed Analysis\")\n\n        for role_name, role_data in matrix['compatibility_matrix'].items():\n            report_lines.append(f\"### {role_name}\")\n            report_lines.append(f\"*{role_data['description']}*\")\n            report_lines.append(\"\")\n\n            # Feature compatibility table\n            features = role_data['features']\n            if features:\n                report_lines.append(\"| Feature | RHEL 8 | RHEL 9 | RHEL 10 |\")\n                report_lines.append(\"|---------|--------|--------|---------|\")\n\n                for feature_name, feature_data in features.items():\n                    rhel_compat = feature_data.get('rhel_compatibility', {})\n                    rhel8_support = rhel_compat.get('rhel8', {}).get('supported', True)\n                    rhel9_support = rhel_compat.get('rhel9', {}).get('supported', True)\n                    rhel10_support = rhel_compat.get('rhel10', {}).get('supported', True)\n\n                    rhel8_icon = '\u2705' if rhel8_support else '\u274c'\n                    rhel9_icon = '\u2705' if rhel9_support else '\u274c'\n                    rhel10_icon = '\u2705' if rhel10_support else '\u274c'\n\n                    report_lines.append(f\"| {feature_name} | {rhel8_icon} | {rhel9_icon} | {rhel10_icon} |\")\n            else:\n                report_lines.append(\"*No specific features detected*\")\n\n            report_lines.append(\"\")\n\n        return '\\n'.join(report_lines)\n\n    def save_report(self, output_file=\"compatibility_report.md\"):\n        \"\"\"Save the human-readable report\"\"\"\n        report = self.generate_report()\n        output_path = self.project_root / \"docs\" / output_file\n\n        with open(output_path, 'w') as f:\n            f.write(report)\n\n        print(f\"Compatibility report saved to: {output_path}\")\n        return output_path\n\n\ndef main():\n    \"\"\"Main function to generate compatibility matrix\"\"\"\n    print(\"Generating RHEL Compatibility Matrix...\")\n\n    matrix_generator = CompatibilityMatrix()\n\n    # Generate and save JSON matrix\n    json_path = matrix_generator.save_matrix()\n\n    # Generate and save human-readable report\n    report_path = matrix_generator.save_report()\n\n    print(\"\\n\" + \"=\"*50)\n    print(\"COMPATIBILITY MATRIX GENERATION COMPLETE\")\n    print(\"=\"*50)\n    print(f\"JSON Matrix: {json_path}\")\n    print(f\"Report: {report_path}\")\n    print(\"\\nNext steps:\")\n    print(\"1. Review the generated compatibility report\")\n    print(\"2. Add version-specific tests to your Molecule scenarios\")\n    print(\"3. Update role documentation with compatibility info\")\n    print(\"4. Integrate with CI/CD for automated compatibility testing\")\n\n\nif __name__ == \"__main__\":\n    main()",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.validate_container_compatibility:[14:255]\n==scripts.validate_container_compatibility:[14:255]\nclass ContainerCompatibilityValidator:\n    def __init__(self):\n        self.test_results = {\n            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),\n            'platform_tests': {},\n            'detection_tests': {},\n            'task_skipping_tests': {},\n            'overall_status': 'unknown'\n        }\n\n    def run_command(self, cmd, timeout=30):\n        \"\"\"Run a command with timeout and capture output\"\"\"\n        try:\n            result = subprocess.run(\n                cmd, shell=True, capture_output=True, text=True, timeout=timeout\n            )\n            return {\n                'success': result.returncode == 0,\n                'stdout': result.stdout,\n                'stderr': result.stderr,\n                'returncode': result.returncode\n            }\n        except subprocess.TimeoutExpired:\n            return {\n                'success': False,\n                'stdout': '',\n                'stderr': 'Command timed out',\n                'returncode': -1\n            }\n\n    def check_container_running(self, container_name):\n        \"\"\"Check if a container is running\"\"\"\n        result = self.run_command(f\"podman ps --filter name={container_name} --format json\")\n        if result['success'] and result['stdout'].strip():\n            try:\n                containers = json.loads(result['stdout'])\n                return len(containers) > 0\n            except json.JSONDecodeError:\n                return False\n        return False\n\n    def test_container_detection(self, container_name):\n        \"\"\"Test container detection logic in a specific container\"\"\"\n        print(f\"\ud83d\udd0d Testing container detection in {container_name}...\")\n\n        # Test the container detection playbook\n        detection_cmd = f\"\"\"\npodman exec {container_name} ansible-playbook -i localhost, -c local \\\\\n    /tmp/test_container_detection.yml --extra-vars \"target_host=localhost\"\n\"\"\"\n\n        result = self.run_command(detection_cmd, timeout=60)\n\n        test_result = {\n            'container': container_name,\n            'detection_success': result['success'],\n            'output': result['stdout'],\n            'errors': result['stderr']\n        }\n\n        # Parse the output for specific detection criteria\n        if result['success']:\n            output = result['stdout']\n            test_result['virtualization_detected'] = 'container' in output.lower()\n            test_result['container_environment_detected'] = 'is_container_environment' in output\n            test_result['task_skipping_active'] = 'skipped' in output.lower()\n\n        self.test_results['detection_tests'][container_name] = test_result\n        return result['success']\n\n    def test_role_execution(self, container_name):\n        \"\"\"Test that the kvmhost_setup role runs without errors in container\"\"\"\n        print(f\"\ud83e\uddea Testing role execution in {container_name}...\")\n\n        # Create a minimal test playbook\n        test_playbook = f\"\"\"\n---\n- name: Test KVM Host Setup in Container\n  hosts: localhost\n  connection: local\n  become: true\n  vars:\n    admin_user: test\n    domain: test.local\n  roles:\n    - kvmhost_setup\n\"\"\"\n\n        # Copy test playbook to container\n        self.run_command(f\"echo '{test_playbook}' | podman exec -i {container_name} tee /tmp/test_role.yml\")\n\n        # Run the role test\n        role_cmd = f\"\"\"\npodman exec {container_name} ansible-playbook -i localhost, -c local /tmp/test_role.yml\n\"\"\"\n\n        result = self.run_command(role_cmd, timeout=300)  # 5 minutes timeout for role execution\n\n        test_result = {\n            'container': container_name,\n            'role_execution_success': result['success'],\n            'output': result['stdout'],\n            'errors': result['stderr']\n        }\n\n        # Count how many tasks were skipped due to container detection\n        if result['stdout']:\n            skipped_count = result['stdout'].count('skipped')\n            test_result['tasks_skipped'] = skipped_count\n            test_result['container_appropriate_execution'] = skipped_count > 0\n\n        self.test_results['task_skipping_tests'][container_name] = test_result\n        return result['success']\n\n    def validate_container_platform(self, container_name):\n        \"\"\"Validate a specific container platform\"\"\"\n        print(f\"\\n\ud83d\udc33 Validating container platform: {container_name}\")\n\n        if not self.check_container_running(container_name):\n            print(f\"\u274c Container {container_name} is not running\")\n            self.test_results['platform_tests'][container_name] = {\n                'available': False,\n                'detection_test': False,\n                'role_test': False,\n                'overall': 'failed'\n            }\n            return False\n\n        print(f\"\u2705 Container {container_name} is running\")\n\n        # Test container detection\n        detection_success = self.test_container_detection(container_name)\n\n        # Test role execution\n        role_success = self.test_role_execution(container_name)\n\n        overall_success = detection_success and role_success\n\n        self.test_results['platform_tests'][container_name] = {\n            'available': True,\n            'detection_test': detection_success,\n            'role_test': role_success,\n            'overall': 'passed' if overall_success else 'failed'\n        }\n\n        status_icon = \"\u2705\" if overall_success else \"\u274c\"\n        print(f\"{status_icon} Platform {container_name}: {'PASSED' if overall_success else 'FAILED'}\")\n\n        return overall_success\n\n    def run_validation(self):\n        \"\"\"Run the complete container compatibility validation\"\"\"\n        print(\"\ud83d\ude80 Starting Container Compatibility Validation\")\n        print(\"=\" * 60)\n\n        # Define containers to test (should match our Molecule setup)\n        test_containers = ['rocky-9', 'alma-9', 'rhel-9', 'rhel-10']\n\n        validation_results = []\n\n        for container in test_containers:\n            success = self.validate_container_platform(container)\n            validation_results.append(success)\n\n        # Calculate overall results\n        total_tests = len(test_containers)\n        passed_tests = sum(validation_results)\n\n        self.test_results['overall_status'] = 'passed' if passed_tests == total_tests else 'partial' if passed_tests > 0 else 'failed'\n\n        print(\"\\n\" + \"=\" * 60)\n        print(\"\ud83c\udfaf Container Compatibility Validation Summary\")\n        print(\"=\" * 60)\n\n        for container in test_containers:\n            platform_result = self.test_results['platform_tests'].get(container, {})\n            status = platform_result.get('overall', 'unknown')\n            icon = \"\u2705\" if status == 'passed' else \"\u274c\" if status == 'failed' else \"\u26a0\ufe0f\"\n            print(f\"{icon} {container:<15} - {status.upper()}\")\n\n        print(f\"\\n\ud83d\udcca Results: {passed_tests}/{total_tests} platforms passed\")\n\n        # Print detailed analysis\n        print(\"\\n\ud83d\udd0d Detailed Analysis:\")\n\n        # Container detection analysis\n        detection_success = sum(1 for t in self.test_results['detection_tests'].values() if t.get('detection_success', False))\n        print(f\"\ud83c\udfaf Container Detection: {detection_success}/{len(self.test_results['detection_tests'])} successful\")\n\n        # Task skipping analysis\n        task_skipping_success = sum(1 for t in self.test_results['task_skipping_tests'].values() if t.get('container_appropriate_execution', False))\n        print(f\"\u23ed\ufe0f  Task Skipping: {task_skipping_success}/{len(self.test_results['task_skipping_tests'])} appropriate\")\n\n        # Overall status\n        if self.test_results['overall_status'] == 'passed':\n            print(\"\\n\ud83c\udf89 \u2705 ALL CONTAINER PLATFORMS VALIDATED SUCCESSFULLY\")\n            return True\n        elif self.test_results['overall_status'] == 'partial':\n            print(\"\\n\u26a0\ufe0f  PARTIAL SUCCESS - Some platforms failed validation\")\n            return False\n        else:\n            print(\"\\n\u274c VALIDATION FAILED - Critical issues detected\")\n            return False\n\n    def save_results(self, output_file=\"container-compatibility-validation.json\"):\n        \"\"\"Save validation results to file\"\"\"\n        with open(output_file, 'w') as f:\n            json.dump(self.test_results, f, indent=2)\n        print(f\"\\n\ud83d\udcc4 Detailed results saved to: {output_file}\")\n\n\ndef main():\n    \"\"\"Main execution function\"\"\"\n    validator = ContainerCompatibilityValidator()\n\n    # First, ensure our test container detection playbook exists\n    if not Path('test_container_detection.yml').exists():\n        print(\"\u274c test_container_detection.yml not found - creating basic version\")\n        basic_test = \"\"\"---\n- name: Test Container Detection\n  hosts: \"{{ target_host | default('localhost') }}\"\n  gather_facts: true\n  tasks:\n    - name: Advanced container environment detection\n      ansible.builtin.set_fact:\n        is_container_environment: >-\n          {{\n            ansible_virtualization_type in ['container', 'docker', 'podman', 'lxc'] or\n            ansible_env.container is defined or\n            ansible_facts.get('ansible_proc_cmdline', {}).get('init', '') == '/usr/sbin/init' or\n            (ansible_mounts | selectattr('mount', 'equalto', '/') | first).fstype in ['overlay', 'tmpfs'] or\n            ansible_facts.get('ansible_selinux', {}).get('type', '') == 'docker_t'\n          }}\n\n    - name: Display detection results\n      ansible.builtin.debug:\n        msg: |\n          Container Detection Results:\n          - Virtualization Type: {{ ansible_virtualization_type | default('unknown') }}\n          - Container Environment: {{ is_container_environment }}\n          - Host: {{ inventory_hostname }}",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.validate_container_compatibility:[14:255]\n==scripts.validate_container_compatibility:[14:255]\nclass ContainerCompatibilityValidator:\n    def __init__(self):\n        self.test_results = {\n            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),\n            'platform_tests': {},\n            'detection_tests': {},\n            'task_skipping_tests': {},\n            'overall_status': 'unknown'\n        }\n\n    def run_command(self, cmd, timeout=30):\n        \"\"\"Run a command with timeout and capture output\"\"\"\n        try:\n            result = subprocess.run(\n                cmd, shell=True, capture_output=True, text=True, timeout=timeout\n            )\n            return {\n                'success': result.returncode == 0,\n                'stdout': result.stdout,\n                'stderr': result.stderr,\n                'returncode': result.returncode\n            }\n        except subprocess.TimeoutExpired:\n            return {\n                'success': False,\n                'stdout': '',\n                'stderr': 'Command timed out',\n                'returncode': -1\n            }\n\n    def check_container_running(self, container_name):\n        \"\"\"Check if a container is running\"\"\"\n        result = self.run_command(f\"podman ps --filter name={container_name} --format json\")\n        if result['success'] and result['stdout'].strip():\n            try:\n                containers = json.loads(result['stdout'])\n                return len(containers) > 0\n            except json.JSONDecodeError:\n                return False\n        return False\n\n    def test_container_detection(self, container_name):\n        \"\"\"Test container detection logic in a specific container\"\"\"\n        print(f\"\ud83d\udd0d Testing container detection in {container_name}...\")\n\n        # Test the container detection playbook\n        detection_cmd = f\"\"\"\npodman exec {container_name} ansible-playbook -i localhost, -c local \\\\\n    /tmp/test_container_detection.yml --extra-vars \"target_host=localhost\"\n\"\"\"\n\n        result = self.run_command(detection_cmd, timeout=60)\n\n        test_result = {\n            'container': container_name,\n            'detection_success': result['success'],\n            'output': result['stdout'],\n            'errors': result['stderr']\n        }\n\n        # Parse the output for specific detection criteria\n        if result['success']:\n            output = result['stdout']\n            test_result['virtualization_detected'] = 'container' in output.lower()\n            test_result['container_environment_detected'] = 'is_container_environment' in output\n            test_result['task_skipping_active'] = 'skipped' in output.lower()\n\n        self.test_results['detection_tests'][container_name] = test_result\n        return result['success']\n\n    def test_role_execution(self, container_name):\n        \"\"\"Test that the kvmhost_setup role runs without errors in container\"\"\"\n        print(f\"\ud83e\uddea Testing role execution in {container_name}...\")\n\n        # Create a minimal test playbook\n        test_playbook = f\"\"\"\n---\n- name: Test KVM Host Setup in Container\n  hosts: localhost\n  connection: local\n  become: true\n  vars:\n    admin_user: test\n    domain: test.local\n  roles:\n    - kvmhost_setup\n\"\"\"\n\n        # Copy test playbook to container\n        self.run_command(f\"echo '{test_playbook}' | podman exec -i {container_name} tee /tmp/test_role.yml\")\n\n        # Run the role test\n        role_cmd = f\"\"\"\npodman exec {container_name} ansible-playbook -i localhost, -c local /tmp/test_role.yml\n\"\"\"\n\n        result = self.run_command(role_cmd, timeout=300)  # 5 minutes timeout for role execution\n\n        test_result = {\n            'container': container_name,\n            'role_execution_success': result['success'],\n            'output': result['stdout'],\n            'errors': result['stderr']\n        }\n\n        # Count how many tasks were skipped due to container detection\n        if result['stdout']:\n            skipped_count = result['stdout'].count('skipped')\n            test_result['tasks_skipped'] = skipped_count\n            test_result['container_appropriate_execution'] = skipped_count > 0\n\n        self.test_results['task_skipping_tests'][container_name] = test_result\n        return result['success']\n\n    def validate_container_platform(self, container_name):\n        \"\"\"Validate a specific container platform\"\"\"\n        print(f\"\\n\ud83d\udc33 Validating container platform: {container_name}\")\n\n        if not self.check_container_running(container_name):\n            print(f\"\u274c Container {container_name} is not running\")\n            self.test_results['platform_tests'][container_name] = {\n                'available': False,\n                'detection_test': False,\n                'role_test': False,\n                'overall': 'failed'\n            }\n            return False\n\n        print(f\"\u2705 Container {container_name} is running\")\n\n        # Test container detection\n        detection_success = self.test_container_detection(container_name)\n\n        # Test role execution\n        role_success = self.test_role_execution(container_name)\n\n        overall_success = detection_success and role_success\n\n        self.test_results['platform_tests'][container_name] = {\n            'available': True,\n            'detection_test': detection_success,\n            'role_test': role_success,\n            'overall': 'passed' if overall_success else 'failed'\n        }\n\n        status_icon = \"\u2705\" if overall_success else \"\u274c\"\n        print(f\"{status_icon} Platform {container_name}: {'PASSED' if overall_success else 'FAILED'}\")\n\n        return overall_success\n\n    def run_validation(self):\n        \"\"\"Run the complete container compatibility validation\"\"\"\n        print(\"\ud83d\ude80 Starting Container Compatibility Validation\")\n        print(\"=\" * 60)\n\n        # Define containers to test (should match our Molecule setup)\n        test_containers = ['rocky-9', 'alma-9', 'rhel-9', 'rhel-10']\n\n        validation_results = []\n\n        for container in test_containers:\n            success = self.validate_container_platform(container)\n            validation_results.append(success)\n\n        # Calculate overall results\n        total_tests = len(test_containers)\n        passed_tests = sum(validation_results)\n\n        self.test_results['overall_status'] = 'passed' if passed_tests == total_tests else 'partial' if passed_tests > 0 else 'failed'\n\n        print(\"\\n\" + \"=\" * 60)\n        print(\"\ud83c\udfaf Container Compatibility Validation Summary\")\n        print(\"=\" * 60)\n\n        for container in test_containers:\n            platform_result = self.test_results['platform_tests'].get(container, {})\n            status = platform_result.get('overall', 'unknown')\n            icon = \"\u2705\" if status == 'passed' else \"\u274c\" if status == 'failed' else \"\u26a0\ufe0f\"\n            print(f\"{icon} {container:<15} - {status.upper()}\")\n\n        print(f\"\\n\ud83d\udcca Results: {passed_tests}/{total_tests} platforms passed\")\n\n        # Print detailed analysis\n        print(\"\\n\ud83d\udd0d Detailed Analysis:\")\n\n        # Container detection analysis\n        detection_success = sum(1 for t in self.test_results['detection_tests'].values() if t.get('detection_success', False))\n        print(f\"\ud83c\udfaf Container Detection: {detection_success}/{len(self.test_results['detection_tests'])} successful\")\n\n        # Task skipping analysis\n        task_skipping_success = sum(1 for t in self.test_results['task_skipping_tests'].values() if t.get('container_appropriate_execution', False))\n        print(f\"\u23ed\ufe0f  Task Skipping: {task_skipping_success}/{len(self.test_results['task_skipping_tests'])} appropriate\")\n\n        # Overall status\n        if self.test_results['overall_status'] == 'passed':\n            print(\"\\n\ud83c\udf89 \u2705 ALL CONTAINER PLATFORMS VALIDATED SUCCESSFULLY\")\n            return True\n        elif self.test_results['overall_status'] == 'partial':\n            print(\"\\n\u26a0\ufe0f  PARTIAL SUCCESS - Some platforms failed validation\")\n            return False\n        else:\n            print(\"\\n\u274c VALIDATION FAILED - Critical issues detected\")\n            return False\n\n    def save_results(self, output_file=\"container-compatibility-validation.json\"):\n        \"\"\"Save validation results to file\"\"\"\n        with open(output_file, 'w') as f:\n            json.dump(self.test_results, f, indent=2)\n        print(f\"\\n\ud83d\udcc4 Detailed results saved to: {output_file}\")\n\n\ndef main():\n    \"\"\"Main execution function\"\"\"\n    validator = ContainerCompatibilityValidator()\n\n    # First, ensure our test container detection playbook exists\n    if not Path('test_container_detection.yml').exists():\n        print(\"\u274c test_container_detection.yml not found - creating basic version\")\n        basic_test = \"\"\"---\n- name: Test Container Detection\n  hosts: \"{{ target_host | default('localhost') }}\"\n  gather_facts: true\n  tasks:\n    - name: Advanced container environment detection\n      ansible.builtin.set_fact:\n        is_container_environment: >-\n          {{\n            ansible_virtualization_type in ['container', 'docker', 'podman', 'lxc'] or\n            ansible_env.container is defined or\n            ansible_facts.get('ansible_proc_cmdline', {}).get('init', '') == '/usr/sbin/init' or\n            (ansible_mounts | selectattr('mount', 'equalto', '/') | first).fstype in ['overlay', 'tmpfs'] or\n            ansible_facts.get('ansible_selinux', {}).get('type', '') == 'docker_t'\n          }}\n\n    - name: Display detection results\n      ansible.builtin.debug:\n        msg: |\n          Container Detection Results:\n          - Virtualization Type: {{ ansible_virtualization_type | default('unknown') }}\n          - Container Environment: {{ is_container_environment }}\n          - Host: {{ inventory_hostname }}",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.print_all_options:[12:180]\n==scripts.print_all_options:[12:180]\nPRIORITIES = (\n    \"name\",\n    \"type\",\n    \"interface_name\",\n    \"mac\",\n    \"state\",\n    \"persistent_state\",\n    \"controller\",\n    \"port_type\",\n    \"parent\",\n    \"ignore_errors\",\n    \"force_state_change\",\n    \"check_iface_exists\",\n    \"autoconnect\",\n    \"wait\",\n    \"zone\",\n    \"mtu\",\n    \"ip\",\n    \"ethernet\",\n    \"ethtool\",\n    \"bridge\",\n    \"bond\",\n    \"team\",\n    \"vlan\",\n    \"wireless\",\n    \"macvlan\",\n    \"infiniband\",\n)\n\n\nimport yaml\n\nparentdir = os.path.normpath(os.path.join(os.path.dirname(__file__), \"..\"))\n\nwith mock.patch.object(\n    sys,\n    \"path\",\n    [parentdir, os.path.join(parentdir, \"module_utils/network_lsr\")] + sys.path,\n):\n    with mock.patch.dict(\n        \"sys.modules\",\n        {\"ansible\": mock.Mock(), \"ansible.module_utils\": __import__(\"module_utils\")},\n    ):\n        import argument_validator as av\n\nCOMMENT = \"@@\"\nEMPTY = \"/EMPTY/\"\n\n\ndef parse_validator(validator):\n    default = validator.default_value\n    if isinstance(validator, av.ArgValidatorDict):\n        res = {}\n        for k, v in validator.nested.items():\n            if v.name not in (\n                \"infiniband_transport_mode\",\n                \"infiniband_p_key\",\n                \"vlan_id\",\n            ) and not isinstance(v, av.ArgValidatorDeprecated):\n                name = k\n                if not validator.required:\n                    pass\n                    # name += \"  DICT optional\"\n                res[name] = parse_validator(v)\n    elif isinstance(validator, av.ArgValidatorList):\n        res = [parse_validator(validator.nested)]\n    elif isinstance(validator, av.ArgValidatorNum):\n\n        minval = validator.val_min\n        maxval = validator.val_max\n        comment = f\"  {COMMENT}\"\n        if not validator.required:\n            comment += \" optional\"\n        if minval is not None:\n            comment += \" minimum=\" + str(minval)\n        if maxval:\n            if maxval == 0xFFFFFFFF:\n                maxval = hex(maxval)\n            comment += \" maximum=\" + str(maxval)\n\n        if default is not None:\n            res = str(default)\n        elif minval is not None:\n            res = str(minval)\n        elif maxval is not None:\n            res = str(maxval)\n        else:\n            res = \"\"\n\n        res += comment\n    elif isinstance(validator, av.ArgValidatorIP):\n        res = f\"{EMPTY}  {COMMENT} IP Address\"\n    elif isinstance(validator, av.ArgValidatorStr):\n        if default:\n            res = default\n        elif validator.enum_values:\n            res = \"|\".join(validator.enum_values)\n        else:\n            res = EMPTY\n        if not validator.required:\n            res += f\"  {COMMENT} optional\"\n\n        # res += \"   \" + str(validator.__class__)\n    elif isinstance(validator, av.ArgValidatorBool):\n        if default is not None:\n            res = \"yes\" if default else \"no\"\n        else:\n            res = \"yes|no\"\n\n        if not validator.required:\n            res += f\"  {COMMENT} optional\"\n    else:\n        res = validator.name + f\"  {COMMENT} FIXME \" + str(validator.__class__)\n\n    return res\n\n\ndef represent_dict(dumper, data):\n    \"\"\"\n    Represent dictionary with insert order\n    \"\"\"\n    value = []\n\n    for item_key, item_value in data.items():\n        node_key = dumper.represent_data(item_key)\n        node_value = dumper.represent_data(item_value)\n        value.append((node_key, node_value))\n\n    return yaml.nodes.MappingNode(\"tag:yaml.org,2002:map\", value)\n\n\ndef priority_sorted(data):\n    if isinstance(data, Sequence) and not isinstance(data, str):\n        return [priority_sorted(item) for item in data]\n\n    if isinstance(data, Mapping):\n        sorted_data = {}\n        for key in sorted(data, key=prioritize):\n            sorted_data[key] = priority_sorted(data[key])\n        return sorted_data\n\n    return deepcopy(data)\n\n\ndef prioritize(key):\n    try:\n        priority = PRIORITIES.index(key)\n    except ValueError:\n        priority = len(PRIORITIES)\n    return (priority, key)\n\n\nyaml.add_representer(dict, represent_dict)\nsorted_data = priority_sorted([parse_validator(av.ArgValidator_DictConnection())])\nyaml_example = (\n    yaml.dump(\n        sorted_data,\n        explicit_start=True,\n        default_flow_style=False,\n        width=100,\n    )\n    .replace(COMMENT, \"#\")\n    .replace(EMPTY, \"\")\n)\n\n# yaml_example = re.sub(r\"# ([^:]*):\", r\": # \\1\", yaml_example)\n\nprint(yaml_example)",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.print_all_options:[12:180]\n==scripts.print_all_options:[12:180]\nPRIORITIES = (\n    \"name\",\n    \"type\",\n    \"interface_name\",\n    \"mac\",\n    \"state\",\n    \"persistent_state\",\n    \"controller\",\n    \"port_type\",\n    \"parent\",\n    \"ignore_errors\",\n    \"force_state_change\",\n    \"check_iface_exists\",\n    \"autoconnect\",\n    \"wait\",\n    \"zone\",\n    \"mtu\",\n    \"ip\",\n    \"ethernet\",\n    \"ethtool\",\n    \"bridge\",\n    \"bond\",\n    \"team\",\n    \"vlan\",\n    \"wireless\",\n    \"macvlan\",\n    \"infiniband\",\n)\n\n\nimport yaml\n\nparentdir = os.path.normpath(os.path.join(os.path.dirname(__file__), \"..\"))\n\nwith mock.patch.object(\n    sys,\n    \"path\",\n    [parentdir, os.path.join(parentdir, \"module_utils/network_lsr\")] + sys.path,\n):\n    with mock.patch.dict(\n        \"sys.modules\",\n        {\"ansible\": mock.Mock(), \"ansible.module_utils\": __import__(\"module_utils\")},\n    ):\n        import argument_validator as av\n\nCOMMENT = \"@@\"\nEMPTY = \"/EMPTY/\"\n\n\ndef parse_validator(validator):\n    default = validator.default_value\n    if isinstance(validator, av.ArgValidatorDict):\n        res = {}\n        for k, v in validator.nested.items():\n            if v.name not in (\n                \"infiniband_transport_mode\",\n                \"infiniband_p_key\",\n                \"vlan_id\",\n            ) and not isinstance(v, av.ArgValidatorDeprecated):\n                name = k\n                if not validator.required:\n                    pass\n                    # name += \"  DICT optional\"\n                res[name] = parse_validator(v)\n    elif isinstance(validator, av.ArgValidatorList):\n        res = [parse_validator(validator.nested)]\n    elif isinstance(validator, av.ArgValidatorNum):\n\n        minval = validator.val_min\n        maxval = validator.val_max\n        comment = f\"  {COMMENT}\"\n        if not validator.required:\n            comment += \" optional\"\n        if minval is not None:\n            comment += \" minimum=\" + str(minval)\n        if maxval:\n            if maxval == 0xFFFFFFFF:\n                maxval = hex(maxval)\n            comment += \" maximum=\" + str(maxval)\n\n        if default is not None:\n            res = str(default)\n        elif minval is not None:\n            res = str(minval)\n        elif maxval is not None:\n            res = str(maxval)\n        else:\n            res = \"\"\n\n        res += comment\n    elif isinstance(validator, av.ArgValidatorIP):\n        res = f\"{EMPTY}  {COMMENT} IP Address\"\n    elif isinstance(validator, av.ArgValidatorStr):\n        if default:\n            res = default\n        elif validator.enum_values:\n            res = \"|\".join(validator.enum_values)\n        else:\n            res = EMPTY\n        if not validator.required:\n            res += f\"  {COMMENT} optional\"\n\n        # res += \"   \" + str(validator.__class__)\n    elif isinstance(validator, av.ArgValidatorBool):\n        if default is not None:\n            res = \"yes\" if default else \"no\"\n        else:\n            res = \"yes|no\"\n\n        if not validator.required:\n            res += f\"  {COMMENT} optional\"\n    else:\n        res = validator.name + f\"  {COMMENT} FIXME \" + str(validator.__class__)\n\n    return res\n\n\ndef represent_dict(dumper, data):\n    \"\"\"\n    Represent dictionary with insert order\n    \"\"\"\n    value = []\n\n    for item_key, item_value in data.items():\n        node_key = dumper.represent_data(item_key)\n        node_value = dumper.represent_data(item_value)\n        value.append((node_key, node_value))\n\n    return yaml.nodes.MappingNode(\"tag:yaml.org,2002:map\", value)\n\n\ndef priority_sorted(data):\n    if isinstance(data, Sequence) and not isinstance(data, str):\n        return [priority_sorted(item) for item in data]\n\n    if isinstance(data, Mapping):\n        sorted_data = {}\n        for key in sorted(data, key=prioritize):\n            sorted_data[key] = priority_sorted(data[key])\n        return sorted_data\n\n    return deepcopy(data)\n\n\ndef prioritize(key):\n    try:\n        priority = PRIORITIES.index(key)\n    except ValueError:\n        priority = len(PRIORITIES)\n    return (priority, key)\n\n\nyaml.add_representer(dict, represent_dict)\nsorted_data = priority_sorted([parse_validator(av.ArgValidator_DictConnection())])\nyaml_example = (\n    yaml.dump(\n        sorted_data,\n        explicit_start=True,\n        default_flow_style=False,\n        width=100,\n    )\n    .replace(COMMENT, \"#\")\n    .replace(EMPTY, \"\")\n)\n\n# yaml_example = re.sub(r\"# ([^:]*):\", r\": # \\1\", yaml_example)\n\nprint(yaml_example)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm.active_connection:[6:123]\n==module_utils.network_lsr.nm.active_connection:[6:123]\n__metaclass__ = type\n\nimport logging\n\n# Relative import is not support by ansible 2.8 yet\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.nm import client  # noqa:E501\nfrom ansible.module_utils.network_lsr.nm import error  # noqa:E501\n\n# pylint: enable=import-error, no-name-in-module\n\n\nNM_AC_STATE_CHANGED_SIGNAL = \"state-changed\"\n\n\ndef deactivate_active_connection(nm_ac, timeout, check_mode):\n    if not nm_ac or nm_ac.props.state == client.NM.ActiveConnectionState.DEACTIVATED:\n        logging.info(\"Connection is not active, no need to deactivate\")\n        return False\n    if not check_mode:\n        main_loop = client.get_mainloop(timeout)\n        logging.debug(\"Deactivating %s with timeout %s\", nm_ac.get_id(), timeout)\n        user_data = main_loop\n        handler_id = nm_ac.connect(\n            NM_AC_STATE_CHANGED_SIGNAL, _nm_ac_state_change_callback, user_data\n        )\n        logging.debug(\n            \"Registered %s on client.NM.ActiveConnection %s\",\n            NM_AC_STATE_CHANGED_SIGNAL,\n            nm_ac.get_id(),\n        )\n        if nm_ac.props.state != client.NM.ActiveConnectionState.DEACTIVATING:\n            nm_client = client.get_client()\n            user_data = (main_loop, nm_ac, nm_ac.get_id(), handler_id)\n            nm_client.deactivate_connection_async(\n                nm_ac,\n                main_loop.cancellable,\n                _nm_ac_deactivate_call_back,\n                user_data,\n            )\n            logging.debug(\"Deactivating client.NM.ActiveConnection %s\", nm_ac.get_id())\n        main_loop.run()\n    return True\n\n\ndef _nm_ac_state_change_callback(nm_ac, state, reason, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n    logging.debug(\n        \"Got client.NM.ActiveConnection state change: %s: %s %s\",\n        nm_ac.get_id(),\n        state,\n        reason,\n    )\n    if nm_ac.props.state == client.NM.ActiveConnectionState.DEACTIVATED:\n        logging.debug(\"client.NM.ActiveConnection %s is deactivated\", nm_ac.get_id())\n        main_loop.quit()\n\n\ndef _nm_ac_deactivate_call_back(nm_client, result, user_data):\n    main_loop, nm_ac, nm_ac_id, handler_id = user_data\n    logging.debug(\"client.NM.ActiveConnection deactivating callback\")\n    if main_loop.is_cancelled:\n        if nm_ac:\n            nm_ac.handler_disconnect(handler_id)\n        return\n\n    try:\n        success = nm_client.deactivate_connection_finish(result)\n    except client.GLib.Error as e:\n        if e.matches(\n            client.NM.ManagerError.quark(), client.NM.ManagerError.CONNECTIONNOTACTIVE\n        ):\n            logging.info(\n                \"Connection is not active on %s, no need to deactivate\", nm_ac_id\n            )\n            if nm_ac:\n                nm_ac.handler_disconnect(handler_id)\n            main_loop.quit()\n            return\n        else:\n            _deactivate_fail(\n                main_loop,\n                handler_id,\n                nm_ac,\n                \"Failed to deactivate connection {id}, error={error}\".format(\n                    id=nm_ac_id, error=e\n                ),\n            )\n            return\n    except Exception as e:\n        _deactivate_fail(\n            main_loop,\n            handler_id,\n            nm_ac,\n            \"Failed to deactivate connection {id}, error={error}\".format(\n                id=nm_ac_id, error=e\n            ),\n        )\n        return\n\n    if not success:\n        _deactivate_fail(\n            main_loop,\n            handler_id,\n            nm_ac,\n            \"Failed to deactivate connection {0}, error='None \"\n            \"returned from deactivate_connection_finish()'\".format(nm_ac_id),\n        )\n\n\ndef _deactivate_fail(main_loop, handler_id, nm_ac, msg):\n    if nm_ac:\n        nm_ac.handler_disconnect(handler_id)\n    logging.error(msg)\n    main_loop.fail(error.LsrNetworkNmError(msg))",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm.active_connection:[6:123]\n==module_utils.network_lsr.nm.active_connection:[6:123]\n__metaclass__ = type\n\nimport logging\n\n# Relative import is not support by ansible 2.8 yet\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.nm import client  # noqa:E501\nfrom ansible.module_utils.network_lsr.nm import error  # noqa:E501\n\n# pylint: enable=import-error, no-name-in-module\n\n\nNM_AC_STATE_CHANGED_SIGNAL = \"state-changed\"\n\n\ndef deactivate_active_connection(nm_ac, timeout, check_mode):\n    if not nm_ac or nm_ac.props.state == client.NM.ActiveConnectionState.DEACTIVATED:\n        logging.info(\"Connection is not active, no need to deactivate\")\n        return False\n    if not check_mode:\n        main_loop = client.get_mainloop(timeout)\n        logging.debug(\"Deactivating %s with timeout %s\", nm_ac.get_id(), timeout)\n        user_data = main_loop\n        handler_id = nm_ac.connect(\n            NM_AC_STATE_CHANGED_SIGNAL, _nm_ac_state_change_callback, user_data\n        )\n        logging.debug(\n            \"Registered %s on client.NM.ActiveConnection %s\",\n            NM_AC_STATE_CHANGED_SIGNAL,\n            nm_ac.get_id(),\n        )\n        if nm_ac.props.state != client.NM.ActiveConnectionState.DEACTIVATING:\n            nm_client = client.get_client()\n            user_data = (main_loop, nm_ac, nm_ac.get_id(), handler_id)\n            nm_client.deactivate_connection_async(\n                nm_ac,\n                main_loop.cancellable,\n                _nm_ac_deactivate_call_back,\n                user_data,\n            )\n            logging.debug(\"Deactivating client.NM.ActiveConnection %s\", nm_ac.get_id())\n        main_loop.run()\n    return True\n\n\ndef _nm_ac_state_change_callback(nm_ac, state, reason, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n    logging.debug(\n        \"Got client.NM.ActiveConnection state change: %s: %s %s\",\n        nm_ac.get_id(),\n        state,\n        reason,\n    )\n    if nm_ac.props.state == client.NM.ActiveConnectionState.DEACTIVATED:\n        logging.debug(\"client.NM.ActiveConnection %s is deactivated\", nm_ac.get_id())\n        main_loop.quit()\n\n\ndef _nm_ac_deactivate_call_back(nm_client, result, user_data):\n    main_loop, nm_ac, nm_ac_id, handler_id = user_data\n    logging.debug(\"client.NM.ActiveConnection deactivating callback\")\n    if main_loop.is_cancelled:\n        if nm_ac:\n            nm_ac.handler_disconnect(handler_id)\n        return\n\n    try:\n        success = nm_client.deactivate_connection_finish(result)\n    except client.GLib.Error as e:\n        if e.matches(\n            client.NM.ManagerError.quark(), client.NM.ManagerError.CONNECTIONNOTACTIVE\n        ):\n            logging.info(\n                \"Connection is not active on %s, no need to deactivate\", nm_ac_id\n            )\n            if nm_ac:\n                nm_ac.handler_disconnect(handler_id)\n            main_loop.quit()\n            return\n        else:\n            _deactivate_fail(\n                main_loop,\n                handler_id,\n                nm_ac,\n                \"Failed to deactivate connection {id}, error={error}\".format(\n                    id=nm_ac_id, error=e\n                ),\n            )\n            return\n    except Exception as e:\n        _deactivate_fail(\n            main_loop,\n            handler_id,\n            nm_ac,\n            \"Failed to deactivate connection {id}, error={error}\".format(\n                id=nm_ac_id, error=e\n            ),\n        )\n        return\n\n    if not success:\n        _deactivate_fail(\n            main_loop,\n            handler_id,\n            nm_ac,\n            \"Failed to deactivate connection {0}, error='None \"\n            \"returned from deactivate_connection_finish()'\".format(nm_ac_id),\n        )\n\n\ndef _deactivate_fail(main_loop, handler_id, nm_ac, msg):\n    if nm_ac:\n        nm_ac.handler_disconnect(handler_id)\n    logging.error(msg)\n    main_loop.fail(error.LsrNetworkNmError(msg))",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm.connection:[6:119]\n==module_utils.network_lsr.nm.connection:[6:119]\n__metaclass__ = type\n\nimport logging\n\n# Relative import is not support by ansible 2.8 yet\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.nm import client  # noqa:E501\nfrom ansible.module_utils.network_lsr.nm import error  # noqa:E501\n\n# pylint: enable=import-error, no-name-in-module\n\n\ndef delete_remote_connection(nm_profile, timeout, check_mode):\n    if not nm_profile:\n        logging.info(\"NULL NM.RemoteConnection, no need to delete\")\n        return False\n\n    if not check_mode:\n        main_loop = client.get_mainloop(timeout)\n        user_data = main_loop\n        nm_profile.delete_async(\n            main_loop.cancellable,\n            _nm_profile_delete_call_back,\n            user_data,\n        )\n        logging.debug(\n            \"Deleting profile %s/%s with timeout %s\",\n            nm_profile.get_id(),\n            nm_profile.get_uuid(),\n            timeout,\n        )\n        main_loop.run()\n    return True\n\n\ndef _nm_profile_delete_call_back(nm_profile, result, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n\n    try:\n        success = nm_profile.delete_finish(result)\n    except Exception as e:\n        main_loop.fail(\n            error.LsrNetworkNmError(\n                \"Connection deletion aborted on {id}/{uuid}: error={error}\".format(\n                    id=nm_profile.get_id(), uuid=nm_profile.get_uuid(), error=e\n                )\n            )\n        )\n    if success:\n        main_loop.quit()\n    else:\n        main_loop.fail(\n            error.LsrNetworkNmError(\n                \"Connection deletion aborted on {id}/{uuid}: error=unknown\".format(\n                    id=nm_profile.get_id(), uuid=nm_profile.get_uuid()\n                )\n            )\n        )\n\n\ndef volatilize_remote_connection(nm_profile, timeout, check_mode):\n    if not nm_profile:\n        logging.info(\"NULL NM.RemoteConnection, no need to volatilize\")\n        return False\n    if not check_mode:\n        main_loop = client.get_mainloop(timeout)\n        user_data = main_loop\n        nm_profile.update2(\n            None,  # settings\n            client.NM.SettingsUpdate2Flags.IN_MEMORY_ONLY\n            | client.NM.SettingsUpdate2Flags.VOLATILE,\n            None,  # args\n            main_loop.cancellable,\n            _nm_profile_volatile_update2_call_back,\n            user_data,\n        )\n        logging.debug(\n            \"Volatilizing profile %s/%s with timeout %s\",\n            nm_profile.get_id(),\n            nm_profile.get_uuid(),\n            timeout,\n        )\n        main_loop.run()\n    return True\n\n\ndef _nm_profile_volatile_update2_call_back(nm_profile, result, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n\n    try:\n        success = nm_profile.update2_finish(result)\n    except Exception as e:\n        main_loop.fail(\n            error.LsrNetworkNmError(\n                \"Connection volatilize aborted on {id}/{uuid}: error={error}\".format(\n                    id=nm_profile.get_id(), uuid=nm_profile.get_uuid(), error=e\n                )\n            )\n        )\n    if success:\n        main_loop.quit()\n    else:\n        main_loop.fail(\n            error.LsrNetworkNmError(\n                \"Connection volatilize aborted on {id}/{uuid}: error=unknown\".format(\n                    id=nm_profile.get_id(), uuid=nm_profile.get_uuid()\n                )\n            )\n        )",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm.connection:[6:119]\n==module_utils.network_lsr.nm.connection:[6:119]\n__metaclass__ = type\n\nimport logging\n\n# Relative import is not support by ansible 2.8 yet\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.nm import client  # noqa:E501\nfrom ansible.module_utils.network_lsr.nm import error  # noqa:E501\n\n# pylint: enable=import-error, no-name-in-module\n\n\ndef delete_remote_connection(nm_profile, timeout, check_mode):\n    if not nm_profile:\n        logging.info(\"NULL NM.RemoteConnection, no need to delete\")\n        return False\n\n    if not check_mode:\n        main_loop = client.get_mainloop(timeout)\n        user_data = main_loop\n        nm_profile.delete_async(\n            main_loop.cancellable,\n            _nm_profile_delete_call_back,\n            user_data,\n        )\n        logging.debug(\n            \"Deleting profile %s/%s with timeout %s\",\n            nm_profile.get_id(),\n            nm_profile.get_uuid(),\n            timeout,\n        )\n        main_loop.run()\n    return True\n\n\ndef _nm_profile_delete_call_back(nm_profile, result, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n\n    try:\n        success = nm_profile.delete_finish(result)\n    except Exception as e:\n        main_loop.fail(\n            error.LsrNetworkNmError(\n                \"Connection deletion aborted on {id}/{uuid}: error={error}\".format(\n                    id=nm_profile.get_id(), uuid=nm_profile.get_uuid(), error=e\n                )\n            )\n        )\n    if success:\n        main_loop.quit()\n    else:\n        main_loop.fail(\n            error.LsrNetworkNmError(\n                \"Connection deletion aborted on {id}/{uuid}: error=unknown\".format(\n                    id=nm_profile.get_id(), uuid=nm_profile.get_uuid()\n                )\n            )\n        )\n\n\ndef volatilize_remote_connection(nm_profile, timeout, check_mode):\n    if not nm_profile:\n        logging.info(\"NULL NM.RemoteConnection, no need to volatilize\")\n        return False\n    if not check_mode:\n        main_loop = client.get_mainloop(timeout)\n        user_data = main_loop\n        nm_profile.update2(\n            None,  # settings\n            client.NM.SettingsUpdate2Flags.IN_MEMORY_ONLY\n            | client.NM.SettingsUpdate2Flags.VOLATILE,\n            None,  # args\n            main_loop.cancellable,\n            _nm_profile_volatile_update2_call_back,\n            user_data,\n        )\n        logging.debug(\n            \"Volatilizing profile %s/%s with timeout %s\",\n            nm_profile.get_id(),\n            nm_profile.get_uuid(),\n            timeout,\n        )\n        main_loop.run()\n    return True\n\n\ndef _nm_profile_volatile_update2_call_back(nm_profile, result, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n\n    try:\n        success = nm_profile.update2_finish(result)\n    except Exception as e:\n        main_loop.fail(\n            error.LsrNetworkNmError(\n                \"Connection volatilize aborted on {id}/{uuid}: error={error}\".format(\n                    id=nm_profile.get_id(), uuid=nm_profile.get_uuid(), error=e\n                )\n            )\n        )\n    if success:\n        main_loop.quit()\n    else:\n        main_loop.fail(\n            error.LsrNetworkNmError(\n                \"Connection volatilize aborted on {id}/{uuid}: error=unknown\".format(\n                    id=nm_profile.get_id(), uuid=nm_profile.get_uuid()\n                )\n            )\n        )",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==storage_lsr.size:[2:167]\n==storage_lsr.size:[2:167]\n__metaclass__ = type\n\nimport re\n\nDECIMAL_FACTOR = 10**3\nBINARY_FACTOR = 2**10\n\n# index of the item in the list determines the exponent for size computation\n# e.g. size_in_bytes = value * (DECIMAL_FACTOR ** (index(mega)+1)) = value * (1000 ** (1+1))\nPREFIXES_DECIMAL = [\n    [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"],\n    [\"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"],\n]\nPREFIXES_BINARY = [\n    [\"Ki\", \"Mi\", \"Gi\", \"Ti\", \"Pi\", \"Ei\", \"Zi\", \"Yi\"],\n    [\"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\n]\nSUFFIXES = [\"bytes\", \"byte\", \"B\"]\n\n\nclass Size(object):\n    \"\"\"Class for basic manipulation of the sizes in *bytes\"\"\"\n\n    def __init__(self, value):\n        raw_number, raw_units = self._parse_input(str(value))\n        self.factor, self.exponent = self._parse_units(raw_units)\n        self.number = self._parse_number(raw_number)\n\n        self.units = raw_units\n\n    def _parse_input(self, value):\n        \"\"\"splits input string into number and unit parts\n        returns number part, unit part\n        \"\"\"\n        m = re.search(\"^(.*?)([^0-9]*)$\", value)\n\n        raw_number = m.group(1).strip()\n        if raw_number == \"\":\n            raise ValueError(\"The string '%s' does not contain size\" % value)\n\n        raw_units = m.group(2).strip()\n\n        return raw_number, raw_units\n\n    def _parse_units(self, raw_units):\n        \"\"\"\n        gets string containing size units and\n        returns *_FACTOR (BINARY or DECIMAL) and the prefix position (not index!)\n        in the PREFIXES_* list\n        If no unit is specified defaults to BINARY and Bytes\n        \"\"\"\n\n        prefix = raw_units\n        no_suffix_flag = True\n        valid_suffix = False\n        used_factor = BINARY_FACTOR\n\n        # get rid of possible units suffix ('bytes', 'b' or 'B')\n        for suffix in SUFFIXES:\n            if raw_units.lower().endswith(suffix.lower()):\n                no_suffix_flag = False\n                prefix = raw_units[: -len(suffix)]\n                break\n\n        if prefix == \"\":\n            # no unit was specified, use default\n            return BINARY_FACTOR, 0\n\n        # check the list for units\n        idx = -1\n\n        for lst in PREFIXES_DECIMAL:\n            lower_lst = [x.lower() for x in lst]\n            if prefix.lower() in lower_lst:\n                valid_suffix = True\n                idx = lower_lst.index(prefix.lower())\n                used_factor = DECIMAL_FACTOR\n                break\n\n        if idx < 0 or no_suffix_flag:\n            if no_suffix_flag:\n                used_factor = BINARY_FACTOR\n\n            for lst in PREFIXES_BINARY:\n                lower_lst = [x.lower() for x in lst]\n                if prefix.lower() in lower_lst:\n                    valid_suffix = True\n                    idx = lower_lst.index(prefix.lower())\n                    used_factor = BINARY_FACTOR\n                    break\n\n        if idx < 0 or not valid_suffix:\n            raise ValueError(\"Unable to identify unit '%s'\" % raw_units)\n\n        return used_factor, idx + 1\n\n    def _parse_number(self, raw_number):\n        \"\"\"parse input string containing number\n        return float\n        \"\"\"\n        return float(raw_number)\n\n    def _get_unit(self, factor, exponent, unit_type=0):\n        \"\"\"based on decimal or binary factor and exponent\n        obtain and return correct unit\n        \"\"\"\n\n        if unit_type == 0:\n            suffix = \"B\"\n        else:\n            suffix = \"bytes\"\n\n        if exponent == 0:\n            return suffix\n\n        if factor == DECIMAL_FACTOR:\n            prefix_lst = PREFIXES_DECIMAL[unit_type]\n        else:\n            prefix_lst = PREFIXES_BINARY[unit_type]\n        return prefix_lst[exponent - 1] + suffix\n\n    @property\n    def bytes(self):\n        \"\"\"returns size value in bytes as int\"\"\"\n        return int((self.factor**self.exponent) * self.number)\n\n    def _format(self, format_str, factor, exponent):\n        result = format_str\n        result = result.replace(r\"%sb\", self._get_unit(factor, exponent, 0))\n        result = result.replace(r\"%lb\", self._get_unit(factor, exponent, 1))\n\n        return result\n\n    def get(self, units=\"autobin\", fmt=\"%0.1f %sb\"):\n        \"\"\"returns size value as a string with given units and format\n\n        \"units\" parameter allows to select preferred unit:\n            for example \"KiB\" or \"megabytes\"\n            accepted values are also:\n            \"autobin\" (default) - uses the highest human readable unit (binary)\n            \"autodec\" - uses the highest human readable unit (decimal)\n\n        \"fmt\" parameter allows to specify the output format:\n            %sb - will be replaced with the short byte size unit (e.g. MiB)\n            %lb - will be replaced with the long byte size unit (e.g. kilobytes)\n            value can be formatted using standard string replacements (e.g. %d, %f)\n\n        \"\"\"\n\n        ftr = BINARY_FACTOR\n        if units == \"autodec\":\n            ftr = DECIMAL_FACTOR\n        if units in (\"autobin\", \"autodec\"):\n            exp = 0\n            value = float(self.bytes)\n            while value + 0.01 > ftr:  # + 0.01 to balance the float comparison\n                value /= ftr\n                exp += 1\n        else:\n            ftr, exp = self._parse_units(units.strip())\n            value = (\n                float(self.factor**self.exponent) / float(ftr**exp)\n            ) * self.number\n\n        return self._format(fmt, ftr, exp) % value",
      "message": "duplicate-code: Similar lines in 2 files\n==storage_lsr.size:[2:167]\n==storage_lsr.size:[2:167]\n__metaclass__ = type\n\nimport re\n\nDECIMAL_FACTOR = 10**3\nBINARY_FACTOR = 2**10\n\n# index of the item in the list determines the exponent for size computation\n# e.g. size_in_bytes = value * (DECIMAL_FACTOR ** (index(mega)+1)) = value * (1000 ** (1+1))\nPREFIXES_DECIMAL = [\n    [\"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"],\n    [\"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"],\n]\nPREFIXES_BINARY = [\n    [\"Ki\", \"Mi\", \"Gi\", \"Ti\", \"Pi\", \"Ei\", \"Zi\", \"Yi\"],\n    [\"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\n]\nSUFFIXES = [\"bytes\", \"byte\", \"B\"]\n\n\nclass Size(object):\n    \"\"\"Class for basic manipulation of the sizes in *bytes\"\"\"\n\n    def __init__(self, value):\n        raw_number, raw_units = self._parse_input(str(value))\n        self.factor, self.exponent = self._parse_units(raw_units)\n        self.number = self._parse_number(raw_number)\n\n        self.units = raw_units\n\n    def _parse_input(self, value):\n        \"\"\"splits input string into number and unit parts\n        returns number part, unit part\n        \"\"\"\n        m = re.search(\"^(.*?)([^0-9]*)$\", value)\n\n        raw_number = m.group(1).strip()\n        if raw_number == \"\":\n            raise ValueError(\"The string '%s' does not contain size\" % value)\n\n        raw_units = m.group(2).strip()\n\n        return raw_number, raw_units\n\n    def _parse_units(self, raw_units):\n        \"\"\"\n        gets string containing size units and\n        returns *_FACTOR (BINARY or DECIMAL) and the prefix position (not index!)\n        in the PREFIXES_* list\n        If no unit is specified defaults to BINARY and Bytes\n        \"\"\"\n\n        prefix = raw_units\n        no_suffix_flag = True\n        valid_suffix = False\n        used_factor = BINARY_FACTOR\n\n        # get rid of possible units suffix ('bytes', 'b' or 'B')\n        for suffix in SUFFIXES:\n            if raw_units.lower().endswith(suffix.lower()):\n                no_suffix_flag = False\n                prefix = raw_units[: -len(suffix)]\n                break\n\n        if prefix == \"\":\n            # no unit was specified, use default\n            return BINARY_FACTOR, 0\n\n        # check the list for units\n        idx = -1\n\n        for lst in PREFIXES_DECIMAL:\n            lower_lst = [x.lower() for x in lst]\n            if prefix.lower() in lower_lst:\n                valid_suffix = True\n                idx = lower_lst.index(prefix.lower())\n                used_factor = DECIMAL_FACTOR\n                break\n\n        if idx < 0 or no_suffix_flag:\n            if no_suffix_flag:\n                used_factor = BINARY_FACTOR\n\n            for lst in PREFIXES_BINARY:\n                lower_lst = [x.lower() for x in lst]\n                if prefix.lower() in lower_lst:\n                    valid_suffix = True\n                    idx = lower_lst.index(prefix.lower())\n                    used_factor = BINARY_FACTOR\n                    break\n\n        if idx < 0 or not valid_suffix:\n            raise ValueError(\"Unable to identify unit '%s'\" % raw_units)\n\n        return used_factor, idx + 1\n\n    def _parse_number(self, raw_number):\n        \"\"\"parse input string containing number\n        return float\n        \"\"\"\n        return float(raw_number)\n\n    def _get_unit(self, factor, exponent, unit_type=0):\n        \"\"\"based on decimal or binary factor and exponent\n        obtain and return correct unit\n        \"\"\"\n\n        if unit_type == 0:\n            suffix = \"B\"\n        else:\n            suffix = \"bytes\"\n\n        if exponent == 0:\n            return suffix\n\n        if factor == DECIMAL_FACTOR:\n            prefix_lst = PREFIXES_DECIMAL[unit_type]\n        else:\n            prefix_lst = PREFIXES_BINARY[unit_type]\n        return prefix_lst[exponent - 1] + suffix\n\n    @property\n    def bytes(self):\n        \"\"\"returns size value in bytes as int\"\"\"\n        return int((self.factor**self.exponent) * self.number)\n\n    def _format(self, format_str, factor, exponent):\n        result = format_str\n        result = result.replace(r\"%sb\", self._get_unit(factor, exponent, 0))\n        result = result.replace(r\"%lb\", self._get_unit(factor, exponent, 1))\n\n        return result\n\n    def get(self, units=\"autobin\", fmt=\"%0.1f %sb\"):\n        \"\"\"returns size value as a string with given units and format\n\n        \"units\" parameter allows to select preferred unit:\n            for example \"KiB\" or \"megabytes\"\n            accepted values are also:\n            \"autobin\" (default) - uses the highest human readable unit (binary)\n            \"autodec\" - uses the highest human readable unit (decimal)\n\n        \"fmt\" parameter allows to specify the output format:\n            %sb - will be replaced with the short byte size unit (e.g. MiB)\n            %lb - will be replaced with the long byte size unit (e.g. kilobytes)\n            value can be formatted using standard string replacements (e.g. %d, %f)\n\n        \"\"\"\n\n        ftr = BINARY_FACTOR\n        if units == \"autodec\":\n            ftr = DECIMAL_FACTOR\n        if units in (\"autobin\", \"autodec\"):\n            exp = 0\n            value = float(self.bytes)\n            while value + 0.01 > ftr:  # + 0.01 to balance the float comparison\n                value /= ftr\n                exp += 1\n        else:\n            ftr, exp = self._parse_units(units.strip())\n            value = (\n                float(self.factor**self.exponent) / float(ftr**exp)\n            ) * self.number\n\n        return self._format(fmt, ftr, exp) % value",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==find_unused_disk:[4:79]\n==find_unused_disk:[4:79]\n__metaclass__ = type\n\nDOCUMENTATION = '''\n---\nmodule: find_unused_disk\nshort_description: Gets unused disks\ndescription:\n    - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n    - Disks are considered in ascending alphanumeric sorted order.\n    - Disks that meet all conditions are considered 'empty' and returned (using kernel device name) in a list.\n        - 1. No known signatures exist on the disk, with the exception of partition tables.\n        - 2. If there is a partition table on the disk, it contains no partitions.\n        - 3. The disk has no holders to eliminate the possibility of it being a multipath or dmraid member device.\n        - 4. Device can be opened with exclusive access to make sure no other software is using it.\n    - If no disks meet all criteria, \"Unable to find unused disk\" will be returned.\n    - Number of returned disks defaults to first 10, but can be specified with 'max_return' argument.\nauthor: Eda Zhou (@edamamez)\noptions:\n    max_return:\n        description: Sets the maximum number of unused disks to return.\n        default: 10\n        type: int\n\n    min_size:\n        description: Specifies the minimum disk size to return an unused disk.\n        default: '0'\n        type: str\n\n    max_size:\n        description: Specifies the maximum disk size to return an unused disk.\n        default: '0'\n        type: str\n\n    with_interface:\n        description: Specifies which disk interface will be accepted (scsi, virtio, nvme).\n        default: null\n        type: str\n\n    match_sector_size:\n        description: Specifies whether all returned disks must have the same (logical) sector size.\n        default: false\n        type: bool\n'''\n\nEXAMPLES = '''\n- name: Test finding first unused device module\n  hosts: localhost\n  tasks:\n    - name: Run module\n      find_unused_disk:\n        min_size: '10g'\n      register: testout\n\n    - name: Dump test output\n      debug:\n        msg: '{{ testout }}'\n'''\n\nRETURN = '''\ndisk_name:\n    description: Information about unused disks\n    returned: On success\n    type: complex\n    contains:\n        disks:\n            description: Unused disk(s) that have been found\n            returned: On success\n            type: list\n            sample: |\n              [\"sda1\", \"dm-0\", \"dm-3\"]\n        empty:\n            description: No unused disks were found\n            returned: On success\n            type: str\n            sample: \"Unable to find unused disk\"",
      "message": "duplicate-code: Similar lines in 2 files\n==find_unused_disk:[4:79]\n==find_unused_disk:[4:79]\n__metaclass__ = type\n\nDOCUMENTATION = '''\n---\nmodule: find_unused_disk\nshort_description: Gets unused disks\ndescription:\n    - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n    - Disks are considered in ascending alphanumeric sorted order.\n    - Disks that meet all conditions are considered 'empty' and returned (using kernel device name) in a list.\n        - 1. No known signatures exist on the disk, with the exception of partition tables.\n        - 2. If there is a partition table on the disk, it contains no partitions.\n        - 3. The disk has no holders to eliminate the possibility of it being a multipath or dmraid member device.\n        - 4. Device can be opened with exclusive access to make sure no other software is using it.\n    - If no disks meet all criteria, \"Unable to find unused disk\" will be returned.\n    - Number of returned disks defaults to first 10, but can be specified with 'max_return' argument.\nauthor: Eda Zhou (@edamamez)\noptions:\n    max_return:\n        description: Sets the maximum number of unused disks to return.\n        default: 10\n        type: int\n\n    min_size:\n        description: Specifies the minimum disk size to return an unused disk.\n        default: '0'\n        type: str\n\n    max_size:\n        description: Specifies the maximum disk size to return an unused disk.\n        default: '0'\n        type: str\n\n    with_interface:\n        description: Specifies which disk interface will be accepted (scsi, virtio, nvme).\n        default: null\n        type: str\n\n    match_sector_size:\n        description: Specifies whether all returned disks must have the same (logical) sector size.\n        default: false\n        type: bool\n'''\n\nEXAMPLES = '''\n- name: Test finding first unused device module\n  hosts: localhost\n  tasks:\n    - name: Run module\n      find_unused_disk:\n        min_size: '10g'\n      register: testout\n\n    - name: Dump test output\n      debug:\n        msg: '{{ testout }}'\n'''\n\nRETURN = '''\ndisk_name:\n    description: Information about unused disks\n    returned: On success\n    type: complex\n    contains:\n        disks:\n            description: Unused disk(s) that have been found\n            returned: On success\n            type: list\n            sample: |\n              [\"sda1\", \"dm-0\", \"dm-3\"]\n        empty:\n            description: No unused disks were found\n            returned: On success\n            type: str\n            sample: \"Unable to find unused disk\"",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm.provider:[4:90]\n==module_utils.network_lsr.nm.provider:[4:90]\n__metaclass__ = type\n\nimport logging\n\n# Relative import is not support by ansible 2.8 yet\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.nm import active_connection  # noqa:E501\nfrom ansible.module_utils.network_lsr.nm import client  # noqa:E501\nfrom ansible.module_utils.network_lsr.nm import connection  # noqa:E501\n\n# pylint: enable=import-error, no-name-in-module\n\n\nclass NetworkManagerProvider:\n    def deactivate_connection(self, connection_name, timeout, check_mode):\n        \"\"\"\n        Return True if changed.\n        \"\"\"\n        nm_client = client.get_client()\n        changed = False\n        for nm_ac in nm_client.get_active_connections():\n            nm_profile = nm_ac.get_connection()\n            if nm_profile and nm_profile.get_id() == connection_name:\n                changed |= active_connection.deactivate_active_connection(\n                    nm_ac, timeout, check_mode\n                )\n        if not changed:\n            logging.info(\"No active connection for %s\", connection_name)\n\n        return changed\n\n    def volatilize_connection_by_uuid(self, uuid, timeout, check_mode):\n        \"\"\"\n        Mark NM.RemoteConnection as volatile(delete on deactivation) via Update2,\n        if not supported, delete the profile.\n\n        Return True if changed.\n        \"\"\"\n        nm_client = client.get_client()\n        changed = False\n        for nm_profile in nm_client.get_connections():\n            if nm_profile and nm_profile.get_uuid() == uuid:\n                if hasattr(nm_profile, \"update2\"):\n                    changed |= connection.volatilize_remote_connection(\n                        nm_profile, timeout, check_mode\n                    )\n                else:\n                    changed |= connection.delete_remote_connection(\n                        nm_profile, timeout, check_mode\n                    )\n        if not changed:\n            logging.info(\"No connection with UUID %s to volatilize\", uuid)\n\n        return changed\n\n    def get_connections(self):\n        nm_client = client.get_client()\n        return nm_client.get_connections()\n\n    def get_client_version(self):\n        nm_client = client.get_client()\n        return nm_client.get_version()\n\n    def reload_configuration(self):\n        timeout = 10\n        nm_client = client.get_client()\n        main_loop = client.get_mainloop(timeout)\n        logging.debug(\"Reloading configuration with timeout %s\", timeout)\n        nm_client.reload_connections_async(\n            main_loop.cancellable, _reload_config_callback, main_loop\n        )\n        main_loop.run()\n\n\ndef _reload_config_callback(nm_client, result, main_loop):\n    try:\n        success = nm_client.reload_connections_finish(result)\n    except client.GLib.Error as e:\n        logging.warn(\"Failed to reload configuration: %s\", e)\n        main_loop.quit()\n        return\n    if success:\n        logging.debug(\"Reloading configuration finished\")\n    else:\n        logging.warn(\"Failed to reload configuration, no error message\")\n    main_loop.quit()",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm.provider:[4:90]\n==module_utils.network_lsr.nm.provider:[4:90]\n__metaclass__ = type\n\nimport logging\n\n# Relative import is not support by ansible 2.8 yet\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.nm import active_connection  # noqa:E501\nfrom ansible.module_utils.network_lsr.nm import client  # noqa:E501\nfrom ansible.module_utils.network_lsr.nm import connection  # noqa:E501\n\n# pylint: enable=import-error, no-name-in-module\n\n\nclass NetworkManagerProvider:\n    def deactivate_connection(self, connection_name, timeout, check_mode):\n        \"\"\"\n        Return True if changed.\n        \"\"\"\n        nm_client = client.get_client()\n        changed = False\n        for nm_ac in nm_client.get_active_connections():\n            nm_profile = nm_ac.get_connection()\n            if nm_profile and nm_profile.get_id() == connection_name:\n                changed |= active_connection.deactivate_active_connection(\n                    nm_ac, timeout, check_mode\n                )\n        if not changed:\n            logging.info(\"No active connection for %s\", connection_name)\n\n        return changed\n\n    def volatilize_connection_by_uuid(self, uuid, timeout, check_mode):\n        \"\"\"\n        Mark NM.RemoteConnection as volatile(delete on deactivation) via Update2,\n        if not supported, delete the profile.\n\n        Return True if changed.\n        \"\"\"\n        nm_client = client.get_client()\n        changed = False\n        for nm_profile in nm_client.get_connections():\n            if nm_profile and nm_profile.get_uuid() == uuid:\n                if hasattr(nm_profile, \"update2\"):\n                    changed |= connection.volatilize_remote_connection(\n                        nm_profile, timeout, check_mode\n                    )\n                else:\n                    changed |= connection.delete_remote_connection(\n                        nm_profile, timeout, check_mode\n                    )\n        if not changed:\n            logging.info(\"No connection with UUID %s to volatilize\", uuid)\n\n        return changed\n\n    def get_connections(self):\n        nm_client = client.get_client()\n        return nm_client.get_connections()\n\n    def get_client_version(self):\n        nm_client = client.get_client()\n        return nm_client.get_version()\n\n    def reload_configuration(self):\n        timeout = 10\n        nm_client = client.get_client()\n        main_loop = client.get_mainloop(timeout)\n        logging.debug(\"Reloading configuration with timeout %s\", timeout)\n        nm_client.reload_connections_async(\n            main_loop.cancellable, _reload_config_callback, main_loop\n        )\n        main_loop.run()\n\n\ndef _reload_config_callback(nm_client, result, main_loop):\n    try:\n        success = nm_client.reload_connections_finish(result)\n    except client.GLib.Error as e:\n        logging.warn(\"Failed to reload configuration: %s\", e)\n        main_loop.quit()\n        return\n    if success:\n        logging.debug(\"Reloading configuration finished\")\n    else:\n        logging.warn(\"Failed to reload configuration, no error message\")\n    main_loop.quit()",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm.client:[4:106]\n==module_utils.network_lsr.nm.client:[4:106]\n__metaclass__ = type\n\nimport logging\n\n# Relative import is not support by ansible 2.8 yet\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.nm import error  # noqa:E501\n\ntry:\n    import gi\nexcept ImportError:\n    NETWORK_HAS_GI = False\nelse:\n    NETWORK_HAS_GI = True\n\nif NETWORK_HAS_GI:\n    try:\n        gi.require_version(\"NM\", \"1.0\")\n\n        # It is required to state the NM version before importing it\n        # But this break the flake8 rule: https://www.flake8rules.com/rules/E402.html\n        # Use NOQA: E402 to suppress it.\n        from gi.repository import NM  # NOQA: E402\n        from gi.repository import GLib  # NOQA: E402\n        from gi.repository import Gio  # NOQA: E402\n\n        # pylint: enable=import-error, no-name-in-module\n\n        NM\n        GLib\n        Gio\n    except ValueError:\n        # This is to workaround a bug in ansible 2.9 which causes\n        # this code to be executed on the control node, where NM\n        # is not guaranteed to exist. On the other hand, it is\n        # ensured on the managed nodes as NM package is installed\n        # in the network role. Therefore, this exception handling\n        # does not affect the network installation and configuration\n        # on the managed nodes.\n        pass\n\n\ndef get_client():\n    return NM.Client.new()\n\n\nclass _NmMainLoop(object):\n    def __init__(self, timeout):\n        self._mainloop = GLib.MainLoop()\n        self._cancellable = Gio.Cancellable.new()\n        self._timeout = timeout\n        self._timeout_id = None\n\n    def run(self):\n        logging.debug(\"NM mainloop running\")\n        user_data = None\n        self._timeout_id = GLib.timeout_add(\n            int(self._timeout * 1000),\n            self._timeout_call_back,\n            user_data,\n        )\n        logging.debug(\"Added timeout checker\")\n        self._mainloop.run()\n\n    def _timeout_call_back(self, _user_data):\n        logging.error(\"Timeout\")\n        self.fail(error.LsrNetworkNmError(\"Timeout\"))\n\n    @property\n    def cancellable(self):\n        return self._cancellable\n\n    @property\n    def is_cancelled(self):\n        if self._cancellable:\n            return self._cancellable.is_cancelled()\n        return True\n\n    def _clean_up(self):\n        logging.debug(\"NM mainloop cleaning up\")\n        if self._timeout_id:\n            logging.debug(\"Removing timeout checker\")\n            GLib.source_remove(self._timeout_id)\n            self._timeout_id = None\n        if self._cancellable:\n            logging.debug(\"Canceling all pending tasks\")\n            self._cancellable.cancel()\n            self._cancellable = None\n        self._mainloop = None\n\n    def quit(self):\n        logging.debug(\"NM mainloop quitting\")\n        self._mainloop.quit()\n        self._clean_up()\n\n    def fail(self, exception):\n        self.quit()\n        raise exception\n\n\ndef get_mainloop(timeout):\n    return _NmMainLoop(timeout)",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm.client:[4:106]\n==module_utils.network_lsr.nm.client:[4:106]\n__metaclass__ = type\n\nimport logging\n\n# Relative import is not support by ansible 2.8 yet\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.nm import error  # noqa:E501\n\ntry:\n    import gi\nexcept ImportError:\n    NETWORK_HAS_GI = False\nelse:\n    NETWORK_HAS_GI = True\n\nif NETWORK_HAS_GI:\n    try:\n        gi.require_version(\"NM\", \"1.0\")\n\n        # It is required to state the NM version before importing it\n        # But this break the flake8 rule: https://www.flake8rules.com/rules/E402.html\n        # Use NOQA: E402 to suppress it.\n        from gi.repository import NM  # NOQA: E402\n        from gi.repository import GLib  # NOQA: E402\n        from gi.repository import Gio  # NOQA: E402\n\n        # pylint: enable=import-error, no-name-in-module\n\n        NM\n        GLib\n        Gio\n    except ValueError:\n        # This is to workaround a bug in ansible 2.9 which causes\n        # this code to be executed on the control node, where NM\n        # is not guaranteed to exist. On the other hand, it is\n        # ensured on the managed nodes as NM package is installed\n        # in the network role. Therefore, this exception handling\n        # does not affect the network installation and configuration\n        # on the managed nodes.\n        pass\n\n\ndef get_client():\n    return NM.Client.new()\n\n\nclass _NmMainLoop(object):\n    def __init__(self, timeout):\n        self._mainloop = GLib.MainLoop()\n        self._cancellable = Gio.Cancellable.new()\n        self._timeout = timeout\n        self._timeout_id = None\n\n    def run(self):\n        logging.debug(\"NM mainloop running\")\n        user_data = None\n        self._timeout_id = GLib.timeout_add(\n            int(self._timeout * 1000),\n            self._timeout_call_back,\n            user_data,\n        )\n        logging.debug(\"Added timeout checker\")\n        self._mainloop.run()\n\n    def _timeout_call_back(self, _user_data):\n        logging.error(\"Timeout\")\n        self.fail(error.LsrNetworkNmError(\"Timeout\"))\n\n    @property\n    def cancellable(self):\n        return self._cancellable\n\n    @property\n    def is_cancelled(self):\n        if self._cancellable:\n            return self._cancellable.is_cancelled()\n        return True\n\n    def _clean_up(self):\n        logging.debug(\"NM mainloop cleaning up\")\n        if self._timeout_id:\n            logging.debug(\"Removing timeout checker\")\n            GLib.source_remove(self._timeout_id)\n            self._timeout_id = None\n        if self._cancellable:\n            logging.debug(\"Canceling all pending tasks\")\n            self._cancellable.cancel()\n            self._cancellable = None\n        self._mainloop = None\n\n    def quit(self):\n        logging.debug(\"NM mainloop quitting\")\n        self._mainloop.quit()\n        self._clean_up()\n\n    def fail(self, exception):\n        self.quit()\n        raise exception\n\n\ndef get_mainloop(timeout):\n    return _NmMainLoop(timeout)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==bsize:[4:61]\n==bsize:[4:61]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: bsize\n\nshort_description: Module for basic manipulation with byte sizes\n\nversion_added: \"2.13.0\"\n\ndescription:\n    - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n    - \"Module accepts byte size strings with the units and produces strings in\n      form of input accepted by different storage tools\"\n\noptions:\n    size:\n        description:\n            - String containing number and byte units\n        required: true\n        type: str\n\nauthor:\n    - Jan Pokorny (@japokorn)\n'''\n\nEXAMPLES = '''\n# Obtain sizes in format for various tools\n- name: Get 10 KiB size\n  bsize:\n    size: 10 KiB\n'''\n\nRETURN = '''\nsize:\n    description: Size in binary format units\n    type: str\n    returned: success\nbytes:\n    description: Size in bytes\n    type: int\n    returned: success\nlvm:\n    description: Size in binary format. No space after the number,\n                 first letter of unit prefix in lowercase only\n    type: str\n    returned: success\nparted:\n    description: Size in binary format. No space after the number\n    type: str\n    returned: success",
      "message": "duplicate-code: Similar lines in 2 files\n==bsize:[4:61]\n==bsize:[4:61]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: bsize\n\nshort_description: Module for basic manipulation with byte sizes\n\nversion_added: \"2.13.0\"\n\ndescription:\n    - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n    - \"Module accepts byte size strings with the units and produces strings in\n      form of input accepted by different storage tools\"\n\noptions:\n    size:\n        description:\n            - String containing number and byte units\n        required: true\n        type: str\n\nauthor:\n    - Jan Pokorny (@japokorn)\n'''\n\nEXAMPLES = '''\n# Obtain sizes in format for various tools\n- name: Get 10 KiB size\n  bsize:\n    size: 10 KiB\n'''\n\nRETURN = '''\nsize:\n    description: Size in binary format units\n    type: str\n    returned: success\nbytes:\n    description: Size in bytes\n    type: int\n    returned: success\nlvm:\n    description: Size in binary format. No space after the number,\n                 first letter of unit prefix in lowercase only\n    type: str\n    returned: success\nparted:\n    description: Size in binary format. No space after the number\n    type: str\n    returned: success",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==lvm_gensym:[5:55]\n==lvm_gensym:[5:55]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: lvm_gensym\nshort_description: Generate default names for lvm variables\nversion_added: \"2.13.0\"\ndescription:\n    - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n    - \"Module accepts two input strings consisting of a file system type and\n       a mount point path, and outputs names based on system information\"\noptions:\n    fs_type:\n        description:\n            - String describing the desired file system type\n        required: true\n        type: str\n    mount:\n        description:\n            - String describing the mount point path\n        required: true\n        type: str\nauthor:\n    - Tim Flannagan (@timflannagan)\n'''\n\nEXAMPLES = '''\n- name: Generate names\n  lvm_gensym:\n    fs_type: \"{{ fs_type }}\"\n    mount: \"{{ mount_point }}\"\n  register: lvm_results\n  when: lvm_vg == \"\" and mount_point != \"\" and fs_type != \"\"\n'''\n\nRETURN = '''\nvg_name:\n    description: The default generated name for an unspecified volume group\n    type: str\n    returned: success\nlv_name:\n    description: The default generated name for an unspecified logical volume\n    type: str\n    returned: success",
      "message": "duplicate-code: Similar lines in 2 files\n==lvm_gensym:[5:55]\n==lvm_gensym:[5:55]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: lvm_gensym\nshort_description: Generate default names for lvm variables\nversion_added: \"2.13.0\"\ndescription:\n    - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n    - \"Module accepts two input strings consisting of a file system type and\n       a mount point path, and outputs names based on system information\"\noptions:\n    fs_type:\n        description:\n            - String describing the desired file system type\n        required: true\n        type: str\n    mount:\n        description:\n            - String describing the mount point path\n        required: true\n        type: str\nauthor:\n    - Tim Flannagan (@timflannagan)\n'''\n\nEXAMPLES = '''\n- name: Generate names\n  lvm_gensym:\n    fs_type: \"{{ fs_type }}\"\n    mount: \"{{ mount_point }}\"\n  register: lvm_results\n  when: lvm_vg == \"\" and mount_point != \"\" and fs_type != \"\"\n'''\n\nRETURN = '''\nvg_name:\n    description: The default generated name for an unspecified volume group\n    type: str\n    returned: success\nlv_name:\n    description: The default generated name for an unspecified logical volume\n    type: str\n    returned: success",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_escape_chars:[12:74]\n==scripts.fix_escape_chars:[12:74]\n    base_path = Path(\".\")\n    yaml_files = list(base_path.glob(\"roles/**/*.yml\"))\n\n    fixes_applied = 0\n\n    for file_path in yaml_files:\n        try:\n            with open(file_path, 'r', encoding='utf-8') as f:\n                content = f.read()\n\n            original_content = content\n\n            # Fix escaped quotes inside double-quoted strings\n            # Pattern: \"...\\'...\\'\" -> \"...'...'\"\n            content = re.sub(r'\"([^\"]*?)\\\\\\'([^\"]*?)\\\\\\'\"', r'\"\\1\\'\\2\\'\"', content)\n\n            # Fix escaped quotes in Jinja filters within double quotes\n            # Pattern: \"{{ var | default(\\'value\\') }}\" -> \"{{ var | default('value') }}\"\n            content = re.sub(r'\"(\\{\\{[^}]*?\\|\\s*default\\s*\\()\\\\\\'([^\\\\\\']*?)\\\\\\'\\)([^}]*?\\}\\})\"', r'\"\\1\\'\\2\\'\\)\\3\"', content)\n\n            # Alternative pattern for the same issue\n            content = re.sub(r'\"([^\"]*?default\\s*\\()\\\\\\'([^\\\\\\']*?)\\\\\\'\\)([^\"]*?)\"', r'\"\\1\\'\\2\\'\\)\\3\"', content)\n\n            # More generic fix for any escaped single quotes in double-quoted strings\n            content = re.sub(r'\"([^\"]*?)\\\\\\'([^\"]*?)\"', r'\"\\1\\'\\2\"', content)\n\n            if content != original_content:\n                with open(file_path, 'w', encoding='utf-8') as f:\n                    f.write(content)\n                fixes_applied += 1\n                print(f\"Fixed escape character errors in {file_path}\")\n\n        except Exception as e:\n            print(f\"Error fixing escape characters in {file_path}: {e}\")\n\n    return fixes_applied\n\ndef main():\n    print(\"\ud83d\udd27 Fixing escape character errors in YAML files...\")\n    fixes = fix_escape_character_errors()\n    print(f\"\u2705 Fixed escape character errors in {fixes} files\")\n\n    if fixes > 0:\n        print(\"\\n\ud83d\udd0d Validating YAML syntax after fixes...\")\n        # Quick validation check\n        import yaml\n        yaml_files = list(Path(\".\").glob(\"roles/**/*.yml\"))\n        valid_count = 0\n        error_count = 0\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    yaml.safe_load(f)\n                valid_count += 1\n            except yaml.YAMLError:\n                error_count += 1\n\n        print(f\"\ud83d\udcca YAML validation results: {valid_count} valid, {error_count} with errors\")\n\nif __name__ == \"__main__\":\n    main()",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_escape_chars:[12:74]\n==scripts.fix_escape_chars:[12:74]\n    base_path = Path(\".\")\n    yaml_files = list(base_path.glob(\"roles/**/*.yml\"))\n\n    fixes_applied = 0\n\n    for file_path in yaml_files:\n        try:\n            with open(file_path, 'r', encoding='utf-8') as f:\n                content = f.read()\n\n            original_content = content\n\n            # Fix escaped quotes inside double-quoted strings\n            # Pattern: \"...\\'...\\'\" -> \"...'...'\"\n            content = re.sub(r'\"([^\"]*?)\\\\\\'([^\"]*?)\\\\\\'\"', r'\"\\1\\'\\2\\'\"', content)\n\n            # Fix escaped quotes in Jinja filters within double quotes\n            # Pattern: \"{{ var | default(\\'value\\') }}\" -> \"{{ var | default('value') }}\"\n            content = re.sub(r'\"(\\{\\{[^}]*?\\|\\s*default\\s*\\()\\\\\\'([^\\\\\\']*?)\\\\\\'\\)([^}]*?\\}\\})\"', r'\"\\1\\'\\2\\'\\)\\3\"', content)\n\n            # Alternative pattern for the same issue\n            content = re.sub(r'\"([^\"]*?default\\s*\\()\\\\\\'([^\\\\\\']*?)\\\\\\'\\)([^\"]*?)\"', r'\"\\1\\'\\2\\'\\)\\3\"', content)\n\n            # More generic fix for any escaped single quotes in double-quoted strings\n            content = re.sub(r'\"([^\"]*?)\\\\\\'([^\"]*?)\"', r'\"\\1\\'\\2\"', content)\n\n            if content != original_content:\n                with open(file_path, 'w', encoding='utf-8') as f:\n                    f.write(content)\n                fixes_applied += 1\n                print(f\"Fixed escape character errors in {file_path}\")\n\n        except Exception as e:\n            print(f\"Error fixing escape characters in {file_path}: {e}\")\n\n    return fixes_applied\n\ndef main():\n    print(\"\ud83d\udd27 Fixing escape character errors in YAML files...\")\n    fixes = fix_escape_character_errors()\n    print(f\"\u2705 Fixed escape character errors in {fixes} files\")\n\n    if fixes > 0:\n        print(\"\\n\ud83d\udd0d Validating YAML syntax after fixes...\")\n        # Quick validation check\n        import yaml\n        yaml_files = list(Path(\".\").glob(\"roles/**/*.yml\"))\n        valid_count = 0\n        error_count = 0\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    yaml.safe_load(f)\n                valid_count += 1\n            except yaml.YAMLError:\n                error_count += 1\n\n        print(f\"\ud83d\udcca YAML validation results: {valid_count} valid, {error_count} with errors\")\n\nif __name__ == \"__main__\":\n    main()",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==resolve_blockdev:[4:50]\n==resolve_blockdev:[4:50]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: resolve_blockdev\nshort_description: Resolve block device specification to device node path.\nversion_added: \"2.13.0\"\ndescription:\n    - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n    - \"This module accepts various forms of block device identifiers and\n       resolves them to the correct block device node path.\"\noptions:\n    spec:\n        description:\n            - String describing a block device\n        required: true\n        type: str\nauthor:\n    - David Lehman (@dwlehman)\n'''\n\nEXAMPLES = '''\n- name: Resolve device by label\n  resolve_blockdev:\n    spec: LABEL=MyData\n\n- name: Resolve device by name\n  resolve_blockdev:\n    spec: mpathb\n\n- name: Resolve device by /dev/disk/by-id symlink name\n  resolve_blockdev:\n    spec: wwn-0x5000c5005bc37f3f\n'''\n\nRETURN = '''\ndevice:\n    description: Path to block device node\n    type: str\n    returned: success",
      "message": "duplicate-code: Similar lines in 2 files\n==resolve_blockdev:[4:50]\n==resolve_blockdev:[4:50]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: resolve_blockdev\nshort_description: Resolve block device specification to device node path.\nversion_added: \"2.13.0\"\ndescription:\n    - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n    - \"This module accepts various forms of block device identifiers and\n       resolves them to the correct block device node path.\"\noptions:\n    spec:\n        description:\n            - String describing a block device\n        required: true\n        type: str\nauthor:\n    - David Lehman (@dwlehman)\n'''\n\nEXAMPLES = '''\n- name: Resolve device by label\n  resolve_blockdev:\n    spec: LABEL=MyData\n\n- name: Resolve device by name\n  resolve_blockdev:\n    spec: mpathb\n\n- name: Resolve device by /dev/disk/by-id symlink name\n  resolve_blockdev:\n    spec: wwn-0x5000c5005bc37f3f\n'''\n\nRETURN = '''\ndevice:\n    description: Path to block device node\n    type: str\n    returned: success",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.ethtool:[4:64]\n==module_utils.network_lsr.ethtool:[4:64]\n__metaclass__ = type\n\nimport array\nimport struct\nimport fcntl\nimport socket\n\nfrom .utils import Util\n\nETHTOOL_GPERMADDR = 0x00000020\nSIOCETHTOOL = 0x8946\nMAX_ADDR_LEN = 32\nIFNAMESIZ = 16\n\n\ndef get_perm_addr(ifname):\n    \"\"\"\n    Return the Permanent address value for the specified interface using the\n    ETHTOOL_GPERMADDR ioctl command.\n\n    Please for further documentation, see:\n    wokeignore:rule=master\n    https://github.com/torvalds/linux/blob/master/include/uapi/linux/ethtool.h#L734\n    wokeignore:rule=master\n    https://github.com/torvalds/linux/blob/master/include/uapi/linux/ethtool.h#L1388\n    https://git.kernel.org/pub/scm/network/ethtool/ethtool.git/tree/ethtool.c#n4172\n    \"\"\"\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sockfd = sock.fileno()\n        ifname = ifname.encode(\"utf-8\")\n        if len(ifname) > IFNAMESIZ:\n            return None\n\n        ecmd = array.array(\n            \"B\",\n            struct.pack(\n                \"II%is\" % MAX_ADDR_LEN,\n                ETHTOOL_GPERMADDR,\n                MAX_ADDR_LEN,\n                b\"\\x00\" * MAX_ADDR_LEN,\n            ),\n        )\n        ifreq = struct.pack(\"%isP\" % IFNAMESIZ, ifname, ecmd.buffer_info()[0])\n\n        fcntl.ioctl(sockfd, SIOCETHTOOL, ifreq)\n        try:\n            res = ecmd.tobytes()\n        except AttributeError:  # tobytes() is not available in python2\n            # pylint: disable=no-member\n            res = ecmd.tostring()\n            # pylint: enable=no-member\n        unused, size, perm_addr = struct.unpack(\"II%is\" % MAX_ADDR_LEN, res)\n        perm_addr = Util.mac_ntoa(perm_addr[:size])\n    except IOError:\n        perm_addr = None\n    finally:\n        sock.close()\n\n    return perm_addr",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.ethtool:[4:64]\n==module_utils.network_lsr.ethtool:[4:64]\n__metaclass__ = type\n\nimport array\nimport struct\nimport fcntl\nimport socket\n\nfrom .utils import Util\n\nETHTOOL_GPERMADDR = 0x00000020\nSIOCETHTOOL = 0x8946\nMAX_ADDR_LEN = 32\nIFNAMESIZ = 16\n\n\ndef get_perm_addr(ifname):\n    \"\"\"\n    Return the Permanent address value for the specified interface using the\n    ETHTOOL_GPERMADDR ioctl command.\n\n    Please for further documentation, see:\n    wokeignore:rule=master\n    https://github.com/torvalds/linux/blob/master/include/uapi/linux/ethtool.h#L734\n    wokeignore:rule=master\n    https://github.com/torvalds/linux/blob/master/include/uapi/linux/ethtool.h#L1388\n    https://git.kernel.org/pub/scm/network/ethtool/ethtool.git/tree/ethtool.c#n4172\n    \"\"\"\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sockfd = sock.fileno()\n        ifname = ifname.encode(\"utf-8\")\n        if len(ifname) > IFNAMESIZ:\n            return None\n\n        ecmd = array.array(\n            \"B\",\n            struct.pack(\n                \"II%is\" % MAX_ADDR_LEN,\n                ETHTOOL_GPERMADDR,\n                MAX_ADDR_LEN,\n                b\"\\x00\" * MAX_ADDR_LEN,\n            ),\n        )\n        ifreq = struct.pack(\"%isP\" % IFNAMESIZ, ifname, ecmd.buffer_info()[0])\n\n        fcntl.ioctl(sockfd, SIOCETHTOOL, ifreq)\n        try:\n            res = ecmd.tobytes()\n        except AttributeError:  # tobytes() is not available in python2\n            # pylint: disable=no-member\n            res = ecmd.tostring()\n            # pylint: enable=no-member\n        unused, size, perm_addr = struct.unpack(\"II%is\" % MAX_ADDR_LEN, res)\n        perm_addr = Util.mac_ntoa(perm_addr[:size])\n    except IOError:\n        perm_addr = None\n    finally:\n        sock.close()\n\n    return perm_addr",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==library.network_state:[6:42]\n==library.network_state:[6:42]\n__metaclass__ = type\n\nDOCUMENTATION = r\"\"\"\n---\nmodule: network_state\nversion_added: \"2.13.0\"\nshort_description: module for network role to apply network state configuration\ndescription:\n    - This module allows to apply the network state configuration through nmstate,\n      https://github.com/nmstate/nmstate\noptions:\n    desired_state:\n        description: Nmstate state definition\n        required: true\n        type: dict\nauthor: \"Wen Liang (@liangwen12year)\"\n\"\"\"\n\nEXAMPLES = r\"\"\"\nnetwork_state:\n  desired_state:\n    dns-resolver:\n      config:\n        search:\n          - example.com\n          - example.org\n        server:\n          - 2001:4860:4860::8888\n          - 8.8.8.8\n\"\"\"\n\nRETURN = r\"\"\"\nstate:\n    description: Network state after running the module\n    type: dict\n    returned: always",
      "message": "duplicate-code: Similar lines in 2 files\n==library.network_state:[6:42]\n==library.network_state:[6:42]\n__metaclass__ = type\n\nDOCUMENTATION = r\"\"\"\n---\nmodule: network_state\nversion_added: \"2.13.0\"\nshort_description: module for network role to apply network state configuration\ndescription:\n    - This module allows to apply the network state configuration through nmstate,\n      https://github.com/nmstate/nmstate\noptions:\n    desired_state:\n        description: Nmstate state definition\n        required: true\n        type: dict\nauthor: \"Wen Liang (@liangwen12year)\"\n\"\"\"\n\nEXAMPLES = r\"\"\"\nnetwork_state:\n  desired_state:\n    dns-resolver:\n      config:\n        search:\n          - example.com\n          - example.org\n        server:\n          - 2001:4860:4860::8888\n          - 8.8.8.8\n\"\"\"\n\nRETURN = r\"\"\"\nstate:\n    description: Network state after running the module\n    type: dict\n    returned: always",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blockdev_info:[4:36]\n==blockdev_info:[4:36]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: blockdev_info\nshort_description: Collect info about block devices in the system.\nversion_added: \"2.13.0\"\ndescription:\n    - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n    - \"This module collects information about block devices\"\noptions: {}\nauthor:\n    - David Lehman (@dwlehman)\n'''\n\nEXAMPLES = '''\n- name: Get info about block devices\n  blockdev_info:\n  register: blk_info\n'''\n\nRETURN = '''\ninfo:\n    description: dict w/ device path keys and device info dict values\n    returned: success\n    type: dict",
      "message": "duplicate-code: Similar lines in 2 files\n==blockdev_info:[4:36]\n==blockdev_info:[4:36]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: blockdev_info\nshort_description: Collect info about block devices in the system.\nversion_added: \"2.13.0\"\ndescription:\n    - \"WARNING: Do not use this module directly! It is only for role internal use.\"\n    - \"This module collects information about block devices\"\noptions: {}\nauthor:\n    - David Lehman (@dwlehman)\n'''\n\nEXAMPLES = '''\n- name: Get info about block devices\n  blockdev_info:\n  register: blk_info\n'''\n\nRETURN = '''\ninfo:\n    description: dict w/ device path keys and device info dict values\n    returned: success\n    type: dict",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[28:50]\n==scripts.generate_enhanced_compatibility_matrix:[126:144]\n            for role_dir in self.roles_dir.iterdir():\n                if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                    tasks_dir = role_dir / \"tasks\"\n                    if tasks_dir.exists():\n                        for task_file in tasks_dir.glob(\"*.yml\"):\n                            try:\n                                with open(task_file, 'r') as f:\n                                    content = f.read()\n                                for pattern in version_patterns:\n                                    if pattern in content.lower():\n                                        if \"rhel8\" in pattern or \"el8\" in pattern:\n                                            rhel_versions.add(\"8\")\n                                        elif \"rhel9\" in pattern or \"el9\" in pattern:\n                                            rhel_versions.add(\"9\")\n                                        elif \"rhel10\" in pattern or \"el10\" in pattern:\n                                            rhel_versions.add(\"10\")\n                            except Exception as e:\n                                print(f\"Warning: Could not read {task_file}: {e}\")",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[28:50]\n==scripts.generate_enhanced_compatibility_matrix:[126:144]\n            for role_dir in self.roles_dir.iterdir():\n                if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                    tasks_dir = role_dir / \"tasks\"\n                    if tasks_dir.exists():\n                        for task_file in tasks_dir.glob(\"*.yml\"):\n                            try:\n                                with open(task_file, 'r') as f:\n                                    content = f.read()\n                                for pattern in version_patterns:\n                                    if pattern in content.lower():\n                                        if \"rhel8\" in pattern or \"el8\" in pattern:\n                                            rhel_versions.add(\"8\")\n                                        elif \"rhel9\" in pattern or \"el9\" in pattern:\n                                            rhel_versions.add(\"9\")\n                                        elif \"rhel10\" in pattern or \"el10\" in pattern:\n                                            rhel_versions.add(\"10\")\n                            except Exception as e:\n                                print(f\"Warning: Could not read {task_file}: {e}\")",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[28:50]\n==scripts.generate_enhanced_compatibility_matrix:[126:144]\n            for role_dir in self.roles_dir.iterdir():\n                if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                    tasks_dir = role_dir / \"tasks\"\n                    if tasks_dir.exists():\n                        for task_file in tasks_dir.glob(\"*.yml\"):\n                            try:\n                                with open(task_file, 'r') as f:\n                                    content = f.read()\n                                for pattern in version_patterns:\n                                    if pattern in content.lower():\n                                        if \"rhel8\" in pattern or \"el8\" in pattern:\n                                            rhel_versions.add(\"8\")\n                                        elif \"rhel9\" in pattern or \"el9\" in pattern:\n                                            rhel_versions.add(\"9\")\n                                        elif \"rhel10\" in pattern or \"el10\" in pattern:\n                                            rhel_versions.add(\"10\")\n                            except Exception as e:\n                                print(f\"Warning: Could not read {task_file}: {e}\")",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[28:50]\n==scripts.generate_enhanced_compatibility_matrix:[126:144]\n            for role_dir in self.roles_dir.iterdir():\n                if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                    tasks_dir = role_dir / \"tasks\"\n                    if tasks_dir.exists():\n                        for task_file in tasks_dir.glob(\"*.yml\"):\n                            try:\n                                with open(task_file, 'r') as f:\n                                    content = f.read()\n                                for pattern in version_patterns:\n                                    if pattern in content.lower():\n                                        if \"rhel8\" in pattern or \"el8\" in pattern:\n                                            rhel_versions.add(\"8\")\n                                        elif \"rhel9\" in pattern or \"el9\" in pattern:\n                                            rhel_versions.add(\"9\")\n                                        elif \"rhel10\" in pattern or \"el10\" in pattern:\n                                            rhel_versions.add(\"10\")\n                            except Exception as e:\n                                print(f\"Warning: Could not read {task_file}: {e}\")",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[100:118]\n==blivet:[35:53]\n            encryption:\n                description: encryption\n                type: bool\n            encryption_cipher:\n                description: encryption_cipher\n                type: str\n            encryption_key:\n                description: encryption_key file, not the actual key\n                type: str\n            encryption_key_size:\n                description: encryption_key_size\n                type: int\n            encryption_luks_version:\n                description: encryption_luks_version\n                type: str\n            encryption_password:\n                description: encryption_password\n                type: str",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[100:118]\n==blivet:[35:53]\n            encryption:\n                description: encryption\n                type: bool\n            encryption_cipher:\n                description: encryption_cipher\n                type: str\n            encryption_key:\n                description: encryption_key file, not the actual key\n                type: str\n            encryption_key_size:\n                description: encryption_key_size\n                type: int\n            encryption_luks_version:\n                description: encryption_luks_version\n                type: str\n            encryption_password:\n                description: encryption_password\n                type: str",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[100:118]\n==blivet:[35:53]\n            encryption:\n                description: encryption\n                type: bool\n            encryption_cipher:\n                description: encryption_cipher\n                type: str\n            encryption_key:\n                description: encryption_key file, not the actual key\n                type: str\n            encryption_key_size:\n                description: encryption_key_size\n                type: int\n            encryption_luks_version:\n                description: encryption_luks_version\n                type: str\n            encryption_password:\n                description: encryption_password\n                type: str",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[100:118]\n==blivet:[35:53]\n            encryption:\n                description: encryption\n                type: bool\n            encryption_cipher:\n                description: encryption_cipher\n                type: str\n            encryption_key:\n                description: encryption_key file, not the actual key\n                type: str\n            encryption_key_size:\n                description: encryption_key_size\n                type: int\n            encryption_luks_version:\n                description: encryption_luks_version\n                type: str\n            encryption_password:\n                description: encryption_password\n                type: str",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm_provider:[5:60]\n==module_utils.network_lsr.nm_provider:[5:60]\n__metaclass__ = type\n\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.utils import Util  # noqa:E501\n\nETHTOOL_FEATURE_PREFIX = \"ETHTOOL_OPTNAME_FEATURE_\"\nETHTOOL_COALESCE_PREFIX = \"ETHTOOL_OPTNAME_COALESCE_\"\nETHTOOL_RING_PREFIX = \"ETHTOOL_OPTNAME_RING_\"\n\n\ndef get_nm_ethtool_feature(name):\n    \"\"\"\n    Translate ethtool feature into Network Manager name\n\n    :param name: Name of the feature\n    :type name: str\n    :returns: Name of the feature to be used by `NM.SettingEthtool.set_feature()`\n    :rtype: str\n    \"\"\"\n\n    name = ETHTOOL_FEATURE_PREFIX + name.upper()\n\n    feature = getattr(Util.NM(), name, None)\n    return feature\n\n\ndef get_nm_ethtool_coalesce(name):\n    \"\"\"\n    Translate ethtool coalesce into Network Manager name\n\n    :param name: Name of the coalesce\n    :type name: str\n    :returns: Name of the setting to be used by `NM.SettingEthtool.set_coalesce()`\n    :rtype: str\n    \"\"\"\n\n    name = ETHTOOL_COALESCE_PREFIX + name.upper()\n\n    coalesce = getattr(Util.NM(), name, None)\n    return coalesce\n\n\ndef get_nm_ethtool_ring(name):\n    \"\"\"\n    Translate ethtool ring option into NetworkManager attribute name\n    :param name: Name of the ring\n    :type name: str\n    :returns: Name of the setting to be used by `NM.SettingEthtool.set_ring()`\n    :rtype: str\n    \"\"\"\n\n    name = ETHTOOL_RING_PREFIX + name.upper()\n\n    ring = getattr(Util.NM(), name, None)\n    return ring",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm_provider:[5:60]\n==module_utils.network_lsr.nm_provider:[5:60]\n__metaclass__ = type\n\n# pylint: disable=import-error, no-name-in-module\nfrom ansible.module_utils.network_lsr.utils import Util  # noqa:E501\n\nETHTOOL_FEATURE_PREFIX = \"ETHTOOL_OPTNAME_FEATURE_\"\nETHTOOL_COALESCE_PREFIX = \"ETHTOOL_OPTNAME_COALESCE_\"\nETHTOOL_RING_PREFIX = \"ETHTOOL_OPTNAME_RING_\"\n\n\ndef get_nm_ethtool_feature(name):\n    \"\"\"\n    Translate ethtool feature into Network Manager name\n\n    :param name: Name of the feature\n    :type name: str\n    :returns: Name of the feature to be used by `NM.SettingEthtool.set_feature()`\n    :rtype: str\n    \"\"\"\n\n    name = ETHTOOL_FEATURE_PREFIX + name.upper()\n\n    feature = getattr(Util.NM(), name, None)\n    return feature\n\n\ndef get_nm_ethtool_coalesce(name):\n    \"\"\"\n    Translate ethtool coalesce into Network Manager name\n\n    :param name: Name of the coalesce\n    :type name: str\n    :returns: Name of the setting to be used by `NM.SettingEthtool.set_coalesce()`\n    :rtype: str\n    \"\"\"\n\n    name = ETHTOOL_COALESCE_PREFIX + name.upper()\n\n    coalesce = getattr(Util.NM(), name, None)\n    return coalesce\n\n\ndef get_nm_ethtool_ring(name):\n    \"\"\"\n    Translate ethtool ring option into NetworkManager attribute name\n    :param name: Name of the ring\n    :type name: str\n    :returns: Name of the setting to be used by `NM.SettingEthtool.set_ring()`\n    :rtype: str\n    \"\"\"\n\n    name = ETHTOOL_RING_PREFIX + name.upper()\n\n    ring = getattr(Util.NM(), name, None)\n    return ring",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[278:295]\n==scripts.fix_ansible_lint_advanced:[326:343]\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")\n\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[278:295]\n==scripts.fix_ansible_lint_advanced:[326:343]\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")\n\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[278:295]\n==scripts.fix_ansible_lint_advanced:[326:343]\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")\n\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[278:295]\n==scripts.fix_ansible_lint_advanced:[326:343]\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")\n\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==_version:[3:21]\n==_version:[3:21]\n__all__ = [\"__version__\", \"__version_tuple__\", \"version\", \"version_tuple\"]\n\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\nelse:\n    VERSION_TUPLE = object\n\nversion: str\n__version__: str\n__version_tuple__: VERSION_TUPLE\nversion_tuple: VERSION_TUPLE\n\n__version__ = version = '0.9.1.dev162+g425a978.d20250807'\n__version_tuple__ = version_tuple = (0, 9, 1, 'dev162', 'g425a978.d20250807')",
      "message": "duplicate-code: Similar lines in 2 files\n==_version:[3:21]\n==_version:[3:21]\n__all__ = [\"__version__\", \"__version_tuple__\", \"version\", \"version_tuple\"]\n\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\nelse:\n    VERSION_TUPLE = object\n\nversion: str\n__version__: str\n__version_tuple__: VERSION_TUPLE\nversion_tuple: VERSION_TUPLE\n\n__version__ = version = '0.9.1.dev162+g425a978.d20250807'\n__version_tuple__ = version_tuple = (0, 9, 1, 'dev162', 'g425a978.d20250807')",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[269:281]\n==blivet:[71:83]\n            raid_device_count:\n                description: raid_device_count\n                type: int\n            raid_spare_count:\n                description: raid_spare_count\n                type: int\n            raid_metadata_version:\n                description: raid_metadata_version\n                type: str\n            raid_chunk_size:\n                description: raid_chunk_size\n                type: str",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[269:281]\n==blivet:[71:83]\n            raid_device_count:\n                description: raid_device_count\n                type: int\n            raid_spare_count:\n                description: raid_spare_count\n                type: int\n            raid_metadata_version:\n                description: raid_metadata_version\n                type: str\n            raid_chunk_size:\n                description: raid_chunk_size\n                type: str",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[269:281]\n==blivet:[71:83]\n            raid_device_count:\n                description: raid_device_count\n                type: int\n            raid_spare_count:\n                description: raid_spare_count\n                type: int\n            raid_metadata_version:\n                description: raid_metadata_version\n                type: str\n            raid_chunk_size:\n                description: raid_chunk_size\n                type: str",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[269:281]\n==blivet:[71:83]\n            raid_device_count:\n                description: raid_device_count\n                type: int\n            raid_spare_count:\n                description: raid_spare_count\n                type: int\n            raid_metadata_version:\n                description: raid_metadata_version\n                type: str\n            raid_chunk_size:\n                description: raid_chunk_size\n                type: str",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[211:225]\n==scripts.fix_ansible_lint_advanced:[77:91]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n                lines = content.split('\\n')\n                new_lines = []\n                i = 0\n\n                while i < len(lines):\n                    line = lines[i]\n\n                    # Look for tasks with become_user but no become",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[211:225]\n==scripts.fix_ansible_lint_advanced:[77:91]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n                lines = content.split('\\n')\n                new_lines = []\n                i = 0\n\n                while i < len(lines):\n                    line = lines[i]\n\n                    # Look for tasks with become_user but no become",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[211:225]\n==scripts.fix_ansible_lint_advanced:[77:91]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n                lines = content.split('\\n')\n                new_lines = []\n                i = 0\n\n                while i < len(lines):\n                    line = lines[i]\n\n                    # Look for tasks with become_user but no become",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[211:225]\n==scripts.fix_ansible_lint_advanced:[77:91]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n                lines = content.split('\\n')\n                new_lines = []\n                i = 0\n\n                while i < len(lines):\n                    line = lines[i]\n\n                    # Look for tasks with become_user but no become",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm.connection:[33:47]\n==module_utils.network_lsr.nm.connection:[86:100]\n            nm_profile.get_id(),\n            nm_profile.get_uuid(),\n            timeout,\n        )\n        main_loop.run()\n    return True\n\n\ndef _nm_profile_volatile_update2_call_back(nm_profile, result, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n\n    try:",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm.connection:[33:47]\n==module_utils.network_lsr.nm.connection:[86:100]\n            nm_profile.get_id(),\n            nm_profile.get_uuid(),\n            timeout,\n        )\n        main_loop.run()\n    return True\n\n\ndef _nm_profile_volatile_update2_call_back(nm_profile, result, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n\n    try:",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm.connection:[33:47]\n==module_utils.network_lsr.nm.connection:[86:100]\n            nm_profile.get_id(),\n            nm_profile.get_uuid(),\n            timeout,\n        )\n        main_loop.run()\n    return True\n\n\ndef _nm_profile_delete_call_back(nm_profile, result, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n\n    try:",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm.connection:[33:47]\n==module_utils.network_lsr.nm.connection:[86:100]\n            nm_profile.get_id(),\n            nm_profile.get_uuid(),\n            timeout,\n        )\n        main_loop.run()\n    return True\n\n\ndef _nm_profile_delete_call_back(nm_profile, result, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n\n    try:",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm.connection:[105:114]\n==module_utils.network_lsr.nm.connection:[52:61]\n                    id=nm_profile.get_id(), uuid=nm_profile.get_uuid(), error=e\n                )\n            )\n        )\n    if success:\n        main_loop.quit()\n    else:\n        main_loop.fail(\n            error.LsrNetworkNmError(",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm.connection:[105:114]\n==module_utils.network_lsr.nm.connection:[52:61]\n                    id=nm_profile.get_id(), uuid=nm_profile.get_uuid(), error=e\n                )\n            )\n        )\n    if success:\n        main_loop.quit()\n    else:\n        main_loop.fail(\n            error.LsrNetworkNmError(",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm.connection:[105:114]\n==module_utils.network_lsr.nm.connection:[52:61]\n                    id=nm_profile.get_id(), uuid=nm_profile.get_uuid(), error=e\n                )\n            )\n        )\n    if success:\n        main_loop.quit()\n    else:\n        main_loop.fail(\n            error.LsrNetworkNmError(",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm.connection:[105:114]\n==module_utils.network_lsr.nm.connection:[52:61]\n                    id=nm_profile.get_id(), uuid=nm_profile.get_uuid(), error=e\n                )\n            )\n        )\n    if success:\n        main_loop.quit()\n    else:\n        main_loop.fail(\n            error.LsrNetworkNmError(",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm.active_connection:[88:97]\n==module_utils.network_lsr.nm.active_connection:[98:108]\n        _deactivate_fail(\n            main_loop,\n            handler_id,\n            nm_ac,\n            \"Failed to deactivate connection {id}, error={error}\".format(\n                id=nm_ac_id, error=e\n            ),\n        )\n        return\n",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm.active_connection:[88:97]\n==module_utils.network_lsr.nm.active_connection:[98:108]\n        _deactivate_fail(\n            main_loop,\n            handler_id,\n            nm_ac,\n            \"Failed to deactivate connection {id}, error={error}\".format(\n                id=nm_ac_id, error=e\n            ),\n        )\n        return\n",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm.active_connection:[88:97]\n==module_utils.network_lsr.nm.active_connection:[98:108]\n        _deactivate_fail(\n            main_loop,\n            handler_id,\n            nm_ac,\n            \"Failed to deactivate connection {id}, error={error}\".format(\n                id=nm_ac_id, error=e\n            ),\n        )\n        return\n",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm.active_connection:[88:97]\n==module_utils.network_lsr.nm.active_connection:[98:108]\n        _deactivate_fail(\n            main_loop,\n            handler_id,\n            nm_ac,\n            \"Failed to deactivate connection {id}, error={error}\".format(\n                id=nm_ac_id, error=e\n            ),\n        )\n        return\n",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[223:234]\n==scripts.fix_yaml_parsing:[187:198]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    lines = f.readlines()\n\n                fixed_lines = []\n                changed = False\n",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[223:234]\n==scripts.fix_yaml_parsing:[187:198]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    lines = f.readlines()\n\n                fixed_lines = []\n                changed = False\n",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==lvm_gensym:[5:15]\n==resolve_blockdev:[4:14]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---",
      "message": "duplicate-code: Similar lines in 2 files\n==lvm_gensym:[5:15]\n==resolve_blockdev:[4:14]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blockdev_info:[4:14]\n==bsize:[4:14]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---",
      "message": "duplicate-code: Similar lines in 2 files\n==blockdev_info:[4:14]\n==bsize:[4:14]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[141:151]\n==scripts.fix_ansible_lint_advanced:[259:269]\n                    new_lines.append(line)\n                    i += 1\n\n                new_content = '\\n'.join(new_lines)\n                if new_content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(new_content)\n                    fixed_count += 1\n\n            except Exception as e:",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[141:151]\n==scripts.fix_ansible_lint_advanced:[259:269]\n                    new_lines.append(line)\n                    i += 1\n\n                new_content = '\\n'.join(new_lines)\n                if new_content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(new_content)\n                    fixed_count += 1\n\n            except Exception as e:",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[141:151]\n==scripts.fix_ansible_lint_advanced:[259:269]\n                    new_lines.append(line)\n                    i += 1\n\n                new_content = '\\n'.join(new_lines)\n                if new_content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(new_content)\n                    fixed_count += 1\n\n            except Exception as e:",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[141:151]\n==scripts.fix_ansible_lint_advanced:[259:269]\n                    new_lines.append(line)\n                    i += 1\n\n                new_content = '\\n'.join(new_lines)\n                if new_content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(new_content)\n                    fixed_count += 1\n\n            except Exception as e:",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[21:34]\n==scripts.fix_ansible_lint_advanced:[275:287]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix literal comparisons\n                patterns = [",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[21:34]\n==scripts.fix_ansible_lint_advanced:[275:287]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix literal comparisons\n                patterns = [",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[21:34]\n==scripts.fix_ansible_lint_advanced:[275:287]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix literal comparisons\n                patterns = [",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[21:34]\n==scripts.fix_ansible_lint_advanced:[275:287]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix literal comparisons\n                patterns = [",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[115:131]\n==scripts.fix_ansible_lint_advanced:[271:286]\n        return fixed_count\n\n    def fix_jinja_spacing(self) -> int:\n        \"\"\"Fix Jinja2 template spacing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix common Jinja spacing issues\n                # {{ var|filter }} -> {{ var | filter }}",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[115:131]\n==scripts.fix_ansible_lint_advanced:[271:286]\n        return fixed_count\n\n    def fix_jinja_spacing(self) -> int:\n        \"\"\"Fix Jinja2 template spacing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix common Jinja spacing issues\n                # {{ var|filter }} -> {{ var | filter }}",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[223:234]\n==scripts.fix_yaml_parsing:[187:198]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    lines = f.readlines()\n\n                fixed_lines = []\n                changed = False\n",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[223:234]\n==scripts.fix_yaml_parsing:[187:198]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    lines = f.readlines()\n\n                fixed_lines = []\n                changed = False\n",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[115:131]\n==scripts.fix_ansible_lint_advanced:[204:217]\n        return fixed_count\n\n    def fix_jinja_spacing(self) -> int:\n        \"\"\"Fix Jinja2 template spacing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix common Jinja spacing issues\n                # {{ var|filter }} -> {{ var | filter }}",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[115:131]\n==scripts.fix_ansible_lint_advanced:[204:217]\n        return fixed_count\n\n    def fix_jinja_spacing(self) -> int:\n        \"\"\"Fix Jinja2 template spacing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix common Jinja spacing issues\n                # {{ var|filter }} -> {{ var | filter }}",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[3:13]\n==resolve_blockdev:[4:14]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[3:13]\n==resolve_blockdev:[4:14]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==bsize:[4:14]\n==lvm_gensym:[5:15]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---",
      "message": "duplicate-code: Similar lines in 2 files\n==bsize:[4:14]\n==lvm_gensym:[5:15]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[151:159]\n==blivet:[86:94]\n            state:\n                description: state\n                type: str\n                default: present\n                choices: ['present', 'absent']\n            type:\n                description: type\n                type: str",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[151:159]\n==blivet:[86:94]\n            state:\n                description: state\n                type: str\n                default: present\n                choices: ['present', 'absent']\n            type:\n                description: type\n                type: str",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[151:159]\n==blivet:[86:94]\n                    state:\n                        description: state\n                        type: str\n                        default: present\n                        choices: ['present', 'absent']\n                    type:\n                        description: type\n                        type: str",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[151:159]\n==blivet:[86:94]\n                    state:\n                        description: state\n                        type: str\n                        default: present\n                        choices: ['present', 'absent']\n                    type:\n                        description: type\n                        type: str",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[3:13]\n==blockdev_info:[4:14]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[3:13]\n==blockdev_info:[4:14]\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_yaml_parsing:[100:117]\n==scripts.fix_yaml_parsing:[60:77]\n        return fixed_count\n\n    def fix_jinja_spacing_artifacts(self) -> int:\n        \"\"\"Fix spacing artifacts from previous automated fixes\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various spacing artifacts\n                fixes = [\n                    # Fix excessive spaces around pipes",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_yaml_parsing:[100:117]\n==scripts.fix_yaml_parsing:[60:77]\n        return fixed_count\n\n    def fix_jinja_spacing_artifacts(self) -> int:\n        \"\"\"Fix spacing artifacts from previous automated fixes\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various spacing artifacts\n                fixes = [\n                    # Fix excessive spaces around pipes",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_yaml_parsing:[100:117]\n==scripts.fix_yaml_parsing:[60:77]\n        return fixed_count\n\n    def fix_malformed_jinja_escaping(self) -> int:\n        \"\"\"Fix malformed Jinja template escaping\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various malformed escaping patterns\n                fixes = [\n                    # Fix \\'string\\' -> 'string'",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_yaml_parsing:[100:117]\n==scripts.fix_yaml_parsing:[60:77]\n        return fixed_count\n\n    def fix_malformed_jinja_escaping(self) -> int:\n        \"\"\"Fix malformed Jinja template escaping\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various malformed escaping patterns\n                fixes = [\n                    # Fix \\'string\\' -> 'string'",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[333:343]\n==scripts.fix_yaml_parsing:[347:357]\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[333:343]\n==scripts.fix_yaml_parsing:[347:357]\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[190:199]\n==scripts.fix_ansible_lint_advanced:[41:50]\n                    ]\n\n                    for pattern, replacement in patterns:\n                        content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[190:199]\n==scripts.fix_ansible_lint_advanced:[41:50]\n                    ]\n\n                    for pattern, replacement in patterns:\n                        content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[190:199]\n==scripts.fix_ansible_lint_advanced:[41:50]\n                    ]\n\n                    for pattern, replacement in patterns:\n                        content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[190:199]\n==scripts.fix_ansible_lint_advanced:[41:50]\n                    ]\n\n                    for pattern, replacement in patterns:\n                        content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[208:217]\n==scripts.fix_ansible_lint_advanced:[21:32]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[208:217]\n==scripts.fix_ansible_lint_advanced:[21:32]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[285:295]\n==scripts.fix_yaml_parsing:[347:357]\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[285:295]\n==scripts.fix_yaml_parsing:[347:357]\n        if self.fixes_applied:\n            print(f\"\\n\ud83d\udcdd Applied fixes:\")\n            for fix in self.fixes_applied[:10]:  # Show first 10\n                print(f\"  - {fix}\")\n            if len(self.fixes_applied) > 10:\n                print(f\"  ... and {len(self.fixes_applied) - 10} more\")\n\n        return results\n\ndef main():",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[119:131]\n==scripts.fix_ansible_lint_advanced:[21:32]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix complex Jinja patterns with multiple pipes and spaces",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[119:131]\n==scripts.fix_ansible_lint_advanced:[21:32]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix complex Jinja patterns with multiple pipes and spaces",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[84:92]\n==scripts.generate_enhanced_compatibility_matrix:[249:258]\n        if tasks_dir.exists():\n            for task_file in tasks_dir.glob(\"*.yml\"):\n                try:\n                    with open(task_file, 'r') as f:\n                        content = f.read()\n\n                    # Extract feature name from file\n                    feature_name = task_file.stem\n",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[84:92]\n==scripts.generate_enhanced_compatibility_matrix:[249:258]\n        if tasks_dir.exists():\n            for task_file in tasks_dir.glob(\"*.yml\"):\n                try:\n                    with open(task_file, 'r') as f:\n                        content = f.read()\n\n                    # Extract feature name from file\n                    feature_name = task_file.stem\n",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_enhanced_compatibility_matrix:[128:134]\n==scripts.generate_enhanced_compatibility_matrix:[248:256]\n                    tasks_dir = role_dir / \"tasks\"\n                    if tasks_dir.exists():\n                        for task_file in tasks_dir.glob(\"*.yml\"):\n                            try:\n                                with open(task_file, 'r') as f:\n                                    content = f.read()",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_enhanced_compatibility_matrix:[128:134]\n==scripts.generate_enhanced_compatibility_matrix:[248:256]\n                    tasks_dir = role_dir / \"tasks\"\n                    if tasks_dir.exists():\n                        for task_file in tasks_dir.glob(\"*.yml\"):\n                            try:\n                                with open(task_file, 'r') as f:\n                                    content = f.read()",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[84:92]\n==scripts.generate_enhanced_compatibility_matrix:[249:258]\n        if tasks_dir.exists():\n            for task_file in tasks_dir.glob(\"*.yml\"):\n                try:\n                    with open(task_file, 'r') as f:\n                        content = f.read()\n\n                    # Extract feature names from task file names\n                    feature_name = task_file.stem",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[84:92]\n==scripts.generate_enhanced_compatibility_matrix:[249:258]\n        if tasks_dir.exists():\n            for task_file in tasks_dir.glob(\"*.yml\"):\n                try:\n                    with open(task_file, 'r') as f:\n                        content = f.read()\n\n                    # Extract feature names from task file names\n                    feature_name = task_file.stem",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[31:37]\n==scripts.generate_enhanced_compatibility_matrix:[248:256]\n                tasks_dir = role_dir / \"tasks\"\n                if tasks_dir.exists():\n                    for task_file in tasks_dir.glob(\"*.yml\"):\n                        try:\n                            with open(task_file, 'r') as f:\n                                content = f.read()",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[31:37]\n==scripts.generate_enhanced_compatibility_matrix:[248:256]\n                tasks_dir = role_dir / \"tasks\"\n                if tasks_dir.exists():\n                    for task_file in tasks_dir.glob(\"*.yml\"):\n                        try:\n                            with open(task_file, 'r') as f:\n                                content = f.read()",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_yaml_parsing:[169:178]\n==scripts.fix_yaml_parsing:[86:95]\n                ]\n\n                for pattern, replacement in fixes:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_yaml_parsing:[169:178]\n==scripts.fix_yaml_parsing:[86:95]\n                ]\n\n                for pattern, replacement in fixes:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_yaml_parsing:[169:178]\n==scripts.fix_yaml_parsing:[86:95]\n                ]\n\n                for pattern, replacement in fixes:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_yaml_parsing:[169:178]\n==scripts.fix_yaml_parsing:[86:95]\n                ]\n\n                for pattern, replacement in fixes:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_yaml_parsing:[183:193]\n==scripts.fix_yaml_parsing:[60:70]\n        return fixed_count\n\n    def fix_indentation_issues(self) -> int:\n        \"\"\"Fix common indentation issues that break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_yaml_parsing:[183:193]\n==scripts.fix_yaml_parsing:[60:70]\n        return fixed_count\n\n    def fix_indentation_issues(self) -> int:\n        \"\"\"Fix common indentation issues that break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[192:199]\n==scripts.fix_yaml_parsing:[48:55]\n                for pattern, replacement in patterns:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[192:199]\n==scripts.fix_yaml_parsing:[48:55]\n                for pattern, replacement in patterns:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[43:50]\n==scripts.fix_yaml_parsing:[48:55]\n                for pattern, replacement in patterns:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[43:50]\n==scripts.fix_yaml_parsing:[48:55]\n                for pattern, replacement in patterns:\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[115:125]\n==scripts.fix_yaml_parsing:[183:193]\n        return fixed_count\n\n    def fix_indentation_issues(self) -> int:\n        \"\"\"Fix common indentation issues that break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[115:125]\n==scripts.fix_yaml_parsing:[183:193]\n        return fixed_count\n\n    def fix_indentation_issues(self) -> int:\n        \"\"\"Fix common indentation issues that break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[203:264]\n==blivet:[98:159]\n                elements: dict\n                suboptions:\n                    encryption:\n                        description: encryption\n                        type: bool\n                    encryption_cipher:\n                        description: encryption_cipher\n                        type: str\n                    encryption_key:\n                        description: encryption_key file, not the actual key\n                        type: str\n                    encryption_key_size:\n                        description: encryption_key_size\n                        type: int\n                    encryption_luks_version:\n                        description: encryption_luks_version\n                        type: str\n                    encryption_password:\n                        description: encryption_password\n                        type: str\n                    fs_create_options:\n                        description: fs_create_options\n                        type: str\n                    fs_label:\n                        description: fs_label\n                        type: str\n                    fs_type:\n                        description: fs_type\n                        type: str\n                    mount_options:\n                        description: mount_options\n                        type: str\n                    mount_point:\n                        description: mount_point\n                        type: str\n                    mount_user:\n                        description: mount_user\n                        type: str\n                    mount_group:\n                        description: mount_group\n                        type: str\n                    mount_mode:\n                        description: mount_mode\n                        type: str\n                    name:\n                        description: name\n                        type: str\n                    raid_level:\n                        description: raid_level\n                        type: str\n                    size:\n                        description: size\n                        type: str\n                    state:\n                        description: state\n                        type: str\n                        default: present\n                        choices: ['present', 'absent']\n                    type:\n                        description: type\n                        type: str",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[203:264]\n==blivet:[98:159]\n                elements: dict\n                suboptions:\n                    encryption:\n                        description: encryption\n                        type: bool\n                    encryption_cipher:\n                        description: encryption_cipher\n                        type: str\n                    encryption_key:\n                        description: encryption_key file, not the actual key\n                        type: str\n                    encryption_key_size:\n                        description: encryption_key_size\n                        type: int\n                    encryption_luks_version:\n                        description: encryption_luks_version\n                        type: str\n                    encryption_password:\n                        description: encryption_password\n                        type: str\n                    fs_create_options:\n                        description: fs_create_options\n                        type: str\n                    fs_label:\n                        description: fs_label\n                        type: str\n                    fs_type:\n                        description: fs_type\n                        type: str\n                    mount_options:\n                        description: mount_options\n                        type: str\n                    mount_point:\n                        description: mount_point\n                        type: str\n                    mount_user:\n                        description: mount_user\n                        type: str\n                    mount_group:\n                        description: mount_group\n                        type: str\n                    mount_mode:\n                        description: mount_mode\n                        type: str\n                    name:\n                        description: name\n                        type: str\n                    raid_level:\n                        description: raid_level\n                        type: str\n                    size:\n                        description: size\n                        type: str\n                    state:\n                        description: state\n                        type: str\n                        default: present\n                        choices: ['present', 'absent']\n                    type:\n                        description: type\n                        type: str",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[203:264]\n==blivet:[98:159]\n        elements: dict\n        suboptions:\n            encryption:\n                description: encryption\n                type: bool\n            encryption_cipher:\n                description: encryption_cipher\n                type: str\n            encryption_key:\n                description: encryption_key file, not the actual key\n                type: str\n            encryption_key_size:\n                description: encryption_key_size\n                type: int\n            encryption_luks_version:\n                description: encryption_luks_version\n                type: str\n            encryption_password:\n                description: encryption_password\n                type: str\n            fs_create_options:\n                description: fs_create_options\n                type: str\n            fs_label:\n                description: fs_label\n                type: str\n            fs_type:\n                description: fs_type\n                type: str\n            mount_options:\n                description: mount_options\n                type: str\n            mount_point:\n                description: mount_point\n                type: str\n            mount_user:\n                description: mount_user\n                type: str\n            mount_group:\n                description: mount_group\n                type: str\n            mount_mode:\n                description: mount_mode\n                type: str\n            name:\n                description: name\n                type: str\n            raid_level:\n                description: raid_level\n                type: str\n            size:\n                description: size\n                type: str\n            state:\n                description: state\n                type: str\n                default: present\n                choices: ['present', 'absent']\n            type:\n                description: type\n                type: str",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[203:264]\n==blivet:[98:159]\n        elements: dict\n        suboptions:\n            encryption:\n                description: encryption\n                type: bool\n            encryption_cipher:\n                description: encryption_cipher\n                type: str\n            encryption_key:\n                description: encryption_key file, not the actual key\n                type: str\n            encryption_key_size:\n                description: encryption_key_size\n                type: int\n            encryption_luks_version:\n                description: encryption_luks_version\n                type: str\n            encryption_password:\n                description: encryption_password\n                type: str\n            fs_create_options:\n                description: fs_create_options\n                type: str\n            fs_label:\n                description: fs_label\n                type: str\n            fs_type:\n                description: fs_type\n                type: str\n            mount_options:\n                description: mount_options\n                type: str\n            mount_point:\n                description: mount_point\n                type: str\n            mount_user:\n                description: mount_user\n                type: str\n            mount_group:\n                description: mount_group\n                type: str\n            mount_mode:\n                description: mount_mode\n                type: str\n            name:\n                description: name\n                type: str\n            raid_level:\n                description: raid_level\n                type: str\n            size:\n                description: size\n                type: str\n            state:\n                description: state\n                type: str\n                default: present\n                choices: ['present', 'absent']\n            type:\n                description: type\n                type: str",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[142:148]\n==blivet:[65:71]\n            name:\n                description: name\n                type: str\n            raid_level:\n                description: raid_level\n                type: str",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[142:148]\n==blivet:[65:71]\n            name:\n                description: name\n                type: str\n            raid_level:\n                description: raid_level\n                type: str",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[142:148]\n==blivet:[65:71]\n            name:\n                description: name\n                type: str\n            raid_level:\n                description: raid_level\n                type: str",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[142:148]\n==blivet:[65:71]\n            name:\n                description: name\n                type: str\n            raid_level:\n                description: raid_level\n                type: str",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[650:656]\n==module_utils.network_lsr.argument_validator:[714:721]\n        prefix = result[\"prefix\"]\n        if prefix is None:\n            prefix = Util.addr_family_default_prefix(family)\n            result[\"prefix\"] = prefix\n        elif not Util.addr_family_valid_prefix(family, prefix):\n            raise ValidationError(name, \"invalid prefix %s in '%s'\" % (prefix, value))\n",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[650:656]\n==module_utils.network_lsr.argument_validator:[714:721]\n        prefix = result[\"prefix\"]\n        if prefix is None:\n            prefix = Util.addr_family_default_prefix(family)\n            result[\"prefix\"] = prefix\n        elif not Util.addr_family_valid_prefix(family, prefix):\n            raise ValidationError(name, \"invalid prefix %s in '%s'\" % (prefix, value))\n",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[650:656]\n==module_utils.network_lsr.argument_validator:[714:721]\n        prefix = result[\"prefix\"]\n        if prefix is None:\n            prefix = Util.addr_family_default_prefix(family)\n            result[\"prefix\"] = prefix\n        elif not Util.addr_family_valid_prefix(family, prefix):\n            raise ValidationError(name, \"invalid prefix %s in '%s'\" % (prefix, value))\n",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[650:656]\n==module_utils.network_lsr.argument_validator:[714:721]\n        prefix = result[\"prefix\"]\n        if prefix is None:\n            prefix = Util.addr_family_default_prefix(family)\n            result[\"prefix\"] = prefix\n        elif not Util.addr_family_valid_prefix(family, prefix):\n            raise ValidationError(name, \"invalid prefix %s in '%s'\" % (prefix, value))\n",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[614:620]\n==module_utils.network_lsr.argument_validator:[661:667]\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[\n                ArgValidatorIP(",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[614:620]\n==module_utils.network_lsr.argument_validator:[661:667]\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[\n                ArgValidatorIP(",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[614:620]\n==module_utils.network_lsr.argument_validator:[661:667]\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[\n                ArgValidatorIP(",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[614:620]\n==module_utils.network_lsr.argument_validator:[661:667]\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[\n                ArgValidatorIP(",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[596:602]\n==module_utils.network_lsr.argument_validator:[603:609]\n            enum_ex = \"\"\n            if self.enum_values_mac is not None:\n                enum_ex = \" nor one of %s\" % (self.enum_values_mac)\n            raise ValidationError(\n                name, \"value '%s' is not a valid MAC address%s\" % (value, enum_ex)\n            )",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[596:602]\n==module_utils.network_lsr.argument_validator:[603:609]\n            enum_ex = \"\"\n            if self.enum_values_mac is not None:\n                enum_ex = \" nor one of %s\" % (self.enum_values_mac)\n            raise ValidationError(\n                name, \"value '%s' is not a valid MAC address%s\" % (value, enum_ex)\n            )",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[596:602]\n==module_utils.network_lsr.argument_validator:[603:609]\n            enum_ex = \"\"\n            if self.enum_values_mac is not None:\n                enum_ex = \" nor one of %s\" % (self.enum_values_mac)\n            raise ValidationError(\n                name, \"value '%s' is not a valid MAC address%s\" % (value, enum_ex)\n            )",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[596:602]\n==module_utils.network_lsr.argument_validator:[603:609]\n            enum_ex = \"\"\n            if self.enum_values_mac is not None:\n                enum_ex = \" nor one of %s\" % (self.enum_values_mac)\n            raise ValidationError(\n                name, \"value '%s' is not a valid MAC address%s\" % (value, enum_ex)\n            )",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[134:140]\n==scripts.generate_enhanced_compatibility_matrix:[343:349]\n        for role_dir in self.roles_dir.iterdir():\n            if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                role_name = role_dir.name\n                print(f\"Analyzing role: {role_name}\")\n\n                role_features = self.analyze_role_features(role_name)",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[134:140]\n==scripts.generate_enhanced_compatibility_matrix:[343:349]\n        for role_dir in self.roles_dir.iterdir():\n            if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                role_name = role_dir.name\n                print(f\"Analyzing role: {role_name}\")\n\n                role_features = self.analyze_role_features(role_name)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[271:286]\n==scripts.fix_yaml_parsing:[60:75]\n        return fixed_count\n\n    def fix_malformed_jinja_escaping(self) -> int:\n        \"\"\"Fix malformed Jinja template escaping\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various malformed escaping patterns",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[271:286]\n==scripts.fix_yaml_parsing:[60:75]\n        return fixed_count\n\n    def fix_malformed_jinja_escaping(self) -> int:\n        \"\"\"Fix malformed Jinja template escaping\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various malformed escaping patterns",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[248:254]\n==scripts.fix_yaml_parsing:[220:226]\n                    fixed_lines.append(line)\n\n                if changed:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.writelines(fixed_lines)\n                    fixed_count += 1",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[248:254]\n==scripts.fix_yaml_parsing:[220:226]\n                    fixed_lines.append(line)\n\n                if changed:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.writelines(fixed_lines)\n                    fixed_count += 1",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[122:131]\n==scripts.fix_yaml_parsing:[41:48]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix common Jinja spacing issues\n                # {{ var|filter }} -> {{ var | filter }}",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[122:131]\n==scripts.fix_yaml_parsing:[41:48]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix common Jinja spacing issues\n                # {{ var|filter }} -> {{ var | filter }}",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[296:303]\n==scripts.fix_ansible_lint_advanced:[344:351]\n    results = fixer.run_all_fixes()\n\n    print(f\"\\n\ud83d\udd0d Run 'ansible-lint roles/' again to see remaining issues\")\n    return 0 if sum(results.values()) > 0 else 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[296:303]\n==scripts.fix_ansible_lint_advanced:[344:351]\n    results = fixer.run_all_fixes()\n\n    print(f\"\\n\ud83d\udd0d Run 'ansible-lint roles/' again to see remaining issues\")\n    return 0 if sum(results.values()) > 0 else 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_enhanced_compatibility_matrix:[105:110]\n==scripts.generate_enhanced_compatibility_matrix:[223:228]\n                    molecule_yml = scenario_dir / \"molecule.yml\"\n                    if molecule_yml.exists():\n                        try:\n                            with open(molecule_yml, 'r') as f:\n                                molecule_config = yaml.safe_load(f)",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_enhanced_compatibility_matrix:[105:110]\n==scripts.generate_enhanced_compatibility_matrix:[223:228]\n                    molecule_yml = scenario_dir / \"molecule.yml\"\n                    if molecule_yml.exists():\n                        try:\n                            with open(molecule_yml, 'r') as f:\n                                molecule_config = yaml.safe_load(f)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_enhanced_compatibility_matrix:[105:110]\n==scripts.generate_enhanced_compatibility_matrix:[223:228]\n                    molecule_yml = scenario_dir / \"molecule.yml\"\n                    if molecule_yml.exists():\n                        try:\n                            with open(molecule_yml, 'r') as f:\n                                molecule_config = yaml.safe_load(f)",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_enhanced_compatibility_matrix:[105:110]\n==scripts.generate_enhanced_compatibility_matrix:[223:228]\n                    molecule_yml = scenario_dir / \"molecule.yml\"\n                    if molecule_yml.exists():\n                        try:\n                            with open(molecule_yml, 'r') as f:\n                                molecule_config = yaml.safe_load(f)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[32:37]\n==scripts.generate_compatibility_matrix:[84:91]\n        if tasks_dir.exists():\n            for task_file in tasks_dir.glob(\"*.yml\"):\n                try:\n                    with open(task_file, 'r') as f:\n                        content = f.read()\n\n                    # Extract feature names from task file names",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[32:37]\n==scripts.generate_compatibility_matrix:[84:91]\n        if tasks_dir.exists():\n            for task_file in tasks_dir.glob(\"*.yml\"):\n                try:\n                    with open(task_file, 'r') as f:\n                        content = f.read()\n\n                    # Extract feature names from task file names",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[134:140]\n==scripts.generate_enhanced_compatibility_matrix:[343:349]\n        for role_dir in self.roles_dir.iterdir():\n            if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                role_name = role_dir.name\n                print(f\"Analyzing role: {role_name}\")\n\n                role_features = self.analyze_role_features(role_name)",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[134:140]\n==scripts.generate_enhanced_compatibility_matrix:[343:349]\n        for role_dir in self.roles_dir.iterdir():\n            if role_dir.is_dir() and role_dir.name.startswith(\"kvmhost_\"):\n                role_name = role_dir.name\n                print(f\"Analyzing role: {role_name}\")\n\n                role_features = self.analyze_role_features(role_name)",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[84:91]\n==scripts.generate_enhanced_compatibility_matrix:[129:134]\n        if tasks_dir.exists():\n            for task_file in tasks_dir.glob(\"*.yml\"):\n                try:\n                    with open(task_file, 'r') as f:\n                        content = f.read()\n\n                    # Extract feature names from task file names",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.generate_compatibility_matrix:[84:91]\n==scripts.generate_enhanced_compatibility_matrix:[129:134]\n        if tasks_dir.exists():\n            for task_file in tasks_dir.glob(\"*.yml\"):\n                try:\n                    with open(task_file, 'r') as f:\n                        content = f.read()\n\n                    # Extract feature names from task file names",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_yaml_parsing:[172:178]\n==scripts.fix_yaml_parsing:[49:55]\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_yaml_parsing:[172:178]\n==scripts.fix_yaml_parsing:[49:55]\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_escape_chars:[17:26]\n==scripts.fix_yaml_parsing:[154:162]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix mixed quotes in YAML values",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_escape_chars:[17:26]\n==scripts.fix_yaml_parsing:[154:162]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix mixed quotes in YAML values",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[204:217]\n==scripts.fix_yaml_parsing:[147:162]\n        return fixed_count\n\n    def fix_quote_inconsistencies(self) -> int:\n        \"\"\"Fix quote inconsistencies that can cause YAML parsing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix mixed quotes in YAML values",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[204:217]\n==scripts.fix_yaml_parsing:[147:162]\n        return fixed_count\n\n    def fix_quote_inconsistencies(self) -> int:\n        \"\"\"Fix quote inconsistencies that can cause YAML parsing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix mixed quotes in YAML values",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[178:185]\n==scripts.fix_yaml_parsing:[107:115]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various spacing artifacts",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[178:185]\n==scripts.fix_yaml_parsing:[107:115]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various spacing artifacts",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[77:83]\n==scripts.fix_yaml_parsing:[67:75]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various malformed escaping patterns",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[77:83]\n==scripts.fix_yaml_parsing:[67:75]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various malformed escaping patterns",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[21:27]\n==scripts.fix_yaml_parsing:[187:193]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[21:27]\n==scripts.fix_yaml_parsing:[187:193]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[326:333]\n==scripts.fix_yaml_parsing:[329:335]\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")\n",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[326:333]\n==scripts.fix_yaml_parsing:[329:335]\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")\n",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[271:281]\n==scripts.fix_yaml_parsing:[183:193]\n        return fixed_count\n\n    def fix_indentation_issues(self) -> int:\n        \"\"\"Fix common indentation issues that break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[271:281]\n==scripts.fix_yaml_parsing:[183:193]\n        return fixed_count\n\n    def fix_indentation_issues(self) -> int:\n        \"\"\"Fix common indentation issues that break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[204:213]\n==scripts.fix_yaml_parsing:[231:241]\n        return fixed_count\n\n    def fix_unicode_and_encoding_issues(self) -> int:\n        \"\"\"Fix unicode and encoding issues that can break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                # Try to read with different encodings",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[204:213]\n==scripts.fix_yaml_parsing:[231:241]\n        return fixed_count\n\n    def fix_unicode_and_encoding_issues(self) -> int:\n        \"\"\"Fix unicode and encoding issues that can break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                # Try to read with different encodings",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[298:304]\n==scripts.fix_yaml_parsing:[89:95]\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[298:304]\n==scripts.fix_yaml_parsing:[89:95]\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[161:168]\n==scripts.fix_ansible_lint_advanced:[278:286]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix literal comparisons",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[161:168]\n==scripts.fix_ansible_lint_advanced:[278:286]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix literal comparisons",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[271:286]\n==scripts.fix_yaml_parsing:[100:115]\n        return fixed_count\n\n    def fix_jinja_spacing_artifacts(self) -> int:\n        \"\"\"Fix spacing artifacts from previous automated fixes\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various spacing artifacts",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[271:286]\n==scripts.fix_yaml_parsing:[100:115]\n        return fixed_count\n\n    def fix_jinja_spacing_artifacts(self) -> int:\n        \"\"\"Fix spacing artifacts from previous automated fixes\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various spacing artifacts",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[204:214]\n==scripts.fix_yaml_parsing:[183:193]\n        return fixed_count\n\n    def fix_indentation_issues(self) -> int:\n        \"\"\"Fix common indentation issues that break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[204:214]\n==scripts.fix_yaml_parsing:[183:193]\n        return fixed_count\n\n    def fix_indentation_issues(self) -> int:\n        \"\"\"Fix common indentation issues that break YAML parsing\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[204:217]\n==scripts.fix_yaml_parsing:[60:75]\n        return fixed_count\n\n    def fix_malformed_jinja_escaping(self) -> int:\n        \"\"\"Fix malformed Jinja template escaping\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various malformed escaping patterns",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[204:217]\n==scripts.fix_yaml_parsing:[60:75]\n        return fixed_count\n\n    def fix_malformed_jinja_escaping(self) -> int:\n        \"\"\"Fix malformed Jinja template escaping\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix various malformed escaping patterns",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[193:199]\n==scripts.fix_yaml_parsing:[172:178]\n                        content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[193:199]\n==scripts.fix_yaml_parsing:[172:178]\n                        content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[44:50]\n==scripts.fix_yaml_parsing:[89:95]\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[44:50]\n==scripts.fix_yaml_parsing:[89:95]\n                    content = re.sub(pattern, replacement, content)\n\n                if content != original_content:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.write(content)\n                    fixed_count += 1",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[211:217]\n==scripts.fix_yaml_parsing:[41:48]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[211:217]\n==scripts.fix_yaml_parsing:[41:48]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[178:185]\n==scripts.fix_escape_chars:[17:26]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint_advanced:[178:185]\n==scripts.fix_escape_chars:[17:26]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[119:125]\n==scripts.fix_ansible_lint:[223:229]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[119:125]\n==scripts.fix_ansible_lint:[223:229]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[278:285]\n==scripts.fix_yaml_parsing:[329:335]\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[278:285]\n==scripts.fix_yaml_parsing:[329:335]\n        print(f\"\ud83d\udcca Summary:\")\n        for fix_type, count in results.items():\n            if count > 0:\n                print(f\"  - {fix_type.replace('_', ' ').title()}: {count} files\")\n\n        print(f\"\\n\ud83c\udfaf Total files fixed: {total_fixes}\")",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[248:254]\n==scripts.fix_yaml_parsing:[220:226]\n                    fixed_lines.append(line)\n\n                if changed:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.writelines(fixed_lines)\n                    fixed_count += 1",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[248:254]\n==scripts.fix_yaml_parsing:[220:226]\n                    fixed_lines.append(line)\n\n                if changed:\n                    with open(file_path, 'w', encoding='utf-8') as f:\n                        f.writelines(fixed_lines)\n                    fixed_count += 1",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[115:124]\n==scripts.fix_yaml_parsing:[231:241]\n        return fixed_count\n\n    def fix_jinja_spacing(self) -> int:\n        \"\"\"Fix Jinja2 template spacing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[115:124]\n==scripts.fix_yaml_parsing:[231:241]\n        return fixed_count\n\n    def fix_jinja_spacing(self) -> int:\n        \"\"\"Fix Jinja2 template spacing issues\"\"\"\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[296:303]\n==scripts.fix_ansible_lint_advanced:[344:351]\n    results = fixer.run_all_fixes()\n\n    print(f\"\\n\ud83d\udd0d Run 'ansible-lint roles/' again to see remaining issues\")\n    return 0 if sum(results.values()) > 0 else 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[296:303]\n==scripts.fix_ansible_lint_advanced:[344:351]\n    results = fixer.run_all_fixes()\n\n    print(f\"\\n\ud83d\udd0d Run 'ansible-lint roles/' again to see remaining issues\")\n    return 0 if sum(results.values()) > 0 else 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[161:168]\n==scripts.fix_ansible_lint_advanced:[24:32]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix complex Jinja patterns with multiple pipes and spaces",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[161:168]\n==scripts.fix_ansible_lint_advanced:[24:32]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix complex Jinja patterns with multiple pipes and spaces",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[122:131]\n==scripts.fix_ansible_lint_advanced:[77:83]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix common Jinja spacing issues\n                # {{ var|filter }} -> {{ var | filter }}",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[122:131]\n==scripts.fix_ansible_lint_advanced:[77:83]\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n\n                original_content = content\n\n                # Fix common Jinja spacing issues\n                # {{ var|filter }} -> {{ var | filter }}",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==scripts.fix_ansible_lint:[223:229]\n==scripts.fix_ansible_lint_advanced:[21:27]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "message": "duplicate-code: Similar lines in 2 files\n==scripts.fix_ansible_lint:[223:229]\n==scripts.fix_ansible_lint_advanced:[21:27]\n        fixed_count = 0\n        yaml_files = list(self.base_path.glob(\"roles/**/*.yml\"))\n\n        for file_path in yaml_files:\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[264:269]\n==blivet:[30:35]\n            disks:\n                description: disks\n                type: list\n                default: []\n                elements: str",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[264:269]\n==blivet:[30:35]\n            disks:\n                description: disks\n                type: list\n                default: []\n                elements: str",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==blivet:[264:269]\n==blivet:[30:35]\n            disks:\n                description: disks\n                type: list\n                default: []\n                elements: str",
      "message": "duplicate-code: Similar lines in 2 files\n==blivet:[264:269]\n==blivet:[30:35]\n            disks:\n                description: disks\n                type: list\n                default: []\n                elements: str",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm.active_connection:[47:55]\n==module_utils.network_lsr.nm.connection:[90:99]\n        main_loop.run()\n    return True\n\n\ndef _nm_profile_volatile_update2_call_back(nm_profile, result, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm.active_connection:[47:55]\n==module_utils.network_lsr.nm.connection:[90:99]\n        main_loop.run()\n    return True\n\n\ndef _nm_profile_volatile_update2_call_back(nm_profile, result, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.nm.active_connection:[47:55]\n==module_utils.network_lsr.nm.connection:[37:46]\n        main_loop.run()\n    return True\n\n\ndef _nm_profile_delete_call_back(nm_profile, result, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.nm.active_connection:[47:55]\n==module_utils.network_lsr.nm.connection:[37:46]\n        main_loop.run()\n    return True\n\n\ndef _nm_profile_delete_call_back(nm_profile, result, user_data):\n    main_loop = user_data\n    if main_loop.is_cancelled:\n        return\n",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[614:619]\n==module_utils.network_lsr.argument_validator:[736:741]\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[614:619]\n==module_utils.network_lsr.argument_validator:[736:741]\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    },
    {
      "tool_name": "pylint",
      "category": "quality",
      "severity": "minor",
      "title": "Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[614:619]\n==module_utils.network_lsr.argument_validator:[736:741]\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[",
      "message": "duplicate-code: Similar lines in 2 files\n==module_utils.network_lsr.argument_validator:[614:619]\n==module_utils.network_lsr.argument_validator:[736:741]\n        ArgValidatorDict.__init__(\n            self,\n            name,\n            required,\n            nested=[",
      "file_path": "scripts/validate_container_compatibility.py",
      "line_number": 1,
      "column_number": 0,
      "rule_id": "R0801",
      "code_snippet": null,
      "raw_output": null,
      "metadata": {
        "pylint_type": "refactor",
        "pylint_symbol": "duplicate-code",
        "pylint_message_id": "R0801"
      }
    }
  ],
  "metadata": {
    "return_code": 30,
    "command": "/home/vpcuser/releasepilot/venv/bin/pylint --output-format=json --reports=n /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/__init__.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/__init__.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/myerror.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/__init__.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/error.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm_provider.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/scripts/print_all_options.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/__init__.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/size.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/_version.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/collections/ansible_collections/tosin2013/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/__init__.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_connections.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/library/network_state.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/__init__.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/argument_validator.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/ethtool.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/myerror.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/__init__.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/active_connection.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/client.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/connection.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/error.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm/provider.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/nm_provider.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/module_utils/network_lsr/utils.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.network/scripts/print_all_options.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blivet.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/blockdev_info.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/bsize.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/find_unused_disk.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/lvm_gensym.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/library/resolve_blockdev.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/__init__.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/argument_validator.py /home/vpcuser/qubinode_kvmhost_setup_collection/.ansible/roles/linux-system-roles.storage/module_utils/storage_lsr/size.py /home/vpcuser/qubinode_kvmhost_setup_collection/_version.py /home/vpcuser/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint.py /home/vpcuser/qubinode_kvmhost_setup_collection/scripts/fix_ansible_lint_advanced.py /home/vpcuser/qubinode_kvmhost_setup_collection/scripts/fix_escape_chars.py /home/vpcuser/qubinode_kvmhost_setup_collection/scripts/fix_yaml_parsing.py /home/vpcuser/qubinode_kvmhost_setup_collection/scripts/generate_compatibility_matrix.py /home/vpcuser/qubinode_kvmhost_setup_collection/scripts/generate_enhanced_compatibility_matrix.py /home/vpcuser/qubinode_kvmhost_setup_collection/scripts/validate_container_compatibility.py"
  }
}