# Bridge Configuration using NetworkManager
# Based on existing automated_bridge_config.yml

- name: "Check if bridge already exists"
  ansible.builtin.command: "nmcli connection show {{ qubinode_bridge_name }}"
  register: bridge_exists_check
  failed_when: false
  changed_when: false

- name: "Set bridge existence fact"
  ansible.builtin.set_fact:
    bridge_already_exists: "{{ bridge_exists_check.rc == 0 }}"

- name: "Display bridge status"
  ansible.builtin.debug:
    msg: |
      Bridge Configuration Status:
      - Primary Interface: {{ primary_interface }}
      - Bridge Name: {{ qubinode_bridge_name }}
      - Bridge Exists: {{ bridge_already_exists }}
      - Primary IP: {{ primary_ip | default('N/A') }}
      - Gateway: {{ primary_gateway | default('N/A') }}

- name: "Backup current network configuration"
  ansible.builtin.command: "nmcli connection show --active"
  register: network_backup
  changed_when: false
  when:
    - not bridge_already_exists
    - backup_existing_config

- name: "Save network backup to file"
  ansible.builtin.copy:
    content: |
      # Network configuration backup - {{ ansible_date_time.iso8601 }}
      # Host: {{ inventory_hostname }}

      {{ network_backup.stdout }}
    dest: "/tmp/network_backup_{{ ansible_date_time.epoch }}.txt"
    mode: "0644"
  when:
    - not bridge_already_exists
    - backup_existing_config
  become: true

- name: "Get current connection details for primary interface"
  ansible.builtin.shell: |
    nmcli -t -f connection.id,connection.uuid,ipv4.method,ipv4.addresses,ipv4.gateway,ipv4.dns \
    connection show "$(nmcli -t -f device,connection device | grep '^{{ primary_interface }}:' | cut -d: -f2)"
  register: current_connection_details
  changed_when: false
  when: not bridge_already_exists

- name: "Parse current network configuration"
  ansible.builtin.set_fact:
    current_connection_uuid: "{{ current_connection_details.stdout | regex_search('connection.uuid:([^\\n]+)', '\\1') | first
      | default('') }}"
    current_ipv4_method: "{{ current_connection_details.stdout | regex_search('ipv4.method:([^\\n]+)', '\\1') | first | default('auto')
      }}"
    current_ipv4_addresses: "{{ current_connection_details.stdout | regex_search('ipv4.addresses:([^\\n]+)', '\\1') | first
      | default('') }}"
    current_ipv4_gateway: "{{ current_connection_details.stdout | regex_search('ipv4.gateway:([^\\n]+)', '\\1') | first |
      default('') }}"
    current_ipv4_dns: "{{ current_connection_details.stdout | regex_search('ipv4.dns:([^\\n]+)', '\\1') | first | default('')
      }}"
  when: not bridge_already_exists

- name: "Create bridge connection"
  ansible.builtin.command: >
    nmcli connection add
    type bridge
    con-name {{ qubinode_bridge_name }}
    ifname {{ qubinode_bridge_name }}
    autoconnect yes
    save yes
  register: bridge_creation
  when: not bridge_already_exists
  become: true

- name: "Configure bridge settings"
  ansible.builtin.command: >
    nmcli connection modify {{ qubinode_bridge_name }}
    bridge.stp {{ bridge_interface_settings.stp | lower }}
    bridge.forward-delay {{ bridge_interface_settings.forward_delay }}
    bridge.hello-time {{ bridge_interface_settings.hello_time }}
    bridge.max-age {{ bridge_interface_settings.max_age }}
    bridge.priority {{ bridge_interface_settings.priority }}
  when: not bridge_already_exists
  become: true

- name: "Configure bridge IP settings based on current interface"
  ansible.builtin.command: >
    nmcli connection modify {{ qubinode_bridge_name }}
    ipv4.method {{ current_ipv4_method | default('auto') }}
    {% if current_ipv4_addresses %}ipv4.addresses {{ current_ipv4_addresses }}{% endif %}
    {% if current_ipv4_gateway %}ipv4.gateway {{ current_ipv4_gateway }}{% endif %}
    {% if current_ipv4_dns %}ipv4.dns {{ current_ipv4_dns }}{% endif %}
  when:
    - not bridge_already_exists
    - current_ipv4_method != 'auto'
  become: true

- name: "Add primary interface as bridge slave"
  ansible.builtin.command: >
    nmcli connection add
    type bridge-slave
    con-name {{ primary_interface }}-bridge-slave
    ifname {{ primary_interface }}
    master {{ qubinode_bridge_name }}
    autoconnect yes
    save yes
  when: not bridge_already_exists
  become: true

- name: "Bring up the bridge connection"
  ansible.builtin.command: "nmcli connection up {{ qubinode_bridge_name }}"
  when: not bridge_already_exists
  become: true

- name: "Wait for bridge to be active"
  ansible.builtin.wait_for:
    timeout: "{{ bridge_network_config.dhcp_timeout }}"
  when: not bridge_already_exists

- name: "Verify bridge is active"
  ansible.builtin.command: "nmcli connection show --active {{ qubinode_bridge_name }}"
  register: bridge_active_check
  changed_when: false
  when: not bridge_already_exists
