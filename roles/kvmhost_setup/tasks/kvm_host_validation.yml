# KVM Host Validation Checks
# Based on ADR-0003: KVM Virtualization Platform Selection

- name: KVM host hardware validation
  tags:
    - kvm_validation
    - hardware_check

  block:
    - name: Check CPU supports virtualization
      ansible.builtin.shell: |
        if egrep -c '(vmx|svm)' /proc/cpuinfo > /dev/null; then
          echo "supported"
        else
          echo "not_supported"
        fi
      register: cpu_virt_support
      changed_when: false

    - name: Assert CPU virtualization support
      ansible.builtin.assert:
        that:
          - cpu_virt_support.stdout == "supported"
        fail_msg: CPU does not support virtualization extensions (Intel VT-x or AMD-V)
        success_msg: CPU virtualization support confirmed

    - name: Check if KVM module is available
      ansible.builtin.shell: |
        if lsmod | grep -q kvm; then
          echo "loaded"
        elif modinfo kvm > /dev/null 2>&1; then
          echo "available"
        else
          echo "not_available"
        fi
      register: kvm_module_status
      changed_when: false

    - name: Load KVM modules if available but not loaded
      community.general.community.general.modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - kvm
        - kvm_intel # Will fail silently on AMD
        - kvm_amd # Will fail silently on Intel
      ignore_errors: true
      become: true
      when: kvm_module_status.stdout in ["available", "loaded"]

    - name: Verify KVM device availability
      ansible.builtin.stat:
        path: /dev/kvm
      register: kvm_device

    - name: Assert KVM device is available
      ansible.builtin.assert:
        that:
          - kvm_device.stat.exists
        fail_msg: /dev/kvm device not found. KVM may not be properly loaded or supported
        success_msg: KVM device /dev/kvm is available

- name: KVM software validation
  tags:
    - kvm_validation
    - software_check

  block:
    - name: Check libvirt installation and version
      ansible.builtin.shell: |
        if command -v virsh > /dev/null 2>&1; then
          virsh version | head -1 | awk '{print $3}'
        else
          echo "not_installed"
        fi
      register: libvirt_version
      changed_when: false

    - name: Check QEMU/KVM installation
      ansible.builtin.shell: |
        if command -v qemu-system-x86_64 > /dev/null 2>&1; then
          qemu-system-x86_64 --version | head -1 | awk '{print $4}'
        else
          echo "not_installed"
        fi
      register: qemu_version
      changed_when: false

    - name: Display KVM software versions
      ansible.builtin.debug:
        msg: |
          KVM Software Status:
          - libvirt version: {{ libvirt_version.stdout }}
          - QEMU version: {{ qemu_version.stdout }}

- name: KVM service validation
  tags:
    - kvm_validation
    - service_check

  block:
    - name: Check libvirtd service status
      ansible.builtin.systemd:
        name: libvirtd
      register: libvirtd_status
      ignore_errors: true

    - name: Check if libvirtd is running
      ansible.builtin.command: systemctl is-active libvirtd
      register: libvirtd_active
      changed_when: false
      failed_when: false

    - name: Start libvirtd if not running
      ansible.builtin.systemd:
        name: libvirtd
        state: started
        enabled: true
      become: true
      when:
        - libvirtd_active.stdout != "active"
        - libvirtd_status is not failed

    - name: Verify libvirt connectivity
      ansible.builtin.command: virsh list --all
      register: virsh_connectivity
      changed_when: false

    - name: Display current VMs
      ansible.builtin.debug:
        msg: |
          libvirt connectivity test successful.
          Current VMs:
          {{ virsh_connectivity.stdout }}

- name: KVM network validation
  tags:
    - kvm_validation
    - network_check

  block:
    - name: Check default libvirt network
      ansible.builtin.command: virsh net-list --all
      register: libvirt_networks
      changed_when: false

    - name: Check if default network exists
      ansible.builtin.command: virsh net-info default
      register: default_net_info
      changed_when: false
      failed_when: false

    - name: Create default network if it doesn't exist
      ansible.builtin.shell: |
        virsh net-define /dev/stdin <<EOF
        <network>
          <name>default</name>
          <uuid>$(uuidgen)</uuid>
          <forward mode='nat'/>
          <bridge name='virbr0' stp='on' delay='0'/>
          <mac address='52:54:00:12:34:56'/>
          <ip address='192.168.122.1' netmask='255.255.255.0'>
            <dhcp>
              <range start='192.168.122.2' end='192.168.122.254'/>
            </dhcp>
          </ip>
        </network>
        EOF
      when: default_net_info.rc != 0
      become: true

    - name: Start and autostart default network
      ansible.builtin.shell: |
        virsh net-start default
        virsh net-autostart default
      when: default_net_info.rc != 0
      become: true
      ignore_errors: true

    - name: Display libvirt networks
      ansible.builtin.debug:
        msg: |
          libvirt Networks:
          {{ libvirt_networks.stdout }}

- name: KVM storage validation
  tags:
    - kvm_validation
    - storage_check

  block:
    - name: Check default storage pool
      ansible.builtin.command: virsh pool-list --all
      register: libvirt_pools
      changed_when: false

    - name: Check if default pool exists
      ansible.builtin.command: virsh pool-info default
      register: default_pool_info
      changed_when: false
      failed_when: false

    - name: Create default storage pool if it doesn't exist
      ansible.builtin.shell: |
        virsh pool-define-as default dir --target /var/lib/libvirt/images
        virsh pool-build default
        virsh pool-start default
        virsh pool-autostart default
      when: default_pool_info.rc != 0
      become: true
      ignore_errors: true

    - name: Verify storage pool directory
      ansible.builtin.file:
        path: /var/lib/libvirt/images
        state: directory
        mode: "0711"
        owner: root
        group: root
      become: true

    - name: Display libvirt storage pools
      ansible.builtin.debug:
        msg: |
          libvirt Storage Pools:
          {{ libvirt_pools.stdout }}

- name: KVM performance validation
  tags:
    - kvm_validation
    - performance_check

  block:
    - name: Check available memory for VMs
      ansible.builtin.shell: |
        total_mem=$(free -m | awk '/^Mem:/{print $2}')
        used_mem=$(free -m | awk '/^Mem:/{print $3}')
        available_mem=$((total_mem - used_mem))
        echo "Total: ${total_mem}MB, Used: ${used_mem}MB, Available: ${available_mem}MB"
      register: memory_status
      changed_when: false

    - name: Check CPU information
      ansible.builtin.shell: |
        echo "CPU Model: $(cat /proc/cpuinfo | grep 'model name' | head -1 | cut -d':' -f2 | xargs)"
        echo "CPU Cores: $(nproc)"
        echo "CPU Threads: $(cat /proc/cpuinfo | grep processor | wc -l)"
      register: cpu_info
      changed_when: false

    - name: Display performance information
      ansible.builtin.debug:
        msg: |
          KVM Host Performance Summary:
          Memory: {{ memory_status.stdout }}
          {{ cpu_info.stdout }}

          Recommendations:
          - Reserve at least 2GB RAM for host OS
          - Ensure CPU supports virtualization extensions
          - Consider CPU pinning for production workloads

- name: KVM validation summary
  ansible.builtin.debug:
    msg: |
      KVM Host Validation Summary:
      ✓ CPU virtualization support: {{ cpu_virt_support.stdout }}
      ✓ KVM device: {{ '/dev/kvm available' if kvm_device.stat.exists else 'Not available' }}
      ✓ libvirt version: {{ libvirt_version.stdout }}
      ✓ QEMU version: {{ qemu_version.stdout }}
      ✓ libvirtd ansible.builtin.service: {{ libvirtd_active.stdout           | default('checking...)   }}

      KVM host validation completed successfully!
      System is ready for virtual machine deployment.
  tags:
    - kvm_validation
    - summary
