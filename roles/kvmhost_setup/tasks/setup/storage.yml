- name: Ensure libvirt storage directory exists
  ansible.builtin.ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: "0755"
    owner: root
    group: root
  loop: "{{ libvirt_host_storage_pools }}"
  when: item.path is defined

- name: Get list of existing storage pools
  ansible.builtin.command: virsh pool-list --all
  register: existing_pools
  changed_when: false

- name: Create storage pool XML configurations
  ansible.builtin.ansible.builtin.template:
    src: libvirt_pool.xml.j2
    dest: /etc/libvirt/storage/{{ item.name }}.xml
    mode: "0644"
  loop: "{{ libvirt_host_storage_pools }}"
  when:
    - item.name not in existing_pools.stdout
    - item.state | default('active') != 'absent'

- name: Define storage pools
  ansible.builtin.command: virsh pool-define /etc/libvirt/storage/{{ item.name }}.xml
  register: pool_define
  changed_when: pool_define.rc == 0
  failed_when:
    - pool_define.rc != 0
    - '"already exists" not in pool_define.stderr'
  loop: "{{ libvirt_host_storage_pools }}"
  when:
    - item.name not in existing_pools.stdout
    - item.state | default('active') != 'absent'

- name: Start storage pools
  ansible.builtin.command: virsh pool-start {{ item.name }}
  register: pool_start
  changed_when: pool_start.rc == 0
  failed_when:
    - pool_start.rc != 0
    - '"already active" not in pool_start.stderr'
  loop: "{{ libvirt_host_storage_pools }}"
  when:
    - item.state | default('active') == 'active'
    - item.autostart | default(true)

- name: Mark storage pools for autostart
  ansible.builtin.command: virsh pool-autostart {{ item.name }}
  register: pool_autostart
  changed_when: pool_autostart.rc == 0
  failed_when:
    - pool_autostart.rc != 0
    - '"marked as autostarted" not in pool_autostart.stderr'
  loop: "{{ libvirt_host_storage_pools }}"
  when:
    - item.autostart | default(true)
    - item.state | default('active') != 'absent'

- name: Verify storage pool status
  ansible.builtin.command: virsh pool-info {{ item.name }}
  register: pool_info
  changed_when: false
  failed_when: false
  loop: "{{ libvirt_host_storage_pools }}"
  when: item.state | default('active') != 'absent'

- name: Assert storage pools are properly configured
  ansible.builtin.assert:
    that:
      - pool_info.rc == 0
      - "'State: running' in pool_info.stdout"
    fail_msg: Storage pool {{ item.name }} is not properly configured
    success_msg: Storage pool {{ item.name }} is properly configured
  loop: "{{ libvirt_host_storage_pools }}"
  when: item.state | default('active') != 'absent'

- name: Set correct SELinux context for storage pools
  ansible.builtin.ansible.builtin.file:
    path: "{{ item.path }}"
    setype: virt_image_t
    recurse: true
  loop: "{{ libvirt_host_storage_pools }}"
  when:
    - item.path is defined
    - ansible_selinux.status == "enabled"
