---
# KVM Feature Detection Automation
# Based on research findings for optimal KVM host configuration

- name: Detect CPU virtualization extensions
  ansible.builtin.command: grep -E '(vmx|svm)' /proc/cpuinfo
  register: cpu_virt_extensions
  changed_when: false
  failed_when: false

- name: Set virtualization capability facts
  ansible.builtin.set_fact:
    has_intel_vt: "{{ 'vmx' in cpu_virt_extensions.stdout }}"
    has_amd_v: "{{ 'svm' in cpu_virt_extensions.stdout }}"
    virtualization_supported: "{{ 'vmx' in cpu_virt_extensions.stdout or 'svm' in cpu_virt_extensions.stdout }}"

- name: Detect KVM module status
  ansible.builtin.command: lsmod | grep kvm
  register: kvm_module_status
  changed_when: false
  failed_when: false

- name: Check IOMMU support
  ansible.builtin.command: dmesg | grep -i iommu
  register: iommu_support
  changed_when: false
  failed_when: false

- name: Detect huge page support
  ansible.builtin.command: grep -i hugepages /proc/meminfo
  register: hugepage_support
  changed_when: false
  failed_when: false

- name: Check current libvirt version
  ansible.builtin.command: libvirtd --version
  register: libvirt_version
  changed_when: false
  failed_when: false

- name: Detect QEMU/KVM version
  ansible.builtin.command: qemu-system-x86_64 --version
  register: qemu_version
  changed_when: false
  failed_when: false

- name: Check for nested virtualization support
  ansible.builtin.shell: |
    if [ -f /sys/module/kvm_intel/parameters/nested ]; then
      cat /sys/module/kvm_intel/parameters/nested
    elif [ -f /sys/module/kvm_amd/parameters/nested ]; then
      cat /sys/module/kvm_amd/parameters/nested
    else
      echo "unknown"
    fi
  register: nested_virt_status
  changed_when: false

- name: Detect available CPU features for optimization
  ansible.builtin.command: lscpu
  register: cpu_info_detailed
  changed_when: false

- name: Parse CPU capabilities
  ansible.builtin.set_fact:
    cpu_capabilities: "{{ cpu_info_detailed.stdout_lines | select('match', '.*Flags.*') | list }}"
    cpu_cores: "{{ ansible_processor_cores }}"
    cpu_threads: "{{ ansible_processor_threads_per_core }}"
    total_vcpus: "{{ ansible_processor_vcpus }}"

- name: Check for hardware performance features
  ansible.builtin.set_fact:
    supports_ept: "{{ 'ept' in cpu_capabilities | join(' ') }}"
    supports_vpid: "{{ 'vpid' in cpu_capabilities | join(' ') }}"
    supports_unrestricted_guest: "{{ 'unrestricted_guest' in cpu_capabilities | join(' ') }}"
    supports_pae: "{{ 'pae' in cpu_capabilities | join(' ') }}"
    supports_nx: "{{ 'nx' in cpu_capabilities | join(' ') }}"

- name: Detect memory configuration
  ansible.builtin.set_fact:
    total_memory_gb: "{{ (ansible_memtotal_mb / 1024) | round(1) }}"
    recommended_hugepage_size: "{{ '1G' if ansible_memtotal_mb > 8192 else '2M' }}"
    can_use_large_hugepages: "{{ ansible_memtotal_mb > 8192 }}"

- name: Check storage performance capabilities
  ansible.builtin.command: lsblk -d -o NAME,ROTA
  register: storage_rotation_info
  changed_when: false

- name: Detect SSD/NVMe storage
  ansible.builtin.set_fact:
    has_ssd_storage: "{{ '0' in storage_rotation_info.stdout }}"
    storage_devices: "{{ storage_rotation_info.stdout_lines }}"

- name: Check network interface capabilities
  ansible.builtin.command: ethtool {{ ansible_default_ipv4.interface }}
  register: network_interface_features
  changed_when: false
  failed_when: false

- name: Detect SR-IOV support
  ansible.builtin.command: lspci | grep -i virtual
  register: sriov_devices
  changed_when: false
  failed_when: false

- name: Set advanced feature flags
  ansible.builtin.set_fact:
    kvm_feature_flags:
      virtualization_supported: "{{ virtualization_supported }}"
      cpu_vendor: "{{ 'Intel' if has_intel_vt else 'AMD' if has_amd_v else 'Unknown' }}"
      nested_virtualization: "{{ nested_virt_status.stdout | default('disabled') }}"
      iommu_available: "{{ iommu_support.stdout | length > 0 }}"
      hugepage_support: "{{ hugepage_support.stdout | length > 0 }}"
      ssd_storage: "{{ has_ssd_storage }}"
      sriov_capable: "{{ sriov_devices.stdout | length > 0 }}"
      performance_features:
        ept_support: "{{ supports_ept }}"
        vpid_support: "{{ supports_vpid }}"
        unrestricted_guest: "{{ supports_unrestricted_guest }}"
        pae_support: "{{ supports_pae }}"
        nx_bit: "{{ supports_nx }}"
      memory_config:
        total_gb: "{{ total_memory_gb }}"
        recommended_hugepage_size: "{{ recommended_hugepage_size }}"
        can_use_large_hugepages: "{{ can_use_large_hugepages }}"
      versions:
        libvirt: "{{ libvirt_version.stdout | default('unknown') }}"
        qemu: "{{ qemu_version.stdout | default('unknown') }}"

- name: Generate KVM feature detection report
  ansible.builtin.template:
    src: kvm_feature_report.j2
    dest: /var/log/kvm-feature-detection.json
    mode: '0644'
  vars:
    detection_timestamp: "{{ ansible_date_time.iso8601 }}"
    host_info:
      hostname: "{{ inventory_hostname }}"
      os: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
      kernel: "{{ ansible_kernel }}"
      architecture: "{{ ansible_architecture }}"
    features: "{{ kvm_feature_flags }}"

- name: Display KVM capabilities summary
  ansible.builtin.debug:
    msg:
      - "=== KVM Host Capability Detection ==="
      - "Host: {{ inventory_hostname }}"
      - "CPU Virtualization: {{ 'âœ“ Supported' if virtualization_supported else 'âœ— Not Supported' }}"
      - "CPU Vendor: {{ kvm_feature_flags.cpu_vendor }}"
      - "Total Memory: {{ total_memory_gb }}GB"
      - "Recommended Hugepage Size: {{ recommended_hugepage_size }}"
      - "SSD Storage: {{ 'âœ“ Available' if has_ssd_storage else 'âœ— Not Available' }}"
      - "IOMMU Support: {{ 'âœ“ Available' if kvm_feature_flags.iommu_available else 'âœ— Not Available' }}"
      - "SR-IOV Capable: {{ 'âœ“ Available' if kvm_feature_flags.sriov_capable else 'âœ— Not Available' }}"
      - "Nested Virtualization: {{ kvm_feature_flags.nested_virtualization }}"
      - ""
      - "Performance Features:"
      - "  EPT/NPT: {{ 'âœ“' if supports_ept else 'âœ—' }}"
      - "  VPID: {{ 'âœ“' if supports_vpid else 'âœ—' }}"
      - "  Unrestricted Guest: {{ 'âœ“' if supports_unrestricted_guest else 'âœ—' }}"
      - ""
      - "ðŸ“„ Full report saved to: /var/log/kvm-feature-detection.json"

- name: Validate KVM host readiness
  ansible.builtin.fail:
    msg: |
      KVM Host Validation Failed:
      - CPU virtualization extensions not found
      - This host cannot run KVM virtual machines
      - Please enable virtualization in BIOS/UEFI
  when: not virtualization_supported and not cicd_test | default(false)

- name: Create optimization recommendations
  ansible.builtin.set_fact:
    kvm_optimization_recommendations:
      - "{{ 'Enable hugepages for better memory performance' if kvm_feature_flags.hugepage_support else 'Hugepages not supported on this system' }}"
      - "{{ 'Configure CPU isolation for dedicated VM performance' if total_vcpus | int > 4 else 'Single/dual core system - CPU isolation not recommended' }}"
      - "{{ 'Enable nested virtualization for development workloads' if virtualization_supported else 'Nested virtualization not available' }}"
      - "{{ 'Configure SR-IOV for high-performance networking' if kvm_feature_flags.sriov_capable else 'SR-IOV not available - use virtio for networking' }}"
      - "{{ 'Optimize for SSD storage performance' if has_ssd_storage else 'Consider SSD storage for better VM performance' }}"
      - "{{ 'Enable IOMMU for device passthrough capabilities' if kvm_feature_flags.iommu_available else 'IOMMU not available - limited device passthrough' }}"
