name: Manual Release Trigger

# =============================================================================
# Manual Release Pipeline - The "Release Control Center"
# =============================================================================
#
# 🎯 PURPOSE FOR LLMs:
# This workflow provides manual control over release creation, allowing maintainers
# to trigger releases on-demand with full control over versioning and release notes.
#
# 🧠 ARCHITECTURE OVERVIEW FOR AI ASSISTANTS:
# 1. [PHASE 1]: Manual Input Processing - Processes user-provided release parameters
# 2. [PHASE 2]: Pre-Release Validation - Runs comprehensive validation suite
# 3. [PHASE 3]: Version Management - Updates version numbers across all files
# 4. [PHASE 4]: Release Creation - Creates GitHub release with custom notes
# 5. [PHASE 5]: Galaxy Deployment - Deploys to Ansible Galaxy with validation
# 6. [PHASE 6]: Post-Release Validation - Validates successful deployment

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'minor'
        type: choice
        options:
        - patch
        - minor
        - major
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string
      skip_validation:
        description: 'Skip pre-release validation (use with caution)'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run - validate but do not create release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write  # Required to push commits and create releases
  actions: read    # Required to read workflow status

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      is_valid: ${{ steps.validate.outputs.is_valid }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Validate release inputs
        id: validate
        run: |
          echo "🔍 Validating release inputs..."
          
          VERSION="${{ github.event.inputs.version }}"
          
          # Validate version format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.0.0)"
            exit 1
          fi
          
          # Get current version
          CURRENT_VERSION=$(grep "version:" galaxy.yml | sed 's/version: *"\([^"]*\)".*/\1/')
          echo "Current version: $CURRENT_VERSION"
          echo "Requested version: $VERSION"
          
          # Validate version is newer
          if [ "$VERSION" = "$CURRENT_VERSION" ]; then
            echo "❌ Version $VERSION is the same as current version"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_valid=true" >> $GITHUB_OUTPUT
          echo "✅ Version validation passed"

  pre-release-validation:
    needs: validate-inputs
    runs-on: ubuntu-latest
    if: needs.validate-inputs.outputs.is_valid == 'true' && github.event.inputs.skip_validation != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core>=2.17
          pip install molecule[podman]
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run comprehensive validation
        run: |
          echo "🧪 Running comprehensive pre-release validation..."
          
          # Run compliance checks
          if [ -f scripts/check-compliance.sh ]; then
            echo "📋 Running compliance checks..."
            bash scripts/check-compliance.sh
          fi
          
          # Run security scan
          if [ -f scripts/enhanced-security-scan.sh ]; then
            echo "🛡️ Running security scan..."
            bash scripts/enhanced-security-scan.sh
          fi
          
          # Validate file structure
          if [ -f scripts/validate-file-structure.sh ]; then
            echo "📁 Validating file structure..."
            bash scripts/validate-file-structure.sh
          fi
          
          # Test collection build
          echo "🔨 Testing collection build..."
          ansible-galaxy collection build . --force
          
          echo "✅ All pre-release validation passed"

  create-manual-release:
    needs: [validate-inputs, pre-release-validation]
    runs-on: ubuntu-latest
    if: |
      always() && 
      needs.validate-inputs.outputs.is_valid == 'true' && 
      (needs.pre-release-validation.result == 'success' || github.event.inputs.skip_validation == 'true') &&
      github.event.inputs.dry_run != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version files
        run: |
          echo "📝 Updating version files..."
          NEW_VERSION="${{ needs.validate-inputs.outputs.version }}"
          
          # Update galaxy.yml
          sed -i "s/version: \"[^\"]*\"/version: \"$NEW_VERSION\"/" galaxy.yml
          
          # Update Makefile
          sed -i "s/TAG=[0-9.]*/TAG=$NEW_VERSION/" Makefile
          
          # Commit version updates
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add galaxy.yml Makefile
          git commit -m "chore: bump version to $NEW_VERSION for manual release"
          git push

      - name: Create release tag
        run: |
          echo "🏷️ Creating release tag..."
          NEW_VERSION="${{ needs.validate-inputs.outputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          CUSTOM_NOTES="${{ github.event.inputs.release_notes }}"
          
          # Create tag message
          TAG_MESSAGE="v$NEW_VERSION: Manual $RELEASE_TYPE release

          Manual release created by maintainer
          Release type: $RELEASE_TYPE
          All validation checks passed"
          
          if [ -n "$CUSTOM_NOTES" ]; then
            TAG_MESSAGE="$TAG_MESSAGE

            Release Notes:
            $CUSTOM_NOTES"
          fi
          
          git tag -a "v$NEW_VERSION" -m "$TAG_MESSAGE"
          git push origin "v$NEW_VERSION"

          echo "✅ Release tag v$NEW_VERSION created and pushed"
          echo "🚀 Triggering release workflow..."

  build-and-deploy:
    needs: [validate-inputs, create-manual-release]
    runs-on: ubuntu-latest
    if: github.event.inputs.dry_run != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade ansible
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Copy files and directories to build
        run: |
          echo "📦 Preparing collection build..."
          ls -lath .
          mkdir -p build/src
          cp $files build/src
          cp -rf $directories build/src
          mkdir -p release/
        env:
          files: README.md LICENSE ansible.cfg galaxy.yml
          directories: inventories roles meta

      - name: Update build galaxy.yml version
        run: |
          echo "🔄 Updating build galaxy.yml version..."
          VERSION="${{ needs.validate-inputs.outputs.version }}"

          echo "📋 Current build/src/galaxy.yml version:"
          grep 'version:' build/src/galaxy.yml

          # Update galaxy.yml version in the build directory
          sed -i "s|version: \"[^\"]*\"|version: \"$VERSION\"|" build/src/galaxy.yml

          echo "✅ Updated build/src/galaxy.yml version:"
          grep 'version:' build/src/galaxy.yml

          # Verify the change was applied correctly
          if grep -q "version: \"$VERSION\"" build/src/galaxy.yml; then
            echo "✅ Build version update successful: $VERSION"
          else
            echo "❌ Build version update failed!"
            exit 1
          fi

      - name: Build Ansible Collection
        run: |
          echo "🔨 Building Ansible collection..."
          ansible-galaxy collection build build/src --force
          ls -lath *.tar.gz

      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "📝 Generating release notes..."
          VERSION="${{ needs.validate-inputs.outputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          CUSTOM_NOTES="${{ github.event.inputs.custom_notes }}"

          # Get commit messages since last release
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" -10)
          fi

          # Create release notes
          echo "## What's New in v$VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "### 🔧 Key Improvements" >> release_notes.md
          echo "- Manual $RELEASE_TYPE release with enhanced workflow automation" >> release_notes.md
          echo "- Streamlined release process with integrated CI/CD pipeline" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 📦 Changes in this Release" >> release_notes.md
          echo "$COMMITS" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🛡️ Quality Assurance" >> release_notes.md
          echo "- All ansible-test validations passed" >> release_notes.md
          echo "- Collection successfully built and tested" >> release_notes.md
          echo "" >> release_notes.md
          echo "### ⚠️ Breaking Changes" >> release_notes.md
          echo "- None in this release" >> release_notes.md

          if [ -n "$CUSTOM_NOTES" ]; then
            echo "" >> release_notes.md
            echo "### 📋 Additional Notes" >> release_notes.md
            echo "$CUSTOM_NOTES" >> release_notes.md
          fi

          # Save release notes to output
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          tag_name: v${{ needs.validate-inputs.outputs.version }}
          name: Release v${{ needs.validate-inputs.outputs.version }}
          files: tosin2013-qubinode_kvmhost_setup_collection-${{ needs.validate-inputs.outputs.version }}.tar.gz
          body: |
            # Ansible Collection: tosin2013.qubinode_kvmhost_setup_collection
            ![ReleaseBuildCollection](https://github.com/Qubinode/qubinode_kvmhost_setup_collection/actions/workflows/manual-release.yml/badge.svg)

            ${{ steps.release_notes.outputs.RELEASE_NOTES }}

            ## Installation

            ### Install without requirements.yml file:
            ```sh
            ansible-galaxy collection install tosin2013.qubinode_kvmhost_setup_collection
            ```

            ### Install with requirements.yml file:
            ```sh
            ansible-galaxy collection install -r requirements.yml -f
            ```

            The requirements.yml needs to have the following format and content:
            ```yaml
            ---
            collections:
                - tosin2013.qubinode_kvmhost_setup_collection
            ```

            For Development use the below command:
            ```yaml
            ---
            collections:
              - name: https://github.com/Qubinode/qubinode_kvmhost_setup_collection.git
                type: git
                version: main
            ```
          draft: false
          prerelease: false

      - name: Deploy to Ansible Galaxy
        run: |
          echo "🚀 Deploying to Ansible Galaxy..."
          ls -lath .
          ls -lath ./meta
          cat ./meta/runtime.yml
          ansible-galaxy collection publish tosin2013-qubinode_kvmhost_setup_collection-${{ needs.validate-inputs.outputs.version }}.tar.gz --api-key ${{ secrets.GALAXY_API_KEY }}
          echo "✅ Successfully deployed to Ansible Galaxy!"

      - name: Release Summary
        run: |
          echo "🎉 RELEASE COMPLETED SUCCESSFULLY!"
          echo "=================================="
          echo "Version: v${{ needs.validate-inputs.outputs.version }}"
          echo "Release Type: ${{ github.event.inputs.release_type }}"
          echo "GitHub Release: ✅ Created"
          echo "Ansible Galaxy: ✅ Deployed"
          echo "Collection: tosin2013.qubinode_kvmhost_setup_collection"
          echo ""
          echo "🔗 Install with: ansible-galaxy collection install tosin2013.qubinode_kvmhost_setup_collection"

  dry-run-summary:
    needs: [validate-inputs, pre-release-validation]
    runs-on: ubuntu-latest
    if: github.event.inputs.dry_run == 'true'
    
    steps:
      - name: Dry run summary
        run: |
          echo "🧪 DRY RUN SUMMARY"
          echo "=================="
          echo "Version: ${{ needs.validate-inputs.outputs.version }}"
          echo "Release Type: ${{ github.event.inputs.release_type }}"
          echo "Validation: ${{ needs.pre-release-validation.result }}"
          echo ""
          echo "✅ This would create a release if dry_run was false"
          echo "🚀 No actual release created due to dry_run mode"
