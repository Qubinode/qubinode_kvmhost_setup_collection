name: CI/CD Pipeline

on:
  push:
    branches: [main, stable-*]
    tags:
      - v*
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode for troubleshooting'
        required: false
        default: false
        type: boolean
      test_scenario:
        description: 'Test scenario to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - lint-only
        - molecule-only
        - security-only

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Display OS information
        run: |
          echo "üñ•Ô∏è  Operating System Information:"
          echo "=================================="
          if [ -f /etc/os-release ]; then
            echo "üìã OS Release Information:"
            cat /etc/os-release | grep -E '^(NAME|VERSION|ID|PRETTY_NAME)=' | sed 's/^/   /'
          fi
          if [ -f /etc/redhat-release ]; then
            echo "üî¥ Red Hat Release:"
            echo "   $(cat /etc/redhat-release)"
          fi
          echo "üèóÔ∏è  System Architecture: $(uname -m)"
          echo "üêß Kernel Version: $(uname -r)"
          echo "üíª Hostname: $(hostname)"
          echo "üîß Available Python versions:"
          for py in python3.11 python3.10 python3.9 python3 python; do
            if command -v $py &> /dev/null; then
              echo "   ‚úÖ $py: $($py --version 2>&1)"
            fi
          done
          echo "=================================="
      - name: Setup Python 3.11 environment
        run: |
          # Detect OS and use appropriate package manager
          if [ -f /etc/os-release ]; then
            . /etc/os-release
            echo "Detected OS: $NAME ($ID)"
          fi

          # Determine package manager
          if command -v dnf &> /dev/null; then
            PKG_MGR="dnf"
          elif command -v yum &> /dev/null; then
            PKG_MGR="yum"
          else
            echo "Error: No suitable package manager found"
            exit 1
          fi
          echo "Using package manager: $PKG_MGR"

          # Handle EPEL repository GPG issues for Rocky/Alma Linux
          if [[ "$ID" == "rocky" ]] || [[ "$ID" == "almalinux" ]]; then
            echo "Fixing EPEL repository GPG issues for Rocky/Alma Linux..."
            # Clean metadata and disable GPG check for EPEL
            sudo $PKG_MGR clean metadata || true
            # Disable GPG checking for EPEL repository in CI environment
            sudo sed -i 's/gpgcheck=1/gpgcheck=0/g' /etc/yum.repos.d/epel*.repo 2>/dev/null || true
            # Alternative: use dnf config-manager if available
            sudo $PKG_MGR config-manager --save --setopt=epel.gpgcheck=0 2>/dev/null || true
            sudo $PKG_MGR config-manager --save --setopt=epel-next.gpgcheck=0 2>/dev/null || true
            echo "EPEL GPG verification disabled for CI environment"
          fi

          # Install Python 3.11 and development packages
          if [[ "$ID" == "rocky" ]] || [[ "$ID" == "almalinux" ]]; then
            echo "Installing packages for Rocky/Alma Linux..."
            sudo $PKG_MGR install -y python3.11 python3.11-devel python3.11-pip
            sudo $PKG_MGR install -y python3-libselinux libselinux-devel
          elif [[ "$ID" == "rhel" ]]; then
            echo "Installing packages for RHEL..."
            sudo $PKG_MGR install -y python3.11 python3.11-devel python3.11-pip
            sudo $PKG_MGR install -y libselinux-python3 python3-libselinux libselinux-devel
          else
            echo "Installing packages for generic RedHat family..."
            sudo $PKG_MGR install -y python3.11 python3.11-devel python3.11-pip
            sudo $PKG_MGR install -y python3-libselinux libselinux-devel
          fi

          # Setup Python virtual environment
          python3.11 -m pip install --upgrade pip
          python3.11 -m pip install virtualenv
          python3.11 -m virtualenv venv
          source venv/bin/activate
      - name: Setup SELinux for CI environment
        run: |
          source venv/bin/activate
          # Use our comprehensive SELinux setup script
          ./scripts/setup-selinux-for-ci.sh python3.11

      - name: Install lint tools
        run: |
          source venv/bin/activate
          # Use ansible-core 2.18+ for Python 3.11 compatibility (fixes SELinux binding issues)
          pip install ansible-lint>=6.0.0 bandit>=1.7.0 "ansible-core>=2.18.0,<2.19.0"
      - name: Install required Ansible collections
        run: |
          source venv/bin/activate
          ansible-galaxy collection install -r roles/kvmhost_setup/collection/requirements.yml
      - name: Run ansible-lint
        run: |
          source venv/bin/activate
          ansible-lint roles/ --exclude roles/.cache/ --exclude roles/.venv/

  test:
    needs: lint
    runs-on: self-hosted
    timeout-minutes: 50  # Total job timeout with buffer for cleanup
    env:
      REDHAT_REGISTRY_USERNAME: ${{ secrets.REDHAT_REGISTRY_USERNAME }}
      REDHAT_REGISTRY_TOKEN: ${{ secrets.REDHAT_REGISTRY_TOKEN }}
    strategy:
      matrix:
        # Use ansible-core 2.18+ for Python 3.11 compatibility (2.17 has SELinux binding issues)
        ansible-version: ["2.18"]
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Display OS information
        run: |
          echo "üñ•Ô∏è  Operating System Information (Test Job):"
          echo "============================================="
          if [ -f /etc/os-release ]; then
            echo "üìã OS Release Information:"
            cat /etc/os-release | grep -E '^(NAME|VERSION|ID|PRETTY_NAME)=' | sed 's/^/   /'
          fi
          if [ -f /etc/redhat-release ]; then
            echo "üî¥ Red Hat Release:"
            echo "   $(cat /etc/redhat-release)"
          fi
          echo "üèóÔ∏è  System Architecture: $(uname -m)"
          echo "üêß Kernel Version: $(uname -r)"
          echo "üíª Hostname: $(hostname)"
          echo "üîß Target Python version: ${{ matrix.python-version }}"
          echo "============================================="
      - name: Setup Python ${{ matrix.python-version }}
        run: |
          # Detect OS and use appropriate package manager
          if [ -f /etc/os-release ]; then
            . /etc/os-release
            echo "Detected OS: $NAME ($ID)"
          fi

          # Determine package manager
          if command -v dnf &> /dev/null; then
            PKG_MGR="dnf"
          elif command -v yum &> /dev/null; then
            PKG_MGR="yum"
          else
            echo "Error: No suitable package manager found"
            exit 1
          fi
          echo "Using package manager: $PKG_MGR"

          # Handle EPEL repository GPG issues for Rocky/Alma Linux
          if [[ "$ID" == "rocky" ]] || [[ "$ID" == "almalinux" ]]; then
            echo "Fixing EPEL repository GPG issues for Rocky/Alma Linux..."
            sudo $PKG_MGR clean metadata || true
            sudo sed -i 's/gpgcheck=1/gpgcheck=0/g' /etc/yum.repos.d/epel*.repo 2>/dev/null || true
            sudo $PKG_MGR config-manager --save --setopt=epel.gpgcheck=0 2>/dev/null || true
          fi

          # Install Python and development packages based on OS
          if [[ "$ID" == "rocky" ]] || [[ "$ID" == "almalinux" ]]; then
            echo "Installing packages for Rocky/Alma Linux..."
            sudo $PKG_MGR install -y python${{ matrix.python-version }} python${{ matrix.python-version }}-devel python${{ matrix.python-version }}-pip
            sudo $PKG_MGR install -y python3-libselinux libselinux-devel
          elif [[ "$ID" == "rhel" ]]; then
            echo "Installing packages for RHEL..."
            sudo $PKG_MGR install -y python${{ matrix.python-version }} python${{ matrix.python-version }}-devel python${{ matrix.python-version }}-pip
            sudo $PKG_MGR install -y libselinux-python3 python3-libselinux libselinux-devel
          else
            echo "Installing packages for generic RedHat family..."
            sudo $PKG_MGR install -y python${{ matrix.python-version }} python${{ matrix.python-version }}-devel python${{ matrix.python-version }}-pip
            sudo $PKG_MGR install -y python3-libselinux libselinux-devel
          fi

          python${{ matrix.python-version }} -m pip install --upgrade pip
      - name: Install ansible-core
        run: python${{ matrix.python-version }} -m pip install ansible-core==${{ matrix.ansible-version }}
      - name: Setup SELinux for CI environment
        run: |
          # Use our comprehensive SELinux setup script
          ./scripts/setup-selinux-for-ci.sh python${{ matrix.python-version }}

      - name: Install Molecule with Python 3.11 support
        run: |
          # Updated to Molecule v6.x for current stable release
          python${{ matrix.python-version }} -m pip install "molecule>=6.0.0" molecule-podman

      - name: Setup container registries and authentication  
        run: |
          echo "üîß Setting up container registry access for CI environment..."
          
          # Setup Red Hat Registry Service Account authentication
          echo "Setting up Red Hat Registry authentication..."
          RED_HAT_ACCESS=false
          
          if [[ -n "$REDHAT_REGISTRY_USERNAME" && -n "$REDHAT_REGISTRY_TOKEN" ]]; then
            echo "üîê Logging into Red Hat registry with Service Account..."
            if echo "$REDHAT_REGISTRY_TOKEN" | podman login registry.redhat.io --username "$REDHAT_REGISTRY_USERNAME" --password-stdin; then
              echo "‚úÖ Red Hat registry authentication successful"
              
              # Test access with a minimal pull
              if podman pull registry.redhat.io/ubi9-minimal:latest 2>/dev/null; then
                echo "‚úÖ Red Hat registry access confirmed"
                RED_HAT_ACCESS=true
                podman rmi registry.redhat.io/ubi9-minimal:latest 2>/dev/null || true
              else
                echo "‚ö†Ô∏è Red Hat registry authenticated but image pull failed"
                RED_HAT_ACCESS=false
              fi
            else
              echo "‚ùå Red Hat registry authentication failed"
              RED_HAT_ACCESS=false
            fi
          else
            echo "‚ö†Ô∏è Red Hat registry credentials not configured - using public alternatives"
            echo "To use official Red Hat images, add REDHAT_REGISTRY_USERNAME and REDHAT_REGISTRY_TOKEN secrets"
            RED_HAT_ACCESS=false
          fi
          
          # If Red Hat registry is not accessible, modify molecule configs to use public images
          if [[ "$RED_HAT_ACCESS" == "false" ]]; then
            echo "üîÑ Replacing Red Hat registry images with public alternatives..."
            
            # Create temporary molecule configs with public images
            for scenario in default idempotency validation ci; do
              if [[ -f "molecule/$scenario/molecule.yml" ]]; then
                echo "Updating molecule/$scenario/molecule.yml..."
                cp "molecule/$scenario/molecule.yml" "molecule/$scenario/molecule.yml.backup"
                
                # Replace Red Hat images with public alternatives
                sed -i \
                  -e 's|registry\.redhat\.io/ubi9-init:.*|docker.io/rockylinux/rockylinux:9-ubi-init|g' \
                  -e 's|registry\.redhat\.io/ubi10-init:.*|docker.io/rockylinux/rockylinux:9-ubi-init|g' \
                  "molecule/$scenario/molecule.yml"
                
                echo "‚úÖ Updated $scenario scenario to use public images"
              fi
            done
          fi
          
          # Pre-pull available container images
          echo "üê≥ Pre-pulling container images to avoid timeout during tests..."
          
          if [[ "$RED_HAT_ACCESS" == "true" ]]; then
            IMAGES=(
              "docker.io/rockylinux/rockylinux:9-ubi-init"
              "docker.io/almalinux/9-init:9.6-20250712" 
              "registry.redhat.io/ubi9-init:9.6-1751962289"
              "registry.redhat.io/ubi10-init:10.0-1751895590"
            )
          else
            IMAGES=(
              "docker.io/rockylinux/rockylinux:9-ubi-init"
              "docker.io/almalinux/9-init:9.6-20250712"
            )
          fi
          
          for image in "${IMAGES[@]}"; do
            echo "Pulling $image..."
            if podman pull "$image"; then
              echo "‚úÖ Successfully pulled $image"
            else
              echo "‚ö†Ô∏è  Failed to pull $image - may cause test failures"
            fi
          done
          
          echo "üéØ Container registry setup complete!"

      - name: Validate ADR-0012 Security Compliance
        run: |
          echo "üõ°Ô∏è Validating ADR-0012 security compliance before running tests..."
          # Run security compliance validation (without actually running tests)
          chmod +x scripts/test-local-molecule.sh
          # Extract just the security validation part
          if [ -d "molecule" ]; then
            security_compliance_failed=false
            privileged_usage_found=false

            for molecule_file in molecule/*/molecule.yml; do
              if [ -f "$molecule_file" ]; then
                scenario_name=$(basename $(dirname "$molecule_file"))
                echo "üìã Checking scenario: $scenario_name"

                # Check for privileged containers (security violation)
                if grep -q "privileged.*true" "$molecule_file"; then
                  echo "  ‚ùå Privileged container found - security violation"
                  echo "     üö´ Violates ADR-0012: Security-Enhanced Container Testing"
                  privileged_usage_found=true
                else
                  echo "  ‚úÖ No privileged containers detected"
                fi

                # Check for security-enhanced capabilities approach
                if grep -q "capabilities:" "$molecule_file"; then
                  echo "  ‚úÖ Capability-specific security found"
                else
                  echo "  ‚ö†Ô∏è  No specific capabilities defined - consider adding SYS_ADMIN only"
                fi
              fi
            done

            if [ "$security_compliance_failed" = true ] || [ "$privileged_usage_found" = true ]; then
              echo "‚ùå CRITICAL: Security Compliance Failed"
              echo "üö´ BLOCKING CI/CD - Security violations detected"
              exit 1
            else
              echo "‚úÖ All configurations comply with security-enhanced testing requirements"
            fi
          fi

      - name: Run Molecule tests
        timeout-minutes: 45  # Increased timeout for better debugging
        run: |
          echo "üß™ Starting Molecule tests..."
          
          # Set Python interpreter for Ansible (use auto detection for containers)
          export ANSIBLE_PYTHON_INTERPRETER=auto_silent
          # Handle SELinux gracefully in containerized environments
          export ANSIBLE_SELINUX_SPECIAL_FS=""
          
          # Verify ansible-core version compatibility
          ansible_version=$(ansible --version | head -1 | cut -d' ' -f3 | cut -d']' -f1)
          echo "Using ansible-core version: $ansible_version"
          if [[ "$ansible_version" == "2.17"* ]]; then
            echo "ERROR: ansible-core 2.17 has SELinux binding issues with Python 3.11"
            echo "This workflow requires ansible-core 2.18+ for compatibility"
            exit 1
          fi
          
          # Debug molecule configuration
          echo "üîç Molecule configuration debugging..."
          echo "Available scenarios:"
          molecule list
          echo ""
          echo "Default scenario configuration:"
          cat molecule/default/molecule.yml
          echo ""
          
          # Check container runtime
          echo "Container runtime info:"
          podman version
          podman info | grep -E "(graphDriverName|runRoot|imageStore)"
          echo ""
          
          # Run molecule test with enhanced debugging and cleanup trap
          echo "üöÄ Running molecule test..."
          
          # Set up enhanced cleanup trap for any exit with better debugging
          trap 'echo "üö® Test interrupted or failed - cleaning up containers...";
                echo "üìä Container status before cleanup:";
                podman ps -a || true;
                echo "üñºÔ∏è Image status:";
                podman images || true;
                echo "üßπ Running cleanup...";
                molecule destroy || true;
                podman container prune -f || true;
                echo "‚úÖ Cleanup completed"' EXIT TERM INT
          
          # First, let's try to run each step individually to see where it fails
          echo "üîß Running molecule steps individually for better debugging..."
          
          # Step 1: dependency
          echo "üì¶ Running molecule dependency..."
          echo "üîç Pre-dependency container status:"
          podman ps -a || true
          if molecule --debug dependency; then
            echo "‚úÖ Dependency step completed successfully"
          else
            echo "‚ö†Ô∏è Dependency step failed (non-critical)"
          fi
          
          # Step 2: create
          echo "üèóÔ∏è Running molecule create..."
          echo "üîç Pre-create container status:"
          podman ps -a || true
          if molecule --debug create; then
            echo "‚úÖ Create step completed successfully"
            echo "üìä Post-create container status:"
            podman ps -a || true
            echo "üîç Container details:"
            for container in $(podman ps -q 2>/dev/null || true); do
              echo "=== Container: $container ==="
              podman inspect "$container" --format "{{.State.Status}}: {{.Config.Cmd}}" 2>/dev/null || true
            done
            echo "üêç Checking Python availability in containers:"
            for container in $(podman ps -q 2>/dev/null || true); do
              container_name=$(podman inspect "$container" --format "{{.Name}}" 2>/dev/null || true)
              echo "=== Python check for $container_name ==="
              podman exec "$container" which python3 2>/dev/null || echo "python3 not found"
              podman exec "$container" which python 2>/dev/null || echo "python not found"
              podman exec "$container" python3 --version 2>/dev/null || echo "python3 version check failed"
            done
          else
            echo "‚ùå Create step failed!"
            echo "üìä Podman containers after create failure:"
            podman ps -a || true
            echo "üñºÔ∏è Podman images:"
            podman images || true
            echo "üîç Checking for build logs..."
            podman logs $(podman ps -aq --latest) 2>/dev/null | tail -20 || true
            exit 1
          fi
          
          # Step 3: prepare
          echo "üõ†Ô∏è Running molecule prepare..."
          echo "üêç Verifying Ansible Python interpreter detection..."
          echo "ANSIBLE_PYTHON_INTERPRETER is set to: $ANSIBLE_PYTHON_INTERPRETER"
          if ! molecule --debug prepare; then
            echo "‚ùå Prepare step failed!"
            echo "Podman containers after prepare failure:"
            podman ps -a
            echo "Container logs for debugging:"
            for container in $(podman ps -a --format "{{.Names}}"); do
              echo "=== Logs for $container ==="
              podman logs "$container" 2>&1 | tail -50
            done
            exit 1
          fi
          
          # Step 4: converge
          echo "‚öôÔ∏è Running molecule converge..."
          if ! molecule --debug converge; then
            echo "‚ùå Converge step failed!"
            echo "Podman containers after converge failure:"
            podman ps -a
            echo "Container logs for debugging:"
            for container in $(podman ps -a --format "{{.Names}}"); do
              echo "=== Logs for $container ==="
              podman logs "$container" 2>&1 | tail -50
            done
            exit 1
          fi
          
          # Step 5: verify (if verification exists)
          echo "‚úÖ Running molecule verify..."
          if ! molecule --debug verify; then
            echo "‚ùå Verify step failed!"
            echo "Podman containers after verify failure:"
            podman ps -a
            exit 1
          fi
          
          # Step 6: destroy
          echo "üßπ Running molecule destroy..."
          echo "üîç Pre-destroy container status:"
          podman ps -a || true
          if molecule --debug destroy; then
            echo "‚úÖ Destroy step completed successfully"
            echo "üìä Post-destroy container status:"
            podman ps -a || true
          else
            echo "‚ùå Destroy step failed!"
            echo "üìä Podman containers after destroy failure:"
            podman ps -a || true
            echo "üîç Attempting manual cleanup of stuck containers..."
            for container in $(podman ps -aq --filter "label=molecule" 2>/dev/null || true); do
              echo "Force removing container: $container"
              podman rm -f "$container" 2>/dev/null || true
            done
            echo "‚ö†Ô∏è Destroy failure handled - continuing (destroy failures are non-critical)"
          fi
          
          echo "‚úÖ All molecule steps completed successfully!"
          
      - name: Cleanup and restore original configurations
        if: always()
        run: |
          echo "üßπ Cleaning up temporary changes..."
          
          # Force destroy any remaining molecule containers
          echo "üßπ Force destroying any remaining molecule containers..."
          molecule destroy || true
          
          # Clean up any lingering podman containers from molecule
          echo "üßπ Cleaning up lingering podman containers..."
          for container in $(podman ps -aq --filter "label=molecule" 2>/dev/null || true); do
            echo "Removing container: $container"
            podman rm -f "$container" 2>/dev/null || true
          done
          
          # Clean up any molecule-related containers by name pattern
          for container in $(podman ps -aq --filter "name=rocky-9" --filter "name=alma-9" --filter "name=rhel-9" --filter "name=rhel-10" 2>/dev/null || true); do
            echo "Removing molecule container: $container"
            podman rm -f "$container" 2>/dev/null || true
          done
          
          # Clean up unused images to save space
          echo "üßπ Cleaning up unused container images..."
          podman image prune -f || true
          
          # Restore original molecule configurations if they were backed up
          for scenario in default idempotency validation ci; do
            if [[ -f "molecule/$scenario/molecule.yml.backup" ]]; then
              echo "Restoring original molecule/$scenario/molecule.yml..."
              mv "molecule/$scenario/molecule.yml.backup" "molecule/$scenario/molecule.yml"
            fi
          done
          
          echo "‚úÖ Cleanup completed"
        env:
          PY_COLORS: "1"
          ANSIBLE_FORCE_COLOR: "1"
          MOLECULE_NO_LOG: "false"
          ANSIBLE_VERBOSITY: "2"
          # Disable SELinux checks if bindings are problematic
          LIBSELINUX_DISABLE_SELINUX_CHECK: "1"
      - name: Run Playbook tests
        run: |
          # Use auto detection for Python interpreter in containers
          export ANSIBLE_PYTHON_INTERPRETER=auto_silent
          # Handle SELinux gracefully in containerized environments
          export ANSIBLE_SELINUX_SPECIAL_FS=""
          export LIBSELINUX_DISABLE_SELINUX_CHECK="1"
          ansible-playbook -i inventories/test/hosts test.yml -vv

      - name: Cleanup container registry authentication
        if: always()
        run: |
          echo "üßπ Cleaning up container registry authentication..."
          # Logout from all registries to avoid credential leakage
          podman logout --all 2>/dev/null || true
          echo "‚úÖ Registry cleanup completed"

  version-monitoring:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for new Ansible versions
        run: |
          pip install packaging requests
          python -c "from packaging import version
          import requests
          latest = version.parse(requests.get('https://pypi.org/pypi/ansible-core/json').json()['info']['version'])
          current = version.parse('2.17')  # Updated baseline based on research
          if latest > current:
              print(f'New Ansible-core version available: {latest}')
              exit(1)
          else:
              print('Using current stable version')"
        continue-on-error: true

  security:
    needs: lint
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Display OS information
        run: |
          echo "üñ•Ô∏è  Operating System Information (Security Job):"
          echo "==============================================="
          if [ -f /etc/os-release ]; then
            echo "üìã OS Release Information:"
            cat /etc/os-release | grep -E '^(NAME|VERSION|ID|PRETTY_NAME)=' | sed 's/^/   /'
          fi
          if [ -f /etc/redhat-release ]; then
            echo "üî¥ Red Hat Release:"
            echo "   $(cat /etc/redhat-release)"
          fi
          echo "üèóÔ∏è  System Architecture: $(uname -m)"
          echo "üêß Kernel Version: $(uname -r)"
          echo "üíª Hostname: $(hostname)"
          echo "üîí Security scanning with Python 3.11"
          echo "==============================================="
      - name: Setup Python 3.11 environment
        run: |
          # Detect OS and use appropriate package manager
          if [ -f /etc/os-release ]; then
            . /etc/os-release
            echo "Detected OS: $NAME ($ID)"
          fi

          # Determine package manager
          if command -v dnf &> /dev/null; then
            PKG_MGR="dnf"
          elif command -v yum &> /dev/null; then
            PKG_MGR="yum"
          else
            echo "Error: No suitable package manager found"
            exit 1
          fi
          echo "Using package manager: $PKG_MGR"

          # Handle EPEL repository GPG issues for Rocky/Alma Linux
          if [[ "$ID" == "rocky" ]] || [[ "$ID" == "almalinux" ]]; then
            echo "Fixing EPEL repository GPG issues for Rocky/Alma Linux..."
            sudo $PKG_MGR clean metadata || true
            sudo sed -i 's/gpgcheck=1/gpgcheck=0/g' /etc/yum.repos.d/epel*.repo 2>/dev/null || true
            sudo $PKG_MGR config-manager --save --setopt=epel.gpgcheck=0 2>/dev/null || true
          fi

          # Install Python 3.11 and development packages for security scanning
          if [[ "$ID" == "rocky" ]] || [[ "$ID" == "almalinux" ]]; then
            echo "Installing packages for Rocky/Alma Linux..."
            sudo $PKG_MGR install -y python3.11 python3.11-devel python3.11-pip
            sudo $PKG_MGR install -y python3-libselinux libselinux-devel
          elif [[ "$ID" == "rhel" ]]; then
            echo "Installing packages for RHEL..."
            sudo $PKG_MGR install -y python3.11 python3.11-devel python3.11-pip
            sudo $PKG_MGR install -y libselinux-python3 python3-libselinux libselinux-devel
          else
            echo "Installing packages for generic RedHat family..."
            sudo $PKG_MGR install -y python3.11 python3.11-devel python3.11-pip
            sudo $PKG_MGR install -y python3-libselinux libselinux-devel
          fi

          # Setup Python virtual environment
          python3.11 -m pip install --upgrade pip
          python3.11 -m pip install virtualenv
          python3.11 -m virtualenv venv
          source venv/bin/activate
      - name: Setup SELinux for CI environment
        run: |
          source venv/bin/activate
          # Use our comprehensive SELinux setup script
          ./scripts/setup-selinux-for-ci.sh python3.11

      - name: Install security tools
        run: |
          source venv/bin/activate
          # Updated to latest versions for better security coverage
          pip install ansible-core>=2.17.0 bandit>=1.7.0 safety>=2.0.0
      - name: Run security scan
        run: |
          source venv/bin/activate
          bandit -r roles/ -f txt -ll
          # Additional security check for dependencies
          safety check --json
      - name: Test dependency security (simple approach)
        run: |
          source venv/bin/activate
          # Create temp requirements for key dependencies
          echo "ansible-core>=2.18.0,<2.19.0" > temp-requirements.txt
          echo "molecule[podman]>=6.0.0" >> temp-requirements.txt
          echo "ansible-lint" >> temp-requirements.txt
          # Check for vulnerabilities in our core dependencies
          safety check -r temp-requirements.txt --json || echo "‚ö†Ô∏è Security issues found in dependencies"
          rm temp-requirements.txt
          # Verify dependencies can be installed and work
          pip install ansible-core molecule[podman] ansible-lint
          ansible --version
          molecule --version
          echo "‚úÖ Core dependencies install and work correctly"

  # Emergency cleanup job that runs if test job fails or times out
  emergency-cleanup:
    if: always() && (needs.test.result == 'failure' || needs.test.result == 'cancelled')
    needs: test
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Emergency container cleanup
        run: |
          echo "üö® Running emergency cleanup for stuck containers..."
          chmod +x scripts/emergency-cleanup-containers.sh
          ./scripts/emergency-cleanup-containers.sh

  release:
    needs: [test, version-monitoring, security]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            LICENSE
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
