name: CI/CD Pipeline

on:
  push:
    branches: [main, stable-*]
    tags:
      - v*
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode for troubleshooting'
        required: false
        default: false
        type: boolean
      test_scenario:
        description: 'Test scenario to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - lint-only
        - molecule-only
        - security-only

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.11 environment
        run: |
          # Install Python 3.11 and SELinux development packages for RHEL 9 compatibility
          sudo yum install -y python3.11 python3.11-devel python3.11-pip
          sudo yum install -y libselinux-python3 python3-libselinux libselinux-devel
          python3.11 -m pip install --upgrade pip
          python3.11 -m pip install virtualenv
          python3.11 -m virtualenv venv
          source venv/bin/activate
      - name: Setup SELinux for CI environment
        run: |
          source venv/bin/activate
          # Use our comprehensive SELinux setup script
          ./scripts/setup-selinux-for-ci.sh python3.11

      - name: Install lint tools
        run: |
          source venv/bin/activate
          # Use ansible-core 2.18+ for Python 3.11 compatibility (fixes SELinux binding issues)
          pip install ansible-lint>=6.0.0 bandit>=1.7.0 "ansible-core>=2.18.0,<2.19.0"
      - name: Install required Ansible collections
        run: |
          source venv/bin/activate
          ansible-galaxy collection install -r roles/kvmhost_setup/collection/requirements.yml
      - name: Run ansible-lint
        run: |
          source venv/bin/activate
          ansible-lint roles/ --exclude roles/.cache/ --exclude roles/.venv/

  test:
    needs: lint
    runs-on: self-hosted
    env:
      REDHAT_REGISTRY_USERNAME: ${{ secrets.REDHAT_REGISTRY_USERNAME }}
      REDHAT_REGISTRY_TOKEN: ${{ secrets.REDHAT_REGISTRY_TOKEN }}
    strategy:
      matrix:
        # Use ansible-core 2.18+ for Python 3.11 compatibility (2.17 has SELinux binding issues)
        ansible-version: ["2.18"]
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python ${{ matrix.python-version }}
        run: |
          # Ensure Python 3.11 and SELinux packages are available (RHEL 9 compatibility)
          sudo yum install -y python${{ matrix.python-version }} python${{ matrix.python-version }}-devel python${{ matrix.python-version }}-pip
          sudo yum install -y libselinux-python3 python3-libselinux libselinux-devel
          python${{ matrix.python-version }} -m pip install --upgrade pip
      - name: Install ansible-core
        run: python${{ matrix.python-version }} -m pip install ansible-core==${{ matrix.ansible-version }}
      - name: Setup SELinux for CI environment
        run: |
          # Use our comprehensive SELinux setup script
          ./scripts/setup-selinux-for-ci.sh python${{ matrix.python-version }}

      - name: Install Molecule with Python 3.11 support
        run: |
          # Updated to Molecule v6.x for current stable release
          python${{ matrix.python-version }} -m pip install "molecule>=6.0.0" molecule-podman

      - name: Setup container registries and authentication  
        run: |
          echo "üîß Setting up container registry access for CI environment..."
          
          # Setup Red Hat Registry Service Account authentication
          echo "Setting up Red Hat Registry authentication..."
          RED_HAT_ACCESS=false
          
          if [[ -n "$REDHAT_REGISTRY_USERNAME" && -n "$REDHAT_REGISTRY_TOKEN" ]]; then
            echo "üîê Logging into Red Hat registry with Service Account..."
            if echo "$REDHAT_REGISTRY_TOKEN" | podman login registry.redhat.io --username "$REDHAT_REGISTRY_USERNAME" --password-stdin; then
              echo "‚úÖ Red Hat registry authentication successful"
              
              # Test access with a minimal pull
              if podman pull registry.redhat.io/ubi9-minimal:latest 2>/dev/null; then
                echo "‚úÖ Red Hat registry access confirmed"
                RED_HAT_ACCESS=true
                podman rmi registry.redhat.io/ubi9-minimal:latest 2>/dev/null || true
              else
                echo "‚ö†Ô∏è Red Hat registry authenticated but image pull failed"
                RED_HAT_ACCESS=false
              fi
            else
              echo "‚ùå Red Hat registry authentication failed"
              RED_HAT_ACCESS=false
            fi
          else
            echo "‚ö†Ô∏è Red Hat registry credentials not configured - using public alternatives"
            echo "To use official Red Hat images, add REDHAT_REGISTRY_USERNAME and REDHAT_REGISTRY_TOKEN secrets"
            RED_HAT_ACCESS=false
          fi
          
          # If Red Hat registry is not accessible, modify molecule configs to use public images
          if [[ "$RED_HAT_ACCESS" == "false" ]]; then
            echo "üîÑ Replacing Red Hat registry images with public alternatives..."
            
            # Create temporary molecule configs with public images
            for scenario in default idempotency validation ci; do
              if [[ -f "molecule/$scenario/molecule.yml" ]]; then
                echo "Updating molecule/$scenario/molecule.yml..."
                cp "molecule/$scenario/molecule.yml" "molecule/$scenario/molecule.yml.backup"
                
                # Replace Red Hat images with public alternatives - more comprehensive replacement
                sed -i \
                  -e 's|registry\.redhat\.io/ubi9-init:[^[:space:]]*|docker.io/rockylinux/rockylinux:9-ubi-init|g' \
                  -e 's|registry\.redhat\.io/ubi10-init:[^[:space:]]*|docker.io/rockylinux/rockylinux:9-ubi-init|g' \
                  "molecule/$scenario/molecule.yml"
                
                # Verify the replacement worked
                echo "After replacement, checking for Red Hat registry images:"
                grep -n "registry\.redhat\.io" "molecule/$scenario/molecule.yml" && echo "‚ö†Ô∏è Still found Red Hat registry images!" || echo "‚úÖ No Red Hat registry images found"
                
                echo "‚úÖ Updated $scenario scenario to use public images"
              fi
            done
          fi
          
          # Pre-pull available container images
          echo "üê≥ Pre-pulling container images to avoid timeout during tests..."
          
          if [[ "$RED_HAT_ACCESS" == "true" ]]; then
            IMAGES=(
              "docker.io/rockylinux/rockylinux:9-ubi-init"
              "docker.io/almalinux/9-init:9.6-20250712" 
              "registry.redhat.io/ubi9-init:9.6-1751962289"
              "registry.redhat.io/ubi10-init:10.0-1751895590"
            )
          else
            IMAGES=(
              "docker.io/rockylinux/rockylinux:9-ubi-init"
              "docker.io/almalinux/9-init:9.6-20250712"
            )
          fi
          
          for image in "${IMAGES[@]}"; do
            echo "Pulling $image..."
            if podman pull "$image"; then
              echo "‚úÖ Successfully pulled $image"
            else
              echo "‚ö†Ô∏è  Failed to pull $image - may cause test failures"
            fi
          done
          
          echo "üéØ Container registry setup complete!"

      - name: Destroy existing Molecule state
        run: |
          echo "üßπ Cleaning up any existing Molecule state..."
          
          # First, restore any backed up configurations from previous failed runs
          echo "Restoring any backed up configurations from previous runs..."
          for scenario in default idempotency validation ci; do
            if [[ -f "molecule/$scenario/molecule.yml.backup" ]]; then
              echo "Restoring backup for $scenario scenario..."
              mv "molecule/$scenario/molecule.yml.backup" "molecule/$scenario/molecule.yml"
            fi
          done
          
          # Destroy all scenarios to ensure clean state
          for scenario in default idempotency validation ci; do
            if [[ -d "molecule/$scenario" ]]; then
              echo "Destroying scenario: $scenario"
              molecule destroy -s "$scenario" || echo "No existing containers in $scenario to destroy"
            fi
          done
          
          # Reset molecule to clear any cached configuration
          echo "Resetting molecule configuration..."
          molecule reset || echo "No molecule state to reset"
          
          echo "‚úÖ Molecule cleanup completed"

      - name: Run Molecule tests
        timeout-minutes: 45
        run: |
          echo "üß™ Starting Molecule tests..."
          
          # Set Python interpreter for Ansible (Python 3.11)
          export ANSIBLE_PYTHON_INTERPRETER=python${{ matrix.python-version }}
          # Handle SELinux gracefully in containerized environments
          export ANSIBLE_SELINUX_SPECIAL_FS=""
          
          # Verify ansible-core version compatibility
          ansible_version=$(ansible --version | head -1 | cut -d' ' -f3 | cut -d']' -f1)
          echo "Using ansible-core version: $ansible_version"
          if [[ "$ansible_version" == "2.17"* ]]; then
            echo "ERROR: ansible-core 2.17 has SELinux binding issues with Python 3.11"
            echo "This workflow requires ansible-core 2.18+ for compatibility"
            exit 1
          fi
          
          # Debug molecule configuration
          echo "üîç Molecule configuration debugging..."
          echo "Available scenarios:"
          molecule list
          echo ""
          echo "Default scenario configuration:"
          cat molecule/default/molecule.yml
          echo ""
          echo "üîç Checking which container images will be used:"
          grep -A1 -B1 "image:" molecule/default/molecule.yml
          echo ""
          
          # Check container runtime
          echo "Container runtime info:"
          podman version
          podman info | grep -E "(graphDriverName|runRoot|imageStore)"
          echo ""
          
          # Run molecule test with enhanced debugging
          echo "üöÄ Running molecule test..."
          
          # Use the same command pattern as our working local script
          echo "üîß Running molecule test with scenario-specific approach (matches local script)..."
          
          # Run molecule test for default scenario like the local script does
          if molecule test -s default; then
            echo "‚úÖ Molecule default scenario test passed!"
          else
            echo "‚ùå Molecule test failed!"
            echo ""
            echo "ÔøΩ Debugging information:"
            echo "Podman containers:"
            podman ps -a
            echo ""
            echo "Podman images:"
            podman images
            echo ""
            
            # Get container logs for failed containers
            echo "Container logs for debugging:"
            for container in $(podman ps -a --format "{{.Names}}" 2>/dev/null || true); do
              if [ -n "$container" ]; then
                echo "=== Logs for $container ==="
                podman logs "$container" 2>&1 | tail -50 || echo "Could not get logs for $container"
              fi
            done
            
            echo ""
            echo "Recent podman logs:"
            journalctl --user -u podman --no-pager -n 50 || echo "Could not get podman logs"
            exit 1
          fi
          
      - name: Cleanup and restore original configurations
        if: always()
        run: |
          echo "üßπ Cleaning up temporary changes..."
          
          # Always destroy any remaining containers
          echo "Destroying any remaining molecule containers..."
          for scenario in default idempotency validation ci; do
            molecule destroy -s "$scenario" || echo "No containers in $scenario to destroy"
          done
          
          # Restore original molecule configurations if they were backed up
          for scenario in default idempotency validation ci; do
            if [[ -f "molecule/$scenario/molecule.yml.backup" ]]; then
              echo "Restoring original molecule/$scenario/molecule.yml..."
              mv "molecule/$scenario/molecule.yml.backup" "molecule/$scenario/molecule.yml"
            fi
          done
          
          # Verify all molecule.yml files are in good state
          echo "Verifying molecule.yml files..."
          for scenario in default idempotency validation ci; do
            if [[ -f "molecule/$scenario/molecule.yml" ]]; then
              echo "Checking syntax of molecule/$scenario/molecule.yml..."
              python3 -c "import yaml; yaml.safe_load(open('molecule/$scenario/molecule.yml'))" || {
                echo "ERROR: molecule/$scenario/molecule.yml has syntax errors!"
                echo "Restoring from git..."
                git checkout HEAD -- "molecule/$scenario/molecule.yml"
              }
            fi
          done
          
          echo "‚úÖ Cleanup completed"
        env:
          PY_COLORS: "1"
          ANSIBLE_FORCE_COLOR: "1"
          MOLECULE_NO_LOG: "false"
          ANSIBLE_VERBOSITY: "2"
          # Disable SELinux checks if bindings are problematic
          LIBSELINUX_DISABLE_SELINUX_CHECK: "1"
      - name: Run Playbook tests
        run: |
          # Use Python 3.11 interpreter for consistency
          export ANSIBLE_PYTHON_INTERPRETER=python${{ matrix.python-version }}
          # Handle SELinux gracefully in containerized environments
          export ANSIBLE_SELINUX_SPECIAL_FS=""
          export LIBSELINUX_DISABLE_SELINUX_CHECK="1"
          ansible-playbook -i inventories/test/hosts test.yml -vv

      - name: Cleanup container registry authentication
        if: always()
        run: |
          echo "üßπ Cleaning up container registry authentication..."
          # Logout from all registries to avoid credential leakage
          podman logout --all 2>/dev/null || true
          echo "‚úÖ Registry cleanup completed"

  version-monitoring:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for new Ansible versions
        run: |
          pip install packaging requests
          python -c "from packaging import version
          import requests
          latest = version.parse(requests.get('https://pypi.org/pypi/ansible-core/json').json()['info']['version'])
          current = version.parse('2.17')  # Updated baseline based on research
          if latest > current:
              print(f'New Ansible-core version available: {latest}')
              exit(1)
          else:
              print('Using current stable version')"
        continue-on-error: true

  security:
    needs: lint
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python 3.11 environment
        run: |
          # Use Python 3.11 for security scanning consistency with SELinux support
          sudo yum install -y python3.11 python3.11-devel python3.11-pip
          sudo yum install -y libselinux-python3 python3-libselinux libselinux-devel
          python3.11 -m pip install --upgrade pip
          python3.11 -m pip install virtualenv
          python3.11 -m virtualenv venv
          source venv/bin/activate
      - name: Setup SELinux for CI environment
        run: |
          source venv/bin/activate
          # Use our comprehensive SELinux setup script
          ./scripts/setup-selinux-for-ci.sh python3.11

      - name: Install security tools
        run: |
          source venv/bin/activate
          # Updated to latest versions for better security coverage
          pip install ansible-core>=2.17.0 bandit>=1.7.0 safety>=2.0.0
      - name: Run security scan
        run: |
          source venv/bin/activate
          bandit -r roles/ -f txt -ll
          # Additional security check for dependencies
          safety check --json
      - name: Test dependency security (simple approach)
        run: |
          source venv/bin/activate
          # Create temp requirements for key dependencies
          echo "ansible-core>=2.18.0,<2.19.0" > temp-requirements.txt
          echo "molecule[podman]>=6.0.0" >> temp-requirements.txt
          echo "ansible-lint" >> temp-requirements.txt
          # Check for vulnerabilities in our core dependencies
          safety check -r temp-requirements.txt --json || echo "‚ö†Ô∏è Security issues found in dependencies"
          rm temp-requirements.txt
          # Verify dependencies can be installed and work
          pip install ansible-core molecule[podman] ansible-lint
          ansible --version
          molecule --version
          echo "‚úÖ Core dependencies install and work correctly"

  release:
    needs: [test, version-monitoring, security]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            LICENSE
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
