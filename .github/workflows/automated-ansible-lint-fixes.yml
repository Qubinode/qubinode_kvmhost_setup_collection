---
name: Automated Ansible Lint Fixes

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  ansible-lint-fix:
    runs-on: self-hosted
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python virtual environment
        run: |
          # Use Python 3.12 if available, fallback to python3
          if command -v python3.12 &> /dev/null; then
            PYTHON_CMD=python3.12
          elif command -v python3 &> /dev/null; then
            PYTHON_CMD=python3
          else
            echo "No suitable Python found"
            exit 1
          fi
          
          echo "Using Python: $($PYTHON_CMD --version)"
          $PYTHON_CMD -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "VIRTUAL_ENV=$(pwd)/venv" >> $GITHUB_ENV
          echo "$(pwd)/venv/bin" >> $GITHUB_PATH

      - name: Install Podman and container dependencies
        run: |
          # Check if podman is already installed
          if ! command -v podman &> /dev/null; then
            sudo dnf install -y podman slirp4netns podman-docker
          fi
          
          # Configure container registries
          sudo mkdir -p /etc/containers
          if [ ! -f /etc/containers/registries.conf ]; then
            echo -e '[registries.search]\nregistries = ["docker.io", "quay.io"]' | sudo tee /etc/containers/registries.conf
          fi
          
          # Configure containers
          if [ ! -f /etc/containers/containers.conf ]; then
            echo -e '[engine]\nevents_logger = "file"\ncgroup_manager = "systemd"' | sudo tee /etc/containers/containers.conf
          fi
          
          # Enable podman socket if not running
          sudo systemctl enable --now podman.socket || true

      - name: Run ansible-lint with auto-fix
        id: lint
        run: |
          # Create backup of original files
          git stash push -m "backup-before-lint-$(date +%s)" || true
          
          # Run ansible-lint with fix option
          ansible-lint --fix roles/ || true
          
          # Also run yamllint on YAML files
          find . -name "*.yml" -o -name "*.yaml" | grep -v ".git" | xargs yamllint -c .yamllint || true

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes made by ansible-lint"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git diff --name-only
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Ansible Lint"
          git add .
          git commit -m "chore: automated ansible-lint fixes
          
          - Applied ansible-lint auto-fixes
          - Fixed YAML formatting issues
          - Automated by GitHub Actions
          
          Co-authored-by: ansible-lint <ansible-lint@github.com>"
          git push

      - name: Create summary
        run: |
          echo "## Ansible Lint Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.changes.outputs.changes }}" == "true" ]; then
            echo "‚úÖ **Fixes Applied**: Ansible-lint found and fixed issues automatically." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Changed Files:" >> $GITHUB_STEP_SUMMARY
            git diff --name-only HEAD~1 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **No Issues Found**: All Ansible files are already compliant." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tools Used:" >> $GITHUB_STEP_SUMMARY
          echo "- ansible-lint $(ansible-lint --version | head -1)" >> $GITHUB_STEP_SUMMARY
          echo "- yamllint $(yamllint --version)" >> $GITHUB_STEP_SUMMARY

  verify-changes:
    runs-on: self-hosted
    needs: ansible-lint-fix
    if: always()
    
    steps:
      - name: Checkout updated code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Set up Python virtual environment
        run: |
          # Use Python 3.12 if available, fallback to python3
          if command -v python3.12 &> /dev/null; then
            PYTHON_CMD=python3.12
          elif command -v python3 &> /dev/null; then
            PYTHON_CMD=python3
          else
            echo "No suitable Python found"
            exit 1
          fi
          
          echo "Using Python: $($PYTHON_CMD --version)"
          $PYTHON_CMD -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "VIRTUAL_ENV=$(pwd)/venv" >> $GITHUB_ENV
          echo "$(pwd)/venv/bin" >> $GITHUB_PATH

      - name: Verify ansible-lint compliance
        run: |
          echo "üîç Verifying ansible-lint compliance..."
          ansible-lint roles/ --parseable --quiet || exit_code=$?
          
          if [ ${exit_code:-0} -eq 0 ]; then
            echo "‚úÖ All Ansible files are compliant"
          else
            echo "‚ùå Some issues remain - manual review required"
            exit 1
          fi

      - name: Verify YAML syntax
        run: |
          echo "üîç Verifying YAML syntax..."
          find . -name "*.yml" -o -name "*.yaml" | grep -v ".git" | xargs yamllint -c .yamllint
          echo "‚úÖ All YAML files have valid syntax"
