---
name: Automated Ansible Lint Fixes with Gemini

on:
  workflow_dispatch:
    inputs:
      fix_mode:
        description: 'Fix mode for ansible-lint'
        required: false
        default: 'auto'
        type: choice
        options:
          - 'auto'
          - 'manual-review'
          - 'gemini-assisted'
      target_files:
        description: 'Specific files to fix (optional, comma-separated)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write
  checks: write
  issues: read

jobs:
  analyze-lint-issues:
    runs-on: self-hosted
    outputs:
      lint-issues: ${{ steps.scan.outputs.issues }}
      fix-needed: ${{ steps.scan.outputs.fix-needed }}
      gemini-analysis: ${{ steps.gemini.outputs.analysis }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python virtual environment
        run: |
          # Use Python 3.12 if available, fallback to python3
          if command -v python3.12 &> /dev/null; then
            PYTHON_CMD=python3.12
          elif command -v python3 &> /dev/null; then
            PYTHON_CMD=python3
          else
            echo "No suitable Python found"
            exit 1
          fi
          
          echo "Using Python: $($PYTHON_CMD --version)"
          $PYTHON_CMD -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "VIRTUAL_ENV=$(pwd)/venv" >> $GITHUB_ENV
          echo "$(pwd)/venv/bin" >> $GITHUB_PATH

      - name: Scan for ansible-lint issues
        id: scan
        run: |
          echo "🔍 Scanning for ansible-lint issues..."
          
          # Determine target files
          if [ -n "${{ github.event.inputs.target_files }}" ]; then
            TARGET_FILES="${{ github.event.inputs.target_files }}"
            echo "Targeting specific files: $TARGET_FILES"
          else
            TARGET_FILES="roles/ validation/ .github/workflows/"
            echo "Targeting default directories: $TARGET_FILES"
          fi
          
          # Run ansible-lint to capture issues
          ansible-lint --parseable $TARGET_FILES > lint-output.txt 2>&1 || true
          
          # Process output
          if [ -s lint-output.txt ]; then
            echo "fix-needed=true" >> $GITHUB_OUTPUT
            # Create structured issue data
            echo "Found $(wc -l < lint-output.txt) lint issues"
            
            # Extract unique issue types for analysis
            cat lint-output.txt | cut -d':' -f4 | sort | uniq > issue-types.txt
            
            # Create JSON structure for Gemini analysis
            echo '{"issues": [' > issues.json
            while IFS= read -r line; do
              echo "\"$line\"," >> issues.json
            done < lint-output.txt
            sed -i '$ s/,$//' issues.json
            echo ']}' >> issues.json
            
            echo "issues=$(cat issues.json | tr -d '\n')" >> $GITHUB_OUTPUT
          else
            echo "fix-needed=false" >> $GITHUB_OUTPUT
            echo '{"issues": []}' > issues.json
            echo "issues={\"issues\": []}" >> $GITHUB_OUTPUT
          fi

      - name: Analyze with Google Gemini
        if: steps.scan.outputs.fix-needed == 'true' && github.event.inputs.fix_mode == 'gemini-assisted'
        uses: google-gemini/gemini-cli-action@main
        id: gemini
        with:
          api-key: ${{ secrets.GEMINI_API_KEY }}
          model: 'gemini-pro'
          prompt: |
            You are an expert Ansible developer tasked with analyzing ansible-lint issues and providing fix recommendations.
            
            Please analyze the following ansible-lint issues and provide:
            1. A summary of the most critical issues
            2. Recommended fix strategies following Ansible best practices
            3. Priority order for fixing issues (critical, high, medium, low)
            4. Any potential breaking changes to watch for
            
            Ansible-lint issues found:
            ${{ steps.scan.outputs.issues }}
            
            Please respond in JSON format with the following structure:
            {
              "summary": "Brief overview of issues",
              "critical_issues": ["list of critical issues"],
              "recommended_fixes": ["list of specific fix recommendations"],
              "priority_order": ["ordered list of issues by priority"],
              "breaking_change_warnings": ["potential breaking changes to watch for"],
              "fix_commands": ["specific ansible-lint and sed commands to apply"]
            }

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lint-analysis
          path: |
            lint-output.txt
            issues.json
            issue-types.txt
          retention-days: 7

  apply-lint-fixes:
    runs-on: self-hosted
    needs: analyze-lint-issues
    if: needs.analyze-lint-issues.outputs.fix-needed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python virtual environment
        run: |
          # Use Python 3.12 if available, fallback to python3
          if command -v python3.12 &> /dev/null; then
            PYTHON_CMD=python3.12
          elif command -v python3 &> /dev/null; then
            PYTHON_CMD=python3
          else
            echo "No suitable Python found"
            exit 1
          fi
          
          echo "Using Python: $($PYTHON_CMD --version)"
          $PYTHON_CMD -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "VIRTUAL_ENV=$(pwd)/venv" >> $GITHUB_ENV
          echo "$(pwd)/venv/bin" >> $GITHUB_PATH

      - name: Create fix branch
        id: branch
        run: |
          BRANCH_NAME="ansible-lint-fixes-$(date +%Y%m%d-%H%M%S)"
          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          git checkout -b "$BRANCH_NAME"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Ansible Lint"

      - name: Download analysis artifacts
        uses: actions/download-artifact@v4
        with:
          name: lint-analysis

      - name: Apply Gemini-recommended fixes
        if: github.event.inputs.fix_mode == 'gemini-assisted'
        run: |
          echo "🤖 Applying Gemini-recommended fixes..."
          
          # Parse Gemini analysis if available
          if [ -f gemini-analysis.json ]; then
            echo "Gemini analysis found, applying recommended fixes..."
            # Extract fix commands from Gemini analysis
            jq -r '.fix_commands[]' gemini-analysis.json > fix-commands.sh
            chmod +x fix-commands.sh
            ./fix-commands.sh || echo "Some fixes may have failed"
          else
            echo "No Gemini analysis found, falling back to auto-fix"
            ansible-lint --fix roles/ validation/ .github/workflows/ || true
          fi

      - name: Apply automatic fixes
        if: github.event.inputs.fix_mode == 'auto'
        run: |
          echo "🔧 Applying automatic ansible-lint fixes..."
          
          # Create backup
          git stash push -m "backup-before-lint-$(date +%s)" || true
          
          # Apply fixes for different file types
          ansible-lint --fix roles/ || true
          ansible-lint --fix validation/ || true
          ansible-lint --fix .github/workflows/ || true
          
          # Apply yamllint fixes
          find . -name "*.yml" -o -name "*.yaml" | grep -v ".git" | while read -r file; do
            yamllint --no-warnings "$file" || echo "YAML issues in $file"
          done

      - name: Apply manual review fixes
        if: github.event.inputs.fix_mode == 'manual-review'
        run: |
          echo "📋 Manual review mode - generating fix suggestions..."
          
          # Create a detailed report for manual review
          echo "# Ansible Lint Issues Report" > LINT_REVIEW.md
          echo "Generated: $(date)" >> LINT_REVIEW.md
          echo "" >> LINT_REVIEW.md
          
          echo "## Issues Found:" >> LINT_REVIEW.md
          echo '```' >> LINT_REVIEW.md
          cat lint-output.txt >> LINT_REVIEW.md
          echo '```' >> LINT_REVIEW.md
          
          echo "" >> LINT_REVIEW.md
          echo "## Recommended Actions:" >> LINT_REVIEW.md
          echo "1. Review each issue above" >> LINT_REVIEW.md
          echo "2. Apply fixes following Ansible best practices" >> LINT_REVIEW.md
          echo "3. Test changes in development environment" >> LINT_REVIEW.md
          echo "4. Re-run ansible-lint to verify fixes" >> LINT_REVIEW.md
          
          git add LINT_REVIEW.md

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet HEAD; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes made by ansible-lint fixes"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git diff --name-only
          fi

      - name: Commit changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          git add .
          
          # Create detailed commit message
          cat > commit_msg.txt << 'EOF'
          chore: automated ansible-lint fixes
          
          Fix mode: ${{ github.event.inputs.fix_mode }}
          Target: ${{ github.event.inputs.target_files || 'default directories' }}
          
          Applied fixes for ansible-lint issues
          
          Automated by GitHub Actions with Gemini assistance
          EOF
          
          git commit -F commit_msg.txt

      - name: Push changes and create PR
        if: steps.changes.outputs.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Push branch
          git push origin ${{ steps.branch.outputs.branch-name }}
          
          # Create pull request
          cat > pr_body.txt << 'EOF'
          ## Automated Ansible Lint Fixes
          
          This PR contains automated fixes for ansible-lint issues found in the repository.
          
          ### Fix Details:
          - **Fix Mode**: ${{ github.event.inputs.fix_mode }}
          - **Target Files**: ${{ github.event.inputs.target_files || 'Default directories' }}
          
          ### Verification:
          - [ ] Review changes for correctness
          - [ ] Test in development environment  
          - [ ] Verify ansible-lint compliance
          - [ ] Check for any breaking changes
          
          ---
          *This PR was created automatically by GitHub Actions. Please review carefully before merging.*
          EOF
          
          gh pr create \
            --title "🤖 Automated Ansible Lint Fixes ($(date +%Y-%m-%d))" \
            --body-file pr_body.txt \
            --head ${{ steps.branch.outputs.branch-name }} \
            --base main \
            --label "automated,ansible-lint,chore"

      - name: Create summary
        run: |
          echo "## Ansible Lint Fix Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.changes.outputs.changes }}" == "true" ]; then
            echo "✅ **PR Created**: Automated fixes have been applied and a pull request created." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Details:" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: ${{ steps.branch.outputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Fix Mode**: ${{ github.event.inputs.fix_mode }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Issues Found**: $(wc -l < lint-output.txt 2>/dev/null || echo 0)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Changed Files:" >> $GITHUB_STEP_SUMMARY
            git diff --name-only HEAD~1 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No Changes**: All files are already ansible-lint compliant." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tools Used:" >> $GITHUB_STEP_SUMMARY
          echo "- ansible-lint $(ansible-lint --version | head -1)" >> $GITHUB_STEP_SUMMARY
          echo "- yamllint $(yamllint --version)" >> $GITHUB_STEP_SUMMARY
          if [ '${{ github.event.inputs.fix_mode }}' = 'gemini-assisted' ]; then
            echo "- Google Gemini Pro (AI-assisted analysis)" >> $GITHUB_STEP_SUMMARY
          fi
