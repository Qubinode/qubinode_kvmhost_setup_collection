name: Automated Ansible Lint Fixes

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if no issues detected'
        required: false
        default: false
        type: boolean
      target_branch:
        description: 'Target branch for PR (default: main)'
        required: false
        default: 'main'
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  automated-ansible-lint-fixes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-lint[yamllint] PyYAML

      - name: Make automation scripts executable
        run: |
          chmod +x scripts/*.sh scripts/*.py
          ls -la scripts/

      - name: Run pre-automation ansible-lint scan
        id: pre_scan
        run: |
          echo "Running initial ansible-lint scan..."
          # Capture current failures count
          INITIAL_FAILURES=$(ansible-lint roles/ --exclude roles/.cache/ --exclude roles/.venv/ 2>/dev/null | grep -c ":" || echo "0")
          echo "initial_failures=$INITIAL_FAILURES" >> $GITHUB_OUTPUT
          echo "📊 Initial ansible-lint failures: $INITIAL_FAILURES"
          
          # Capture current YAML validity
          INITIAL_YAML_VALID=$(python3 -c "
          import yaml
          import os
          from pathlib import Path
          
          total = 0
          valid = 0
          
          for file in Path('roles/').rglob('*.yml'):
              if '.cache' in str(file) or '.venv' in str(file):
                  continue
              total += 1
              try:
                  with open(file) as f:
                      yaml.safe_load(f)
                  valid += 1
              except:
                  pass
          
          print(f'{valid}/{total}')
          " 2>/dev/null || echo "0/0")
          
          echo "initial_yaml_status=$INITIAL_YAML_VALID" >> $GITHUB_OUTPUT
          echo "📊 Initial YAML validity: $INITIAL_YAML_VALID"

      - name: Run automated ansible-lint fixes
        id: automation
        run: |
          echo "🚀 Running comprehensive ansible-lint automation..."
          
          # Create a summary file for the automation run
          SUMMARY_FILE="automation_summary.md"
          echo "# Automated Ansible Lint Fixes Summary" > $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE
          echo "**Run Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $SUMMARY_FILE
          echo "**Trigger:** ${{ github.event_name }}" >> $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE
          
          # Run the complete automation toolkit
          if ./scripts/ansible_lint_toolkit.sh > automation_output.log 2>&1; then
            echo "automation_success=true" >> $GITHUB_OUTPUT
            echo "✅ Automation completed successfully"
          else
            echo "automation_success=false" >> $GITHUB_OUTPUT
            echo "⚠️ Automation completed with warnings (this is normal)"
          fi
          
          # Capture the automation output
          cat automation_output.log
          
          # Extract key metrics from the output
          FIXED_FILES=$(grep -o "Total files fixed: [0-9]*" automation_output.log | tail -1 | grep -o "[0-9]*" || echo "0")
          echo "files_fixed=$FIXED_FILES" >> $GITHUB_OUTPUT
          
          # Add automation results to summary
          echo "## 🎯 Automation Results" >> $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE
          echo "- **Files Modified:** $FIXED_FILES" >> $SUMMARY_FILE
          
          # Check if any files were actually changed
          if git diff --quiet; then
            echo "changes_made=false" >> $GITHUB_OUTPUT
            echo "No file changes detected"
            echo "- **Status:** No changes required ✅" >> $SUMMARY_FILE
          else
            echo "changes_made=true" >> $GITHUB_OUTPUT
            echo "File changes detected!"
            echo "- **Status:** Fixes applied 🔧" >> $SUMMARY_FILE
            
            # Add changed files to summary
            echo "" >> $SUMMARY_FILE
            echo "## 📝 Files Modified" >> $SUMMARY_FILE
            echo "" >> $SUMMARY_FILE
            git diff --name-only | while read file; do
              echo "- \`$file\`" >> $SUMMARY_FILE
            done
          fi

      - name: Run post-automation ansible-lint scan
        id: post_scan
        if: steps.automation.outputs.changes_made == 'true'
        run: |
          echo "Running post-automation ansible-lint scan..."
          
          # Capture final failures count
          FINAL_FAILURES=$(ansible-lint roles/ --exclude roles/.cache/ --exclude roles/.venv/ 2>/dev/null | grep -c ":" || echo "0")
          echo "final_failures=$FINAL_FAILURES" >> $GITHUB_OUTPUT
          echo "📊 Final ansible-lint failures: $FINAL_FAILURES"
          
          # Capture final YAML validity
          FINAL_YAML_VALID=$(python3 -c "
          import yaml
          import os
          from pathlib import Path
          
          total = 0
          valid = 0
          
          for file in Path('roles/').rglob('*.yml'):
              if '.cache' in str(file) or '.venv' in str(file):
                  continue
              total += 1
              try:
                  with open(file) as f:
                      yaml.safe_load(f)
                  valid += 1
              except:
                  pass
          
          print(f'{valid}/{total}')
          " 2>/dev/null || echo "0/0")
          
          echo "final_yaml_status=$FINAL_YAML_VALID" >> $GITHUB_OUTPUT
          echo "📊 Final YAML validity: $FINAL_YAML_VALID"
          
          # Calculate improvements
          INITIAL_FAILURES="${{ steps.pre_scan.outputs.initial_failures }}"
          IMPROVEMENTS=$((INITIAL_FAILURES - FINAL_FAILURES))
          echo "improvements=$IMPROVEMENTS" >> $GITHUB_OUTPUT
          
          # Add post-scan results to summary
          echo "" >> automation_summary.md
          echo "## 📈 Impact Analysis" >> automation_summary.md
          echo "" >> automation_summary.md
          echo "| Metric | Before | After | Improvement |" >> automation_summary.md
          echo "|--------|--------|-------|-------------|" >> automation_summary.md
          echo "| Ansible-lint failures | $INITIAL_FAILURES | $FINAL_FAILURES | $IMPROVEMENTS fixed |" >> automation_summary.md
          echo "| YAML validity | ${{ steps.pre_scan.outputs.initial_yaml_status }} | $FINAL_YAML_VALID | Improved |" >> automation_summary.md

      - name: Generate detailed diff summary
        id: diff_summary
        if: steps.automation.outputs.changes_made == 'true'
        run: |
          echo "" >> automation_summary.md
          echo "## 🔍 Detailed Changes" >> automation_summary.md
          echo "" >> automation_summary.md
          echo "<details>" >> automation_summary.md
          echo "<summary>Click to view detailed diff</summary>" >> automation_summary.md
          echo "" >> automation_summary.md
          echo "\`\`\`diff" >> automation_summary.md
          git diff >> automation_summary.md
          echo "\`\`\`" >> automation_summary.md
          echo "</details>" >> automation_summary.md
          
          # Also save the full automation log
          echo "" >> automation_summary.md
          echo "## 📋 Automation Log" >> automation_summary.md
          echo "" >> automation_summary.md
          echo "<details>" >> automation_summary.md
          echo "<summary>Click to view full automation log</summary>" >> automation_summary.md
          echo "" >> automation_summary.md
          echo "\`\`\`" >> automation_summary.md
          cat automation_output.log >> automation_summary.md
          echo "\`\`\`" >> automation_summary.md
          echo "</details>" >> automation_summary.md

      - name: Create Pull Request
        if: steps.automation.outputs.changes_made == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🤖 Automated ansible-lint fixes
            
            - Applied automated fixes to ${{ steps.automation.outputs.files_fixed }} files
            - Reduced ansible-lint failures from ${{ steps.pre_scan.outputs.initial_failures }} to ${{ steps.post_scan.outputs.final_failures }}
            - Improved YAML validity from ${{ steps.pre_scan.outputs.initial_yaml_status }} to ${{ steps.post_scan.outputs.final_yaml_status }}
            
            Generated by: ansible-lint automation toolkit
            Workflow: ${{ github.workflow }}
            Run ID: ${{ github.run_id }}
          title: "🤖 Automated Ansible Lint Fixes - ${{ steps.post_scan.outputs.improvements }} issues resolved"
          body-path: automation_summary.md
          branch: automated-ansible-lint-fixes-${{ github.run_number }}
          base: ${{ github.event.inputs.target_branch || 'main' }}
          labels: |
            automated
            ansible-lint
            code-quality
            maintenance
          assignees: ${{ github.actor }}
          reviewers: ${{ github.repository_owner }}
          draft: false

      - name: Comment on successful automation (no changes)
        if: steps.automation.outputs.changes_made == 'false'
        run: |
          echo "✅ Ansible-lint automation completed successfully!"
          echo "📊 Current status:"
          echo "   - Ansible-lint failures: ${{ steps.pre_scan.outputs.initial_failures }}"
          echo "   - YAML validity: ${{ steps.pre_scan.outputs.initial_yaml_status }}"
          echo "🎯 No fixes were needed - code quality is already excellent!"

      - name: Handle automation failure
        if: failure()
        run: |
          echo "❌ Ansible-lint automation encountered issues"
          echo "📋 Check the workflow logs for details"
          echo "🔧 Consider running the automation locally for debugging:"
          echo "   ./scripts/validate_automation_toolkit.sh"
          echo "   ./scripts/ansible_lint_toolkit.sh"
          
          # Create an issue if automation fails
          cat << EOF > failure_issue.md
          ## 🚨 Automated Ansible Lint Fixes Failed
          
          The automated ansible-lint fixes workflow failed during execution.
          
          **Details:**
          - **Workflow:** ${{ github.workflow }}
          - **Run ID:** ${{ github.run_id }}
          - **Trigger:** ${{ github.event_name }}
          - **Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          **Recommended Actions:**
          1. Check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          2. Run validation locally: \`./scripts/validate_automation_toolkit.sh\`
          3. Run automation locally: \`./scripts/ansible_lint_toolkit.sh\`
          4. Check for any new ansible-lint rules or breaking changes
          
          **Debug Commands:**
          \`\`\`bash
          # Validate toolkit
          ./scripts/validate_automation_toolkit.sh
          
          # Run individual components
          python3 scripts/fix_yaml_parsing.py
          python3 scripts/fix_ansible_lint.py
          python3 scripts/fix_ansible_lint_advanced.py
          
          # Check ansible-lint version
          ansible-lint --version
          \`\`\`
          EOF

      - name: Upload automation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ansible-lint-automation-results-${{ github.run_number }}
          path: |
            automation_summary.md
            automation_output.log
          retention-days: 30

      - name: Report workflow status
        if: always()
        run: |
          if [ "${{ steps.automation.outputs.changes_made }}" == "true" ]; then
            echo "🎉 Successfully created pull request with ansible-lint fixes!"
            echo "🔗 Check your repository for the new pull request"
            echo "📊 Improvements: ${{ steps.post_scan.outputs.improvements }} issues resolved"
          elif [ "${{ steps.automation.outputs.changes_made }}" == "false" ]; then
            echo "✅ No changes needed - your code quality is already excellent!"
          else
            echo "⚠️ Workflow completed with warnings - check logs for details"
          fi
