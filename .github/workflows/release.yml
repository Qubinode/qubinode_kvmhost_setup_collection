name: Release and Deploy collection
on:
  push:
    tags:
      - v*

permissions:
  contents: write  # Required to create releases and access repository content
  actions: read    # Required to read workflow status

jobs:
  releaseanddeploy:
    runs-on: ubuntu-latest
    if: github.repository == 'Qubinode/qubinode_kvmhost_setup_collection'
    strategy:
      matrix:
        python-version: [3.11]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          # Optionally strip `v` prefix
          strip_v: true

      - name: Use tag
        run: echo ${{steps.tag.outputs.tag}}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade ansible
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Copy files and directories to source
        run: |
          ls -lath .
          mkdir -p build/src
          cp $files build/src
          cp -rf $directories build/src
          mkdir -p release/
        env:
          files: README.md LICENSE ansible.cfg galaxy.yml
          directories: inventories roles meta

      - name: Build Ansible Collection
        run: ansible-galaxy collection build build/src --force

      - name: Show Build information
        run: |
          ls -lath .
          ls -lath ./build
          ls -R build
          pwd

      - name: Generate AI Release Notes
        id: ai_release_notes
        run: |
          echo "🤖 Generating intelligent release notes using granite-3-3-8b-instruct..."

          # Get commit messages since last release
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" -10)
          fi

          # Get changed files
          if [ -n "$LAST_TAG" ]; then
            CHANGED_FILES=$(git diff --name-only $LAST_TAG..HEAD | head -20)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~10..HEAD | head -20)
          fi

          # Create prompt for granite model
          cat > release_prompt.txt << 'EOF'
          You are an expert technical writer creating release notes for an Ansible collection.

          Based on the following commit messages and changed files, generate professional release notes in markdown format.

          COMMIT MESSAGES:
          $COMMITS

          CHANGED FILES:
          $CHANGED_FILES

          Please generate release notes with:
          1. A brief summary of what's new
          2. Key improvements and features
          3. Bug fixes and security updates
          4. Breaking changes (if any)
          5. Installation instructions

          Keep it concise, professional, and focused on user value.
          EOF

          # Replace variables in prompt
          sed -i "s/\$COMMITS/$COMMITS/g" release_prompt.txt
          sed -i "s/\$CHANGED_FILES/$CHANGED_FILES/g" release_prompt.txt

          # Call granite model API
          if [ -n "${{ secrets.RED_HAT_MAAS_API_KEY }}" ]; then
            echo "🧠 Calling granite-3-3-8b-instruct model for release notes generation..."

            PROMPT_CONTENT=$(cat release_prompt.txt)

            curl -X POST \
              "https://granite-3-3-8b-instruct-maas-apicast-production.apps.prod.rhoai.rh-aiservices-bu.com:443/v1/completions" \
              -H "Authorization: Bearer ${{ secrets.RED_HAT_MAAS_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"model\": \"granite-3-3-8b-instruct\",
                \"prompt\": \"$PROMPT_CONTENT\",
                \"max_tokens\": 1000,
                \"temperature\": 0.2
              }" \
              --insecure \
              -o ai_response.json

            # Extract generated content
            if [ -f ai_response.json ] && jq -e '.choices[0].text' ai_response.json > /dev/null 2>&1; then
              AI_NOTES=$(jq -r '.choices[0].text' ai_response.json)
              echo "✅ AI-generated release notes created successfully"
              echo "AI_GENERATED=true" >> $GITHUB_OUTPUT
              echo "AI_NOTES<<EOF" >> $GITHUB_OUTPUT
              echo "$AI_NOTES" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "⚠️ AI generation failed, using fallback"
              echo "AI_GENERATED=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ RED_HAT_MAAS_API_KEY not configured, using fallback"
            echo "AI_GENERATED=false" >> $GITHUB_OUTPUT
          fi
        env:
          RED_HAT_MAAS_API_KEY: ${{ secrets.RED_HAT_MAAS_API_KEY }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          files: tosin2013-qubinode_kvmhost_setup_collection-${{steps.tag.outputs.tag}}.tar.gz
          body: |
            # Ansible Collection: tosin2013.qubinode_kvmhost_setup_collection
            ![ReleaseBuildCollection](https://github.com/Qubinode/qubinode_kvmhost_setup_collection/actions/workflows/release.yml/badge.svg)

            ${{ steps.ai_release_notes.outputs.AI_GENERATED == 'true' && steps.ai_release_notes.outputs.AI_NOTES || '## Release Notes\n\nThis release includes updates and improvements to the Qubinode KVM host setup collection.' }}

            ## Installation

            ### Install without requirements.yml file:
            ```sh
            ansible-galaxy collection install tosin2013.qubinode_kvmhost_setup_collection
            ```

            ### Install with requirements.yml file:
            ```sh
            ansible-galaxy collection install -r requirements.yml -f
            ```

            The requirements.yml needs to have the following format and content:
            ```yaml
            ---
            collections:
                - tosin2013.qubinode_kvmhost_setup_collection
            ```

            ${{ steps.ai_release_notes.outputs.AI_GENERATED == 'true' && '---\n*Release notes generated by granite-3-3-8b-instruct AI model*' || '' }}
            For Development use the below command:
            ```sh
            ---
            collections:
              - name: https://github.com/Qubinode/qubinode_kvmhost_setup_collection.git
                type: git
                version: main
            ```
          draft: false
          prerelease: false

      - name: Deploy Ansible collection to Galaxy
        run: |
          ls -lath . 
          ls -lath ./meta
          cat ./meta/runtime.yml
          ansible-galaxy collection publish tosin2013-qubinode_kvmhost_setup_collection-${{steps.tag.outputs.tag}}.tar.gz --api-key ${{ secrets.GALAXY_API_KEY }}
