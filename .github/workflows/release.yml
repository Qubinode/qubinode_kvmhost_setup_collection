name: Release and Deploy collection

# =============================================================================
# Automated Release Pipeline - Triggered by Tags
# =============================================================================
#
# 🎯 PURPOSE:
# This workflow handles both manual and automated releases triggered by git tags.
# It's optimized for dependency updates, security patches, and manual releases.
#
# 🚀 TRIGGER SCENARIOS:
# 1. Automatic: Tag pushed by auto-release-dependencies.yml
# 2. Manual: Tag pushed by manual-release.yml
# 3. Direct: Manual tag push (git tag v1.0.0 && git push origin v1.0.0)
# 4. Workflow Call: Called by other workflows with tag parameter

on:
  push:
    tags:
      - v*
  workflow_call:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.9.2)'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.9.2)'
        required: true
        type: string

permissions:
  contents: write  # Required to create releases and access repository content
  actions: read    # Required to read workflow status

jobs:
  releaseanddeploy:
    runs-on: ubuntu-latest
    if: github.repository == 'Qubinode/qubinode_kvmhost_setup_collection'
    strategy:
      matrix:
        python-version: [3.11]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag
        id: tag
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Inputs tag: ${{ inputs.tag }}"
          echo "GITHUB_REF: $GITHUB_REF"

          if [ -n "${{ inputs.tag }}" ]; then
            # Use tag from workflow_call or workflow_dispatch input
            TAG="${{ inputs.tag }}"
            echo "Using input tag: $TAG"
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            # Extract tag from push event
            TAG=${GITHUB_REF#refs/tags/}
            echo "Using push event tag: $TAG"
          else
            echo "❌ Unable to determine tag from event or inputs"
            echo "Event: ${{ github.event_name }}, GITHUB_REF: $GITHUB_REF, inputs.tag: ${{ inputs.tag }}"
            exit 1
          fi

          # Strip 'v' prefix if present
          TAG_STRIPPED=$(echo "$TAG" | sed 's/^v//')

          echo "tag=$TAG_STRIPPED" >> $GITHUB_OUTPUT
          echo "full_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Use tag
        run: echo ${{steps.tag.outputs.tag}}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade ansible
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Copy files and directories to source
        run: |
          ls -lath .
          mkdir -p build/src
          cp $files build/src
          cp -rf $directories build/src
          mkdir -p release/
        env:
          files: README.md LICENSE ansible.cfg galaxy.yml
          directories: inventories roles meta

      - name: Sync galaxy.yml version with release tag
        run: |
          echo "🔄 Synchronizing galaxy.yml version with release tag..."
          RELEASE_VERSION="${{ steps.tag.outputs.tag }}"

          # Remove 'v' prefix if present
          VERSION_NUMBER=$(echo "$RELEASE_VERSION" | sed 's/^v//')

          echo "📋 Current build/src/galaxy.yml version:"
          grep 'version:' build/src/galaxy.yml

          # Update galaxy.yml version in the build directory (this is what gets built)
          sed -i "s|version: \"[^\"]*\"|version: \"$VERSION_NUMBER\"|" build/src/galaxy.yml

          echo "✅ Updated build/src/galaxy.yml version:"
          grep 'version:' build/src/galaxy.yml

          # Also update the root galaxy.yml for consistency
          sed -i "s|version: \"[^\"]*\"|version: \"$VERSION_NUMBER\"|" galaxy.yml

          # Verify the change was applied correctly
          if grep -q "version: \"$VERSION_NUMBER\"" build/src/galaxy.yml; then
            echo "✅ Version synchronization successful: $VERSION_NUMBER"
          else
            echo "❌ Version synchronization failed!"
            exit 1
          fi

          # Commit the version sync back to repository (if changed)
          if ! git diff --quiet galaxy.yml; then
            echo "📝 Committing version synchronization..."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add galaxy.yml
            git commit -m "chore: sync galaxy.yml version to $VERSION_NUMBER for release $RELEASE_VERSION"
            git pull --rebase origin main || true
            git push
            echo "✅ Version synchronization committed to repository"
          else
            echo "ℹ️ galaxy.yml version already synchronized"
          fi

      - name: Build Ansible Collection
        run: ansible-galaxy collection build build/src --force

      - name: Show Build information
        run: |
          ls -lath .
          ls -lath ./build
          ls -R build
          pwd

      - name: Generate AI Release Notes
        id: ai_release_notes
        run: |
          echo "🤖 Generating intelligent release notes using granite-3-3-8b-instruct..."

          # Detect release type
          RELEASE_TYPE="manual"
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Check if this is an automatic dependency release
            RECENT_COMMITS=$(git log --oneline -5 --pretty=format:"%s")
            if echo "$RECENT_COMMITS" | grep -q "chore: bump version.*update"; then
              if echo "$RECENT_COMMITS" | grep -q "security"; then
                RELEASE_TYPE="security"
              elif echo "$RECENT_COMMITS" | grep -q "ansible-module"; then
                RELEASE_TYPE="ansible-module"
              else
                RELEASE_TYPE="dependency"
              fi
            fi
          fi

          echo "Detected release type: $RELEASE_TYPE"

          # Get commit messages since last release
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" -10)
          fi

          # Get changed files
          if [ -n "$LAST_TAG" ]; then
            CHANGED_FILES=$(git diff --name-only $LAST_TAG..HEAD | head -20)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~10..HEAD | head -20)
          fi

          # Create prompt for granite model based on release type
          cat > release_prompt.txt << EOF
          You are an expert technical writer creating release notes for the Qubinode KVM Host Setup Ansible Collection (tosin2013.qubinode_kvmhost_setup_collection).

          IMPORTANT CONTEXT:
          - Collection Name: tosin2013.qubinode_kvmhost_setup_collection
          - Current Release Version: ${{ steps.tag.outputs.tag }}
          - Release Date: $(date +"%Y-%m-%d")
          - Release Type: $RELEASE_TYPE
          - This is a single release, not a changelog with multiple versions

          RECENT CHANGES:
          $COMMITS

          MODIFIED FILES:
          $CHANGED_FILES

          Generate ONLY release notes for version ${{ steps.tag.outputs.tag }} with:

          ## What's New in v${{ steps.tag.outputs.tag }}

          ### 🔧 Key Improvements
          [Analyze commits and list actual improvements made]

          ### 🛡️ Security & Dependencies
          [List any security fixes or dependency updates]

          ### 🐛 Bug Fixes
          [List any bug fixes from commits]

          ### 📦 Infrastructure & Automation
          [List workflow, CI/CD, or infrastructure improvements]

          ### ⚠️ Breaking Changes
          [Only include if there are actual breaking changes]

          REQUIREMENTS:
          - Use ONLY the actual version number ${{ steps.tag.outputs.tag }}
          - Use current date $(date +"%Y-%m-%d")
          - Base content ONLY on the provided commits and files
          - Use the correct collection name: tosin2013.qubinode_kvmhost_setup_collection
          - Be specific about what changed, not generic
          - If no changes in a category, omit that section
          - Keep it concise and factual
          EOF

          # Replace variables in prompt with proper escaping
          COMMITS_ESCAPED=$(echo "$COMMITS" | sed 's/"/\\"/g' | sed 's/$/\\n/' | tr -d '\n')
          CHANGED_FILES_ESCAPED=$(echo "$CHANGED_FILES" | sed 's/"/\\"/g' | sed 's/$/\\n/' | tr -d '\n')
          CURRENT_DATE=$(date +"%Y-%m-%d")

          sed -i "s/\$COMMITS/$COMMITS_ESCAPED/g" release_prompt.txt
          sed -i "s/\$CHANGED_FILES/$CHANGED_FILES_ESCAPED/g" release_prompt.txt
          sed -i "s/\$(date +\"%Y-%m-%d\")/$CURRENT_DATE/g" release_prompt.txt

          # Call granite model API
          if [ -n "${{ secrets.RED_HAT_MAAS_API_KEY }}" ]; then
            echo "🧠 Calling granite-3-3-8b-instruct model for release notes generation..."

            PROMPT_CONTENT=$(cat release_prompt.txt)

            # Escape the prompt content for JSON
            PROMPT_JSON=$(echo "$PROMPT_CONTENT" | jq -Rs .)

            curl -X POST \
              "https://granite-3-3-8b-instruct-maas-apicast-production.apps.prod.rhoai.rh-aiservices-bu.com:443/v1/completions" \
              -H "Authorization: Bearer ${{ secrets.RED_HAT_MAAS_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"model\": \"granite-3-3-8b-instruct\",
                \"prompt\": $PROMPT_JSON,
                \"max_tokens\": 1500,
                \"temperature\": 0.1,
                \"top_p\": 0.9,
                \"stop\": [\"\\n\\n\\n\"]
              }" \
              --insecure \
              -o ai_response.json

            # Extract generated content
            if [ -f ai_response.json ] && jq -e '.choices[0].text' ai_response.json > /dev/null 2>&1; then
              AI_NOTES=$(jq -r '.choices[0].text' ai_response.json)
              echo "✅ AI-generated release notes created successfully"
              echo "AI_GENERATED=true" >> $GITHUB_OUTPUT
              echo "AI_NOTES<<EOF" >> $GITHUB_OUTPUT
              echo "$AI_NOTES" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "⚠️ AI generation failed, using fallback"
              echo "AI_GENERATED=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ RED_HAT_MAAS_API_KEY not configured, using fallback"
            echo "AI_GENERATED=false" >> $GITHUB_OUTPUT
          fi
        env:
          RED_HAT_MAAS_API_KEY: ${{ secrets.RED_HAT_MAAS_API_KEY }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          tag_name: v${{steps.tag.outputs.tag}}
          name: Release v${{steps.tag.outputs.tag}}
          files: tosin2013-qubinode_kvmhost_setup_collection-${{steps.tag.outputs.tag}}.tar.gz
          body: |
            # Ansible Collection: tosin2013.qubinode_kvmhost_setup_collection
            ![ReleaseBuildCollection](https://github.com/Qubinode/qubinode_kvmhost_setup_collection/actions/workflows/release.yml/badge.svg)

            ${{ steps.ai_release_notes.outputs.AI_GENERATED == 'true' && steps.ai_release_notes.outputs.AI_NOTES || '## Release Notes\n\nThis release includes updates and improvements to the Qubinode KVM host setup collection.' }}

            ## Installation

            ### Install without requirements.yml file:
            ```sh
            ansible-galaxy collection install tosin2013.qubinode_kvmhost_setup_collection
            ```

            ### Install with requirements.yml file:
            ```sh
            ansible-galaxy collection install -r requirements.yml -f
            ```

            The requirements.yml needs to have the following format and content:
            ```yaml
            ---
            collections:
                - tosin2013.qubinode_kvmhost_setup_collection
            ```

            ${{ steps.ai_release_notes.outputs.AI_GENERATED == 'true' && '---\n*Release notes generated by granite-3-3-8b-instruct AI model*' || '' }}
            For Development use the below command:
            ```sh
            ---
            collections:
              - name: https://github.com/Qubinode/qubinode_kvmhost_setup_collection.git
                type: git
                version: main
            ```
          draft: false
          prerelease: false

      - name: Deploy Ansible collection to Galaxy
        run: |
          ls -lath . 
          ls -lath ./meta
          cat ./meta/runtime.yml
          ansible-galaxy collection publish tosin2013-qubinode_kvmhost_setup_collection-${{steps.tag.outputs.tag}}.tar.gz --api-key ${{ secrets.GALAXY_API_KEY }}
