name: Deploy Documentation to GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'galaxy.yml'
      - '.github/workflows/docs-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'galaxy.yml'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for proper versioning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs/requirements.txt

      - name: Set up Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Build documentation with Sphinx
        run: |
          cd docs
          make clean
          make html

      - name: Check for broken links
        run: |
          cd docs
          make linkcheck || echo "Link check completed with warnings"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_build/html

  # Deployment job (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # PR preview job (for pull requests)
  preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Comment PR with preview info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ“š Documentation Preview')
            );
            
            const commentBody = `ðŸ“š **Documentation Preview**
            
            The documentation has been built successfully for this PR.
            
            **Build Status**: âœ… Success
            **Build Time**: ${{ github.run_id }}
            **Commit**: ${{ github.sha }}
            
            To view the full documentation site, check the main branch deployment at:
            https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/
            
            *This comment will be updated when the PR is updated.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
