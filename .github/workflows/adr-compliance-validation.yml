name: ADR Compliance and File Structure Validation

on:
  pull_request:
    paths:
      - 'roles/**'
      - 'docs/adrs/**'
      - 'molecule/**'
      - '.github/**'
      - 'scripts/**'
      - 'validation/**'
      - 'rules/**'
  push:
    branches:
      - main
      - develop
  schedule:
    # Run compliance checks weekly on Fridays at 14:00 UTC
    - cron: '0 14 * * 5'
  workflow_dispatch:
    inputs:
      validation_mode:
        description: 'Validation mode'
        required: false
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'compliance-only'
          - 'structure-only'

concurrency:
  group: adr-compliance-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  file-structure-validation:
    name: File Structure Validation
    runs-on: self-hosted
    if: github.event.inputs.validation_mode != 'compliance-only'
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Run file structure validation
        run: |
          chmod +x ./scripts/validate-file-structure.sh
          ./scripts/validate-file-structure.sh
      
      - name: Upload file structure report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: file-structure-validation-report
          path: |
            *.log
            ./**/*.validation
          retention-days: 7

  adr-compliance-check:
    name: ADR Compliance Check
    runs-on: self-hosted
    if: github.event.inputs.validation_mode != 'structure-only'
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ env.PYTHON_VERSION }}
        run: |
          # Detect OS and use appropriate package installation method
          . /etc/os-release
          if [[ "$ID" == "rocky" ]]; then
            echo "Using --nogpgcheck for Rocky Linux package installation"
            sudo yum install -y --nogpgcheck python${{ env.PYTHON_VERSION }} python${{ env.PYTHON_VERSION }}-devel python${{ env.PYTHON_VERSION }}-pip
          else
            sudo yum install -y python${{ env.PYTHON_VERSION }} python${{ env.PYTHON_VERSION }}-devel python${{ env.PYTHON_VERSION }}-pip
          fi
          python${{ env.PYTHON_VERSION }} -m pip install --upgrade pip
      
      - name: Run ADR compliance checker
        run: |
          chmod +x ./scripts/adr-compliance-checker.sh
          ./scripts/adr-compliance-checker.sh
      
      - name: Upload compliance reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: adr-compliance-reports
          path: compliance-reports/
          retention-days: 30
      
      - name: Check for critical compliance failures
        if: always()
        run: |
          # Find the latest compliance report
          LATEST_REPORT=$(find compliance-reports/ -name "adr-compliance-*.json" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)
          
          if [[ -f "$LATEST_REPORT" ]]; then
            COMPLIANCE_RATE=$(jq -r '.report_metadata.compliance_percentage' "$LATEST_REPORT")
            NON_COMPLIANT=$(jq -r '.report_metadata.non_compliant_adrs' "$LATEST_REPORT")
            
            echo "Compliance rate: ${COMPLIANCE_RATE}%"
            echo "Non-compliant ADRs: $NON_COMPLIANT"
            
            # Set GitHub output
            echo "compliance-rate=${COMPLIANCE_RATE}" >> $GITHUB_OUTPUT
            echo "non-compliant=${NON_COMPLIANT}" >> $GITHUB_OUTPUT
            
            # Fail if compliance rate is below 90%
            if [[ $COMPLIANCE_RATE -lt 90 ]]; then
              echo "::error::ADR compliance rate ($COMPLIANCE_RATE%) is below required threshold (90%)"
              exit 1
            fi
          else
            echo "::error::No compliance report found"
            exit 1
          fi

  dependency-validation:
    name: Dependency Update Validation
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ env.PYTHON_VERSION }}
        run: |
          # Detect OS and use appropriate package installation method
          . /etc/os-release
          if [[ "$ID" == "rocky" ]]; then
            echo "Using --nogpgcheck for Rocky Linux package installation"
            sudo yum install -y --nogpgcheck python${{ env.PYTHON_VERSION }} python${{ env.PYTHON_VERSION }}-devel python${{ env.PYTHON_VERSION }}-pip
          else
            sudo yum install -y python${{ env.PYTHON_VERSION }} python${{ env.PYTHON_VERSION }}-devel python${{ env.PYTHON_VERSION }}-pip
          fi
          python${{ env.PYTHON_VERSION }} -m pip install --upgrade pip
      
      - name: Run dependency validation pipeline
        run: |
          chmod +x ./scripts/dependency-validation-pipeline.sh
          ./scripts/dependency-validation-pipeline.sh quick
      
      - name: Upload dependency validation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-validation-reports
          path: dependency-validation-reports/
          retention-days: 14

  enhanced-security-scan:
    name: Enhanced Security Scan
    runs-on: self-hosted
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup scanning tools
        run: |
          # Detect OS and use appropriate package installation method
          . /etc/os-release
          if [[ "$ID" == "rocky" ]]; then
            echo "Using --nogpgcheck for Rocky Linux package installation"
            sudo yum install -y --nogpgcheck python${{ env.PYTHON_VERSION }} python${{ env.PYTHON_VERSION }}-devel python${{ env.PYTHON_VERSION }}-pip jq
          else
            sudo yum install -y python${{ env.PYTHON_VERSION }} python${{ env.PYTHON_VERSION }}-devel python${{ env.PYTHON_VERSION }}-pip jq
          fi
          python${{ env.PYTHON_VERSION }} -m pip install --upgrade pip
      
      - name: Run Ansible collection security check
        run: |
          # Use focused security check for Ansible collections
          # Only scans project requirements, not system packages
          # Appropriate for collections that don't control the entire environment
          ./scripts/ansible-collection-security-check.sh
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: enhanced-security-scan-results
          path: security-reports/
          retention-days: 30
      
      - name: Check security scan results
        if: always()
        run: |
          if [[ -f "security-reports/summary.json" ]]; then
            CRITICAL_COUNT=$(jq '.summary.critical // 0' security-reports/summary.json)
            HIGH_COUNT=$(jq '.summary.high // 0' security-reports/summary.json)
            MEDIUM_COUNT=$(jq '.summary.medium // 0' security-reports/summary.json)
            
            echo "Security scan results:"
            echo "- Critical: $CRITICAL_COUNT"
            echo "- High: $HIGH_COUNT"
            echo "- Medium: $MEDIUM_COUNT"
            
            # Set GitHub outputs
            echo "critical-vulns=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
            echo "high-vulns=$HIGH_COUNT" >> $GITHUB_OUTPUT
            echo "medium-vulns=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
            
            # Fail on critical vulnerabilities
            if [[ $CRITICAL_COUNT -gt 0 ]]; then
              echo "::error::Critical security vulnerabilities found!"
              exit 1
            elif [[ $HIGH_COUNT -gt 10 ]]; then
              echo "::warning::High number of high-severity vulnerabilities found ($HIGH_COUNT)"
            fi
          else
            echo "::warning::Security scan summary not found"
          fi

  validation-summary:
    name: Validation Summary
    runs-on: self-hosted
    needs: [file-structure-validation, adr-compliance-check, dependency-validation, enhanced-security-scan]
    if: always()
    steps:
      - name: Generate validation summary
        run: |
          echo "# DevOps & Automation Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # File structure validation
          if [[ "${{ needs.file-structure-validation.result }}" == "success" ]]; then
            echo "✅ **File Structure Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.file-structure-validation.result }}" == "skipped" ]]; then
            echo "⏭️ **File Structure Validation**: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **File Structure Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # ADR compliance check
          if [[ "${{ needs.adr-compliance-check.result }}" == "success" ]]; then
            echo "✅ **ADR Compliance Check**: PASSED" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.adr-compliance-check.result }}" == "skipped" ]]; then
            echo "⏭️ **ADR Compliance Check**: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **ADR Compliance Check**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Dependency validation
          if [[ "${{ needs.dependency-validation.result }}" == "success" ]]; then
            echo "✅ **Dependency Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security scan
          if [[ "${{ needs.enhanced-security-scan.result }}" == "success" ]]; then
            echo "✅ **Enhanced Security Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Enhanced Security Scan**: ISSUES FOUND" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Key Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Compliance Rate**: ${{ needs.adr-compliance-check.outputs.compliance-rate || 'N/A' }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Non-Compliant ADRs**: ${{ needs.adr-compliance-check.outputs.non-compliant || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical Vulnerabilities**: ${{ needs.enhanced-security-scan.outputs.critical-vulns || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **High Vulnerabilities**: ${{ needs.enhanced-security-scan.outputs.high-vulns || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Generated: $(date)" >> $GITHUB_STEP_SUMMARY
      
      - name: Check overall validation status
        run: |
          FAILED_JOBS=0
          
          # Count failed/critical jobs
          if [[ "${{ needs.file-structure-validation.result }}" == "failure" ]]; then
            ((FAILED_JOBS++))
          fi
          
          if [[ "${{ needs.adr-compliance-check.result }}" == "failure" ]]; then
            ((FAILED_JOBS++))
          fi
          
          if [[ "${{ needs.dependency-validation.result }}" == "failure" ]]; then
            ((FAILED_JOBS++))
          fi
          
          # Security scan can have warnings but still pass overall validation
          # Only fail if critical vulnerabilities are found
          if [[ "${{ needs.enhanced-security-scan.outputs.critical-vulns }}" -gt 0 ]]; then
            ((FAILED_JOBS++))
          fi
          
          if [[ $FAILED_JOBS -gt 0 ]]; then
            echo "::error::$FAILED_JOBS critical validation(s) failed!"
            echo "DevOps & Automation validation completed with failures."
            exit 1
          else
            echo "✅ All DevOps & Automation validations passed!"
            echo "Project meets ADR compliance and security standards."
            exit 0
          fi
