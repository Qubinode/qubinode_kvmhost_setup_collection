name: RHEL 10 Virtualization Package Auto-PR

on:
  schedule:
    # Run every Monday at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      force_check:
        description: 'Force package availability check'
        required: false
        default: 'false'

env:
  RHEL10_IMAGE: "registry.redhat.io/ubi10-init:latest"
  BRANCH_NAME: "feature/rhel10-virtualization-packages"

jobs:
  check-and-create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Set up environment
        run: |
          echo "🔍 Setting up RHEL 10 package monitoring environment"
          echo "Date: $(date)"
          echo "Image: $RHEL10_IMAGE"
      
      - name: Check RHEL 10 virtualization package availability
        id: check_packages
        run: |
          echo "🔍 Checking RHEL 10 virtualization package availability..."
          
          # Define packages to check
          PACKAGES=("libvirt" "qemu-kvm" "virt-manager" "libvirt-daemon-kvm" "virt-install" "libguestfs-tools")
          AVAILABLE_COUNT=0
          TOTAL_PACKAGES=${#PACKAGES[@]}
          
          # Create status report
          echo "# RHEL 10 Package Availability Report" > package-status.md
          echo "Date: $(date)" >> package-status.md
          echo "" >> package-status.md
          
          for package in "${PACKAGES[@]}"; do
            echo -n "Checking $package: "
            if podman run --rm $RHEL10_IMAGE dnf list available $package &>/dev/null; then
              echo "✅ AVAILABLE"
              echo "- ✅ $package: Available" >> package-status.md
              ((AVAILABLE_COUNT++))
            else
              echo "❌ Not available"
              echo "- ❌ $package: Not available" >> package-status.md
            fi
          done
          
          echo "" >> package-status.md
          echo "**Summary: $AVAILABLE_COUNT/$TOTAL_PACKAGES packages available**" >> package-status.md
          
          # Set output variables
          echo "available_count=$AVAILABLE_COUNT" >> $GITHUB_OUTPUT
          echo "total_packages=$TOTAL_PACKAGES" >> $GITHUB_OUTPUT
          
          # Check if we have enough packages to warrant a PR (at least 3 core packages)
          if [ $AVAILABLE_COUNT -ge 3 ]; then
            echo "packages_ready=true" >> $GITHUB_OUTPUT
            echo "🎉 Sufficient packages available for RHEL 10 support!"
          else
            echo "packages_ready=false" >> $GITHUB_OUTPUT
            echo "⏳ Waiting for more packages to become available..."
          fi
      
      - name: Check if PR already exists
        id: check_pr
        if: steps.check_packages.outputs.packages_ready == 'true'
        run: |
          # Check if branch already exists
          if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "ℹ️ PR branch already exists, skipping creation"
          else
            echo "pr_exists=false" >> $GITHUB_OUTPUT
            echo "✅ No existing PR found, proceeding with creation"
          fi
      
      - name: Create feature branch
        if: steps.check_packages.outputs.packages_ready == 'true' && steps.check_pr.outputs.pr_exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b $BRANCH_NAME
      
      - name: Update RHEL 10 package configuration
        if: steps.check_packages.outputs.packages_ready == 'true' && steps.check_pr.outputs.pr_exists == 'false'
        run: |
          echo "🔧 Updating RHEL 10 package configuration..."
          
          # Update the rhel_version_detection.yml file
          # Replace the container-safe package list with full virtualization packages
          sed -i '/rhel10_container_safe:/,/# NetworkManager-libnm/c\
          rhel10:\
            # RHEL 10 virtualization packages - Now available!\
            - libvirt\
            - libvirt-daemon-kvm\
            - qemu-kvm\
            - virt-manager\
            - virt-install\
            - libguestfs-tools\
            - iproute\
            - NetworkManager\
            - cockpit\
            - cockpit-machines\
            - python3-libvirt\
            - python3-lxml\
            - guestfs-tools' roles/kvmhost_setup/tasks/rhel_version_detection.yml
          
          # Update package selection logic to use full RHEL 10 packages
          sed -i 's/kvmhost_packages_base.rhel10_container_safe if (/kvmhost_packages_base.rhel10 if (false and /' roles/kvmhost_setup/tasks/rhel_version_detection.yml
      
      - name: Update documentation
        if: steps.check_packages.outputs.packages_ready == 'true' && steps.check_pr.outputs.pr_exists == 'false'
        run: |
          echo "📝 Updating documentation..."
          
          # Create update summary
          cat > RHEL10_UPDATE_SUMMARY.md << EOF
          # RHEL 10 Virtualization Package Update
          
          ## 🎉 Automated Update Summary
          
          This pull request was automatically created when RHEL 10 virtualization packages became available.
          
          ### Package Availability Status
          $(cat package-status.md)
          
          ### Changes Made
          
          1. **Updated Package Lists**: Replaced container-safe package list with full virtualization packages
          2. **Modified Selection Logic**: Updated package selection to use full RHEL 10 packages
          3. **Enhanced Support**: Added complete virtualization stack support for RHEL 10
          
          ### Testing Required
          
          - [ ] Test on actual RHEL 10 system with subscription
          - [ ] Validate all virtualization packages install correctly
          - [ ] Run full molecule test suite
          - [ ] Performance benchmarking comparison
          - [ ] Update CI/CD pipeline for RHEL 10 production testing
          
          ### Next Steps
          
          1. Review and test the changes
          2. Update ADR-0008 with RHEL 10 production status
          3. Update documentation and user guides
          4. Announce RHEL 10 support to users
          
          ---
          *This PR was automatically created by GitHub Actions on $(date)*
          EOF
          
          # Update README with RHEL 10 status
          if grep -q "RHEL 10.*Limited" README.md; then
            sed -i 's/RHEL 10.*Limited.*/RHEL 10: ✅ Full Support (Virtualization packages available)/' README.md
          fi
      
      - name: Commit changes
        if: steps.check_packages.outputs.packages_ready == 'true' && steps.check_pr.outputs.pr_exists == 'false'
        run: |
          git add .
          git commit -m "🎉 Add full RHEL 10 virtualization package support

          - Updated package lists with available virtualization packages
          - Modified selection logic for production RHEL 10 systems
          - Added comprehensive virtualization stack support
          - Auto-generated from package availability detection
          
          Packages now available: ${{ steps.check_packages.outputs.available_count }}/${{ steps.check_packages.outputs.total_packages }}
          
          Co-authored-by: GitHub Actions <action@github.com>"
      
      - name: Push feature branch
        if: steps.check_packages.outputs.packages_ready == 'true' && steps.check_pr.outputs.pr_exists == 'false'
        run: |
          git push origin $BRANCH_NAME
      
      - name: Create Pull Request
        if: steps.check_packages.outputs.packages_ready == 'true' && steps.check_pr.outputs.pr_exists == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🎉 RHEL 10 Virtualization Packages Now Available - Auto-Update',
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: `# 🚀 RHEL 10 Virtualization Package Support

            ## 🎯 Automated Detection Results
            
            Our monitoring system detected that RHEL 10 virtualization packages are now available!
            
            **Packages Available**: ${{ steps.check_packages.outputs.available_count }}/${{ steps.check_packages.outputs.total_packages }}
            
            ## 📋 Changes Included
            
            - ✅ **Updated Package Lists**: Full virtualization package support
            - ✅ **Modified Selection Logic**: Production-ready RHEL 10 configuration  
            - ✅ **Enhanced Documentation**: Updated status and guides
            - ✅ **Automated Testing**: Ready for validation
            
            ## 🧪 Testing Checklist
            
            - [ ] Test package installation on actual RHEL 10 system
            - [ ] Validate virtualization functionality
            - [ ] Run complete molecule test suite
            - [ ] Performance benchmarking
            - [ ] Update CI/CD for production RHEL 10 testing
            
            ## 📚 Documentation Updates Needed
            
            - [ ] Update ADR-0008 with production status
            - [ ] Refresh user guides and examples
            - [ ] Update support matrix documentation
            
            ## 🎉 Impact
            
            This update enables full RHEL 10 virtualization support, making the project ready for enterprise RHEL 10 deployments!
            
            ---
            
            *🤖 This PR was automatically created by our RHEL 10 monitoring system on $(date)*
            *📊 Monitoring will continue to track package updates and improvements*`,
              draft: false
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['enhancement', 'rhel-10', 'automated', 'virtualization', 'high-priority']
            });
            
            console.log(`✅ Created PR #${pr.number}: ${pr.html_url}`);
      
      - name: Create status issue
        if: steps.check_packages.outputs.packages_ready == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            // Check if status issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'rhel-10-monitoring',
              state: 'open'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '📊 RHEL 10 Virtualization Package Monitoring Status',
                body: `# 🔍 RHEL 10 Package Monitoring
                
                This issue tracks the availability of RHEL 10 virtualization packages.
                
                ## Current Status
                **Packages Available**: ${{ steps.check_packages.outputs.available_count }}/${{ steps.check_packages.outputs.total_packages }}
                **Last Checked**: $(date)
                
                ## Monitoring Details
                - ✅ Automated weekly checks active
                - ✅ Will auto-create PR when packages are available
                - ✅ Threshold: 3+ core packages needed
                
                ## Package Status
                $(cat package-status.md)
                
                ---
                *This issue is automatically updated by our monitoring system*`,
                labels: ['rhel-10-monitoring', 'tracking']
              });
            }
      
      - name: Generate detailed issue report
        run: |
          echo "## 🔍 Detailed Issue Analysis"
          echo "### Package Availability Issues"

          # Show specific package issues
          echo "**Unavailable Packages and Reasons:**"
          echo "- libvirt: Not available in UBI repositories (requires full RHEL subscription)"
          echo "- qemu-kvm: Virtualization packages excluded from container images"
          echo "- virt-manager: GUI packages not included in minimal container images"
          echo "- libvirt-daemon-kvm: KVM daemon requires kernel modules not available in containers"
          echo "- virt-install: Installation tools require system-level access"
          echo "- libguestfs-tools: Guest filesystem tools require privileged access"
          echo "- cockpit: Web interface packages not in UBI minimal set"
          echo "- NetworkManager: Full network management not available in UBI"

          echo ""
          echo "**Root Cause Analysis:**"
          echo "1. **Container Limitation**: UBI (Universal Base Image) containers are minimal"
          echo "2. **Repository Scope**: Only BaseOS, AppStream, and CodeReady Builder available"
          echo "3. **Subscription Model**: Virtualization packages require full RHEL entitlement"
          echo "4. **Security Design**: Containers cannot access host virtualization features"

          echo ""
          echo "**Expected Resolution:**"
          echo "- Packages will become available when RHEL 10 moves to full production"
          echo "- Full RHEL 10 systems (non-container) will have complete package access"
          echo "- Container testing validates role logic without full virtualization stack"

      - name: Summary
        run: |
          echo "## 📊 RHEL 10 Monitoring Summary"
          echo "- **Packages Available**: ${{ steps.check_packages.outputs.available_count }}/${{ steps.check_packages.outputs.total_packages }}"
          echo "- **Ready for PR**: ${{ steps.check_packages.outputs.packages_ready }}"
          echo "- **Date**: $(date)"
          echo "- **Container Environment**: UBI limitations expected"
          echo "- **Production Systems**: Will have full package access"

          if [ "${{ steps.check_packages.outputs.packages_ready }}" == "true" ]; then
            echo "🎉 **Action**: Created automated PR for RHEL 10 support!"
          else
            echo "⏳ **Action**: Continuing to monitor package availability"
            echo "💡 **Note**: Current unavailability is due to UBI container limitations"
          fi
