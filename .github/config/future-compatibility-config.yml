# Future Compatibility Testing Configuration
# This file defines which versions to test for forward compatibility

# Ansible versions to test
# Include current stable, next minor, and development versions
ansible_versions:
  stable:
    - "2.18"      # Current recommended stable version
  testing:
    - "2.19"      # Next minor version
  experimental:
    - "devel"     # Development branch (expect failures)

# Python versions to test
python_versions:
  supported:
    - "3.11"      # Current RHEL 9 standard
  future:
    - "3.12"      # Next Python version to support

# Test configuration
test_config:
  # How often to run (cron format)
  schedule: "0 2 * * 0"  # Weekly on Sundays at 2 AM UTC
  
  # Timeout for each test job
  timeout_minutes: 30
  
  # Whether to continue testing if one version fails
  continue_on_error: true
  
  # Whether to fail fast (stop testing other combinations if one fails)
  fail_fast: false

# Red Hat compatibility tracking
# These versions are officially supported by Red Hat
rhel_compatibility:
  rhel8:
    ansible_versions: ["2.15", "2.16", "2.17"]
    python_versions: ["3.9", "3.11"]
    status: "supported"
  
  rhel9:
    ansible_versions: ["2.17", "2.18"]
    python_versions: ["3.11"]
    status: "current"
  
  rhel10_beta:
    ansible_versions: ["2.18", "2.19"]
    python_versions: ["3.11", "3.12"]
    status: "preview"

# Testing scope
# What to test when new versions are found
test_scope:
  basic_functionality:
    - "ansible --version"
    - "ansible-playbook --version" 
    - "ansible-playbook --syntax-check"
  
  collection_compatibility:
    - "ansible-galaxy collection install"
    - "molecule create/destroy"
    
  advanced_features:
    - "full molecule test"  # Only if basic tests pass

# Notification settings
notifications:
  # When to notify about compatibility changes
  notify_on:
    - "new_version_compatible"
    - "version_becomes_incompatible"
    - "critical_failure"
  
  # Where to send notifications (configure in workflow)
  channels:
    - "github_issues"      # Create issues for significant changes
    - "action_summary"     # Always include in action summary
    # - "slack"            # Could add Slack notifications
    # - "email"            # Could add email notifications

# Migration planning
migration_planning:
  # When to consider a version ready for production
  ready_criteria:
    - "basic_functionality: pass"
    - "collection_compatibility: pass" 
    - "no_critical_regressions: true"
    - "rhel_support_announced: true"
  
  # How long to test before recommending
  stabilization_period: "4_weeks"
  
  # What triggers a migration recommendation
  migration_triggers:
    - "security_fixes_only_in_newer_version"
    - "performance_improvements_significant"
    - "new_features_required_by_collection"
